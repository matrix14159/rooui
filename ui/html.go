package ui

// this file is generated by go:generate, DO NOT EDIT.

// A return a html <a> element
func A() HtmlA {
	return &htmlA{htmlBaseElement: htmlBaseElement{tag: "a"}}
}

// HtmlA represent a html <a> element
type HtmlA interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlA

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlA

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlA

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
	Download(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
	Href(val any) HtmlA

	// Id set element id attribute
	Id(val string) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-ping
	Ping(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-referrerpolicy
	ReferrerPolicy(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-rel
	Rel(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlA

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlA

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
	Target(val any) HtmlA

	// Text set val as text conent for current element
	Text(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-type
	Type(val any) HtmlA

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlA
}

type htmlA struct {
	htmlBaseElement
}

func (p *htmlA) AccessKey(val any) HtmlA {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlA) AutoCapitalize(val any) HtmlA {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlA) AutoFocus(val any) HtmlA {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlA) Body(elems ...UI) HtmlA {
	p.setBody(elems...)
	return p
}

func (p *htmlA) Class(name string, items ...*Ref[StyleItem]) HtmlA {
	p.setClass(name, items...)
	return p
}

func (p *htmlA) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlA {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlA) ContentEditAble(val any) HtmlA {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlA) DataWith(name string, val any) HtmlA {
	p.dataWith(name, val)
	return p
}

func (p *htmlA) Dir(val any) HtmlA {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlA) Download(val any) HtmlA {
	p.SetProperty("download", val)
	return p
}

func (p *htmlA) DraggAble(val any) HtmlA {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlA) EnterKeyHint(val any) HtmlA {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlA) Hidden(val any) HtmlA {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlA) Href(val any) HtmlA {
	p.SetProperty("href", val)
	return p
}

func (p *htmlA) Id(val string) HtmlA {
	p.SetUIElementId(val)
	return p
}

func (p *htmlA) Inert(val any) HtmlA {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlA) InputMode(val any) HtmlA {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlA) Is(val any) HtmlA {
	p.SetProperty("is", val)
	return p
}

func (p *htmlA) ItemId(val any) HtmlA {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlA) ItemProp(val any) HtmlA {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlA) ItemRef(val any) HtmlA {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlA) ItemScope(val any) HtmlA {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlA) ItemType(val any) HtmlA {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlA) Lang(val any) HtmlA {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlA) Nonce(val any) HtmlA {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlA) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlA) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlA) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlA) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlA) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlA) OnBlur(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlA) OnClick(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlA) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlA) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlA) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlA) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlA) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlA) OnCopy(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlA) OnCut(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlA) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlA) OnDrag(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlA) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlA) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlA) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlA) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlA) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlA) OnDrop(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlA) OnError(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlA) OnFocus(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlA) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlA) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlA) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlA) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlA) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlA) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlA) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlA) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlA) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlA) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlA) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlA) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlA) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlA) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlA) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlA) OnPaste(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlA) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlA) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlA) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlA) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlA) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlA) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlA) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlA) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlA) OnScroll(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlA) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlA) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlA) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlA) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlA) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlA) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlA) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlA) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlA) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlA) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlA) OnWheel(handler func(event Event, options ...any), options ...any) HtmlA {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlA) Part(val any) HtmlA {
	p.SetProperty("part", val)
	return p
}

func (p *htmlA) Ping(val any) HtmlA {
	p.SetProperty("ping", val)
	return p
}

func (p *htmlA) ReferrerPolicy(val any) HtmlA {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlA) Rel(val any) HtmlA {
	p.SetProperty("rel", val)
	return p
}

func (p *htmlA) Slot(val any) HtmlA {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlA) SpellCheck(val any) HtmlA {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlA) Style(items ...*Ref[StyleItem]) HtmlA {
	p.setStyle(items...)
	return p
}

func (p *htmlA) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlA {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlA) TabIndex(val any) HtmlA {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlA) Target(val any) HtmlA {
	p.SetProperty("target", val)
	return p
}

func (p *htmlA) Text(val any) HtmlA {
	p.setText(val)
	return p
}

func (p *htmlA) Title(val any) HtmlA {
	p.SetProperty("title", val)
	return p
}

func (p *htmlA) Translate(val any) HtmlA {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlA) Type(val any) HtmlA {
	p.SetProperty("type", val)
	return p
}

func (p *htmlA) VirtualKeyBoardPolicy(val any) HtmlA {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Abbr return a html <abbr> element
func Abbr() HtmlAbbr {
	return &htmlAbbr{htmlBaseElement: htmlBaseElement{tag: "abbr"}}
}

// HtmlAbbr represent a html <abbr> element
type HtmlAbbr interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlAbbr

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlAbbr

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlAbbr

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlAbbr

	// Id set element id attribute
	Id(val string) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlAbbr

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlAbbr

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlAbbr

	// Text set val as text conent for current element
	Text(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlAbbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlAbbr
}

type htmlAbbr struct {
	htmlBaseElement
}

func (p *htmlAbbr) AccessKey(val any) HtmlAbbr {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlAbbr) AutoCapitalize(val any) HtmlAbbr {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlAbbr) AutoFocus(val any) HtmlAbbr {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlAbbr) Body(elems ...UI) HtmlAbbr {
	p.setBody(elems...)
	return p
}

func (p *htmlAbbr) Class(name string, items ...*Ref[StyleItem]) HtmlAbbr {
	p.setClass(name, items...)
	return p
}

func (p *htmlAbbr) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAbbr {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlAbbr) ContentEditAble(val any) HtmlAbbr {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlAbbr) DataWith(name string, val any) HtmlAbbr {
	p.dataWith(name, val)
	return p
}

func (p *htmlAbbr) Dir(val any) HtmlAbbr {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlAbbr) DraggAble(val any) HtmlAbbr {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlAbbr) EnterKeyHint(val any) HtmlAbbr {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlAbbr) Hidden(val any) HtmlAbbr {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlAbbr) Id(val string) HtmlAbbr {
	p.SetUIElementId(val)
	return p
}

func (p *htmlAbbr) Inert(val any) HtmlAbbr {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlAbbr) InputMode(val any) HtmlAbbr {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlAbbr) Is(val any) HtmlAbbr {
	p.SetProperty("is", val)
	return p
}

func (p *htmlAbbr) ItemId(val any) HtmlAbbr {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlAbbr) ItemProp(val any) HtmlAbbr {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlAbbr) ItemRef(val any) HtmlAbbr {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlAbbr) ItemScope(val any) HtmlAbbr {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlAbbr) ItemType(val any) HtmlAbbr {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlAbbr) Lang(val any) HtmlAbbr {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlAbbr) Nonce(val any) HtmlAbbr {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlAbbr) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlAbbr) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlAbbr) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlAbbr) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlAbbr) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlAbbr) OnBlur(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlAbbr) OnClick(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlAbbr) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlAbbr) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlAbbr) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlAbbr) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlAbbr) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlAbbr) OnCopy(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlAbbr) OnCut(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlAbbr) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlAbbr) OnDrag(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlAbbr) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlAbbr) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlAbbr) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlAbbr) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlAbbr) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlAbbr) OnDrop(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlAbbr) OnError(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlAbbr) OnFocus(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlAbbr) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlAbbr) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlAbbr) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlAbbr) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlAbbr) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlAbbr) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlAbbr) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlAbbr) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlAbbr) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlAbbr) OnPaste(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlAbbr) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlAbbr) OnScroll(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlAbbr) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlAbbr) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlAbbr) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlAbbr) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlAbbr) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlAbbr) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlAbbr) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlAbbr) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlAbbr) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlAbbr) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlAbbr) OnWheel(handler func(event Event, options ...any), options ...any) HtmlAbbr {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlAbbr) Part(val any) HtmlAbbr {
	p.SetProperty("part", val)
	return p
}

func (p *htmlAbbr) Slot(val any) HtmlAbbr {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlAbbr) SpellCheck(val any) HtmlAbbr {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlAbbr) Style(items ...*Ref[StyleItem]) HtmlAbbr {
	p.setStyle(items...)
	return p
}

func (p *htmlAbbr) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAbbr {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlAbbr) TabIndex(val any) HtmlAbbr {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlAbbr) Text(val any) HtmlAbbr {
	p.setText(val)
	return p
}

func (p *htmlAbbr) Title(val any) HtmlAbbr {
	p.SetProperty("title", val)
	return p
}

func (p *htmlAbbr) Translate(val any) HtmlAbbr {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlAbbr) VirtualKeyBoardPolicy(val any) HtmlAbbr {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Address return a html <address> element
func Address() HtmlAddress {
	return &htmlAddress{htmlBaseElement: htmlBaseElement{tag: "address"}}
}

// HtmlAddress represent a html <address> element
type HtmlAddress interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlAddress

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlAddress

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlAddress

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlAddress

	// Id set element id attribute
	Id(val string) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlAddress

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlAddress

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlAddress

	// Text set val as text conent for current element
	Text(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlAddress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlAddress
}

type htmlAddress struct {
	htmlBaseElement
}

func (p *htmlAddress) AccessKey(val any) HtmlAddress {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlAddress) AutoCapitalize(val any) HtmlAddress {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlAddress) AutoFocus(val any) HtmlAddress {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlAddress) Body(elems ...UI) HtmlAddress {
	p.setBody(elems...)
	return p
}

func (p *htmlAddress) Class(name string, items ...*Ref[StyleItem]) HtmlAddress {
	p.setClass(name, items...)
	return p
}

func (p *htmlAddress) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAddress {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlAddress) ContentEditAble(val any) HtmlAddress {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlAddress) DataWith(name string, val any) HtmlAddress {
	p.dataWith(name, val)
	return p
}

func (p *htmlAddress) Dir(val any) HtmlAddress {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlAddress) DraggAble(val any) HtmlAddress {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlAddress) EnterKeyHint(val any) HtmlAddress {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlAddress) Hidden(val any) HtmlAddress {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlAddress) Id(val string) HtmlAddress {
	p.SetUIElementId(val)
	return p
}

func (p *htmlAddress) Inert(val any) HtmlAddress {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlAddress) InputMode(val any) HtmlAddress {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlAddress) Is(val any) HtmlAddress {
	p.SetProperty("is", val)
	return p
}

func (p *htmlAddress) ItemId(val any) HtmlAddress {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlAddress) ItemProp(val any) HtmlAddress {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlAddress) ItemRef(val any) HtmlAddress {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlAddress) ItemScope(val any) HtmlAddress {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlAddress) ItemType(val any) HtmlAddress {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlAddress) Lang(val any) HtmlAddress {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlAddress) Nonce(val any) HtmlAddress {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlAddress) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlAddress) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlAddress) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlAddress) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlAddress) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlAddress) OnBlur(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlAddress) OnClick(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlAddress) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlAddress) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlAddress) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlAddress) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlAddress) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlAddress) OnCopy(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlAddress) OnCut(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlAddress) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlAddress) OnDrag(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlAddress) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlAddress) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlAddress) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlAddress) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlAddress) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlAddress) OnDrop(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlAddress) OnError(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlAddress) OnFocus(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlAddress) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlAddress) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlAddress) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlAddress) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlAddress) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlAddress) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlAddress) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlAddress) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlAddress) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlAddress) OnPaste(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlAddress) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlAddress) OnScroll(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlAddress) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlAddress) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlAddress) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlAddress) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlAddress) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlAddress) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlAddress) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlAddress) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlAddress) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlAddress) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlAddress) OnWheel(handler func(event Event, options ...any), options ...any) HtmlAddress {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlAddress) Part(val any) HtmlAddress {
	p.SetProperty("part", val)
	return p
}

func (p *htmlAddress) Slot(val any) HtmlAddress {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlAddress) SpellCheck(val any) HtmlAddress {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlAddress) Style(items ...*Ref[StyleItem]) HtmlAddress {
	p.setStyle(items...)
	return p
}

func (p *htmlAddress) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAddress {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlAddress) TabIndex(val any) HtmlAddress {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlAddress) Text(val any) HtmlAddress {
	p.setText(val)
	return p
}

func (p *htmlAddress) Title(val any) HtmlAddress {
	p.SetProperty("title", val)
	return p
}

func (p *htmlAddress) Translate(val any) HtmlAddress {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlAddress) VirtualKeyBoardPolicy(val any) HtmlAddress {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Area return a html <area> element
func Area() HtmlArea {
	return &htmlArea{htmlBaseElement: htmlBaseElement{tag: "area"}}
}

// HtmlArea represent a html <area> element
type HtmlArea interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-alt
	Alt(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlArea

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlArea

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlArea

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-coords
	Coords(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-download
	Download(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-href
	Href(val any) HtmlArea

	// Id set element id attribute
	Id(val string) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-ping
	Ping(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-referrerpolicy
	ReferrerPolicy(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-rel
	Rel(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-shape
	Shape(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlArea

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlArea

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area#attr-target
	Target(val any) HtmlArea

	// Text set val as text conent for current element
	Text(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlArea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlArea
}

type htmlArea struct {
	htmlBaseElement
}

func (p *htmlArea) AccessKey(val any) HtmlArea {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlArea) Alt(val any) HtmlArea {
	p.SetProperty("alt", val)
	return p
}

func (p *htmlArea) AutoCapitalize(val any) HtmlArea {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlArea) AutoFocus(val any) HtmlArea {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlArea) Body(elems ...UI) HtmlArea {
	p.setBody(elems...)
	return p
}

func (p *htmlArea) Class(name string, items ...*Ref[StyleItem]) HtmlArea {
	p.setClass(name, items...)
	return p
}

func (p *htmlArea) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlArea {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlArea) ContentEditAble(val any) HtmlArea {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlArea) Coords(val any) HtmlArea {
	p.SetProperty("coords", val)
	return p
}

func (p *htmlArea) DataWith(name string, val any) HtmlArea {
	p.dataWith(name, val)
	return p
}

func (p *htmlArea) Dir(val any) HtmlArea {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlArea) Download(val any) HtmlArea {
	p.SetProperty("download", val)
	return p
}

func (p *htmlArea) DraggAble(val any) HtmlArea {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlArea) EnterKeyHint(val any) HtmlArea {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlArea) Hidden(val any) HtmlArea {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlArea) Href(val any) HtmlArea {
	p.SetProperty("href", val)
	return p
}

func (p *htmlArea) Id(val string) HtmlArea {
	p.SetUIElementId(val)
	return p
}

func (p *htmlArea) Inert(val any) HtmlArea {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlArea) InputMode(val any) HtmlArea {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlArea) Is(val any) HtmlArea {
	p.SetProperty("is", val)
	return p
}

func (p *htmlArea) ItemId(val any) HtmlArea {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlArea) ItemProp(val any) HtmlArea {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlArea) ItemRef(val any) HtmlArea {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlArea) ItemScope(val any) HtmlArea {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlArea) ItemType(val any) HtmlArea {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlArea) Lang(val any) HtmlArea {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlArea) Nonce(val any) HtmlArea {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlArea) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlArea) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlArea) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlArea) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlArea) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlArea) OnBlur(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlArea) OnClick(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlArea) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlArea) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlArea) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlArea) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlArea) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlArea) OnCopy(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlArea) OnCut(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlArea) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlArea) OnDrag(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlArea) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlArea) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlArea) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlArea) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlArea) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlArea) OnDrop(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlArea) OnError(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlArea) OnFocus(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlArea) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlArea) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlArea) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlArea) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlArea) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlArea) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlArea) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlArea) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlArea) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlArea) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlArea) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlArea) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlArea) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlArea) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlArea) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlArea) OnPaste(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlArea) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlArea) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlArea) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlArea) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlArea) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlArea) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlArea) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlArea) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlArea) OnScroll(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlArea) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlArea) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlArea) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlArea) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlArea) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlArea) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlArea) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlArea) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlArea) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlArea) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlArea) OnWheel(handler func(event Event, options ...any), options ...any) HtmlArea {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlArea) Part(val any) HtmlArea {
	p.SetProperty("part", val)
	return p
}

func (p *htmlArea) Ping(val any) HtmlArea {
	p.SetProperty("ping", val)
	return p
}

func (p *htmlArea) ReferrerPolicy(val any) HtmlArea {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlArea) Rel(val any) HtmlArea {
	p.SetProperty("rel", val)
	return p
}

func (p *htmlArea) Shape(val any) HtmlArea {
	p.SetProperty("shape", val)
	return p
}

func (p *htmlArea) Slot(val any) HtmlArea {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlArea) SpellCheck(val any) HtmlArea {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlArea) Style(items ...*Ref[StyleItem]) HtmlArea {
	p.setStyle(items...)
	return p
}

func (p *htmlArea) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlArea {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlArea) TabIndex(val any) HtmlArea {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlArea) Target(val any) HtmlArea {
	p.SetProperty("target", val)
	return p
}

func (p *htmlArea) Text(val any) HtmlArea {
	p.setText(val)
	return p
}

func (p *htmlArea) Title(val any) HtmlArea {
	p.SetProperty("title", val)
	return p
}

func (p *htmlArea) Translate(val any) HtmlArea {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlArea) VirtualKeyBoardPolicy(val any) HtmlArea {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Article return a html <article> element
func Article() HtmlArticle {
	return &htmlArticle{htmlBaseElement: htmlBaseElement{tag: "article"}}
}

// HtmlArticle represent a html <article> element
type HtmlArticle interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlArticle

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlArticle

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlArticle

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlArticle

	// Id set element id attribute
	Id(val string) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlArticle

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlArticle

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlArticle

	// Text set val as text conent for current element
	Text(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlArticle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlArticle
}

type htmlArticle struct {
	htmlBaseElement
}

func (p *htmlArticle) AccessKey(val any) HtmlArticle {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlArticle) AutoCapitalize(val any) HtmlArticle {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlArticle) AutoFocus(val any) HtmlArticle {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlArticle) Body(elems ...UI) HtmlArticle {
	p.setBody(elems...)
	return p
}

func (p *htmlArticle) Class(name string, items ...*Ref[StyleItem]) HtmlArticle {
	p.setClass(name, items...)
	return p
}

func (p *htmlArticle) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlArticle {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlArticle) ContentEditAble(val any) HtmlArticle {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlArticle) DataWith(name string, val any) HtmlArticle {
	p.dataWith(name, val)
	return p
}

func (p *htmlArticle) Dir(val any) HtmlArticle {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlArticle) DraggAble(val any) HtmlArticle {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlArticle) EnterKeyHint(val any) HtmlArticle {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlArticle) Hidden(val any) HtmlArticle {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlArticle) Id(val string) HtmlArticle {
	p.SetUIElementId(val)
	return p
}

func (p *htmlArticle) Inert(val any) HtmlArticle {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlArticle) InputMode(val any) HtmlArticle {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlArticle) Is(val any) HtmlArticle {
	p.SetProperty("is", val)
	return p
}

func (p *htmlArticle) ItemId(val any) HtmlArticle {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlArticle) ItemProp(val any) HtmlArticle {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlArticle) ItemRef(val any) HtmlArticle {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlArticle) ItemScope(val any) HtmlArticle {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlArticle) ItemType(val any) HtmlArticle {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlArticle) Lang(val any) HtmlArticle {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlArticle) Nonce(val any) HtmlArticle {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlArticle) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlArticle) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlArticle) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlArticle) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlArticle) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlArticle) OnBlur(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlArticle) OnClick(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlArticle) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlArticle) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlArticle) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlArticle) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlArticle) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlArticle) OnCopy(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlArticle) OnCut(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlArticle) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlArticle) OnDrag(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlArticle) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlArticle) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlArticle) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlArticle) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlArticle) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlArticle) OnDrop(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlArticle) OnError(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlArticle) OnFocus(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlArticle) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlArticle) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlArticle) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlArticle) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlArticle) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlArticle) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlArticle) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlArticle) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlArticle) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlArticle) OnPaste(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlArticle) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlArticle) OnScroll(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlArticle) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlArticle) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlArticle) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlArticle) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlArticle) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlArticle) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlArticle) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlArticle) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlArticle) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlArticle) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlArticle) OnWheel(handler func(event Event, options ...any), options ...any) HtmlArticle {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlArticle) Part(val any) HtmlArticle {
	p.SetProperty("part", val)
	return p
}

func (p *htmlArticle) Slot(val any) HtmlArticle {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlArticle) SpellCheck(val any) HtmlArticle {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlArticle) Style(items ...*Ref[StyleItem]) HtmlArticle {
	p.setStyle(items...)
	return p
}

func (p *htmlArticle) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlArticle {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlArticle) TabIndex(val any) HtmlArticle {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlArticle) Text(val any) HtmlArticle {
	p.setText(val)
	return p
}

func (p *htmlArticle) Title(val any) HtmlArticle {
	p.SetProperty("title", val)
	return p
}

func (p *htmlArticle) Translate(val any) HtmlArticle {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlArticle) VirtualKeyBoardPolicy(val any) HtmlArticle {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Aside return a html <aside> element
func Aside() HtmlAside {
	return &htmlAside{htmlBaseElement: htmlBaseElement{tag: "aside"}}
}

// HtmlAside represent a html <aside> element
type HtmlAside interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlAside

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlAside

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlAside

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlAside

	// Id set element id attribute
	Id(val string) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlAside

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlAside

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlAside

	// Text set val as text conent for current element
	Text(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlAside

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlAside
}

type htmlAside struct {
	htmlBaseElement
}

func (p *htmlAside) AccessKey(val any) HtmlAside {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlAside) AutoCapitalize(val any) HtmlAside {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlAside) AutoFocus(val any) HtmlAside {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlAside) Body(elems ...UI) HtmlAside {
	p.setBody(elems...)
	return p
}

func (p *htmlAside) Class(name string, items ...*Ref[StyleItem]) HtmlAside {
	p.setClass(name, items...)
	return p
}

func (p *htmlAside) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAside {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlAside) ContentEditAble(val any) HtmlAside {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlAside) DataWith(name string, val any) HtmlAside {
	p.dataWith(name, val)
	return p
}

func (p *htmlAside) Dir(val any) HtmlAside {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlAside) DraggAble(val any) HtmlAside {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlAside) EnterKeyHint(val any) HtmlAside {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlAside) Hidden(val any) HtmlAside {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlAside) Id(val string) HtmlAside {
	p.SetUIElementId(val)
	return p
}

func (p *htmlAside) Inert(val any) HtmlAside {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlAside) InputMode(val any) HtmlAside {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlAside) Is(val any) HtmlAside {
	p.SetProperty("is", val)
	return p
}

func (p *htmlAside) ItemId(val any) HtmlAside {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlAside) ItemProp(val any) HtmlAside {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlAside) ItemRef(val any) HtmlAside {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlAside) ItemScope(val any) HtmlAside {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlAside) ItemType(val any) HtmlAside {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlAside) Lang(val any) HtmlAside {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlAside) Nonce(val any) HtmlAside {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlAside) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlAside) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlAside) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlAside) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlAside) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlAside) OnBlur(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlAside) OnClick(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlAside) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlAside) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlAside) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlAside) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlAside) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlAside) OnCopy(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlAside) OnCut(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlAside) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlAside) OnDrag(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlAside) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlAside) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlAside) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlAside) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlAside) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlAside) OnDrop(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlAside) OnError(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlAside) OnFocus(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlAside) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlAside) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlAside) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlAside) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlAside) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlAside) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlAside) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlAside) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlAside) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlAside) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlAside) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlAside) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlAside) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlAside) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlAside) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlAside) OnPaste(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlAside) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlAside) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlAside) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlAside) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlAside) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlAside) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlAside) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlAside) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlAside) OnScroll(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlAside) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlAside) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlAside) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlAside) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlAside) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlAside) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlAside) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlAside) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlAside) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlAside) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlAside) OnWheel(handler func(event Event, options ...any), options ...any) HtmlAside {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlAside) Part(val any) HtmlAside {
	p.SetProperty("part", val)
	return p
}

func (p *htmlAside) Slot(val any) HtmlAside {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlAside) SpellCheck(val any) HtmlAside {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlAside) Style(items ...*Ref[StyleItem]) HtmlAside {
	p.setStyle(items...)
	return p
}

func (p *htmlAside) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAside {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlAside) TabIndex(val any) HtmlAside {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlAside) Text(val any) HtmlAside {
	p.setText(val)
	return p
}

func (p *htmlAside) Title(val any) HtmlAside {
	p.SetProperty("title", val)
	return p
}

func (p *htmlAside) Translate(val any) HtmlAside {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlAside) VirtualKeyBoardPolicy(val any) HtmlAside {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Audio return a html <audio> element
func Audio() HtmlAudio {
	return &htmlAudio{htmlBaseElement: htmlBaseElement{tag: "audio"}}
}

// HtmlAudio represent a html <audio> element
type HtmlAudio interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-autoplay
	AutoPlay(val any) HtmlAudio

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlAudio

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlAudio

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-controls
	Controls(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-controlslist
	ControlsList(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-crossorigin
	CrossOrigin(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-disableremoteplayback
	DisableRemotePlayback(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlAudio

	// Id set element id attribute
	Id(val string) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-loop
	Loop(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-muted
	Muted(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioprocess_event
	OnAudioProcess(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event
	OnCanPlay(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event
	OnCanPlayThrough(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/complete_event
	OnComplete(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event
	OnDurationChange(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event
	OnEmptied(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event
	OnEnded(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event
	OnLoadedData(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event
	OnLoadedMetadata(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event
	OnPause(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event
	OnPlay(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event
	OnPlaying(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event
	OnRateChange(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event
	OnSeeked(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event
	OnSeeking(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event
	OnStalled(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event
	OnSuspend(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event
	OnTimeUpdate(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event
	OnVolumeChange(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event
	OnWaiting(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-preload
	Preload(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-src
	Src(val any) HtmlAudio

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlAudio

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlAudio

	// Text set val as text conent for current element
	Text(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlAudio

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlAudio
}

type htmlAudio struct {
	htmlBaseElement
}

func (p *htmlAudio) AccessKey(val any) HtmlAudio {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlAudio) AutoCapitalize(val any) HtmlAudio {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlAudio) AutoFocus(val any) HtmlAudio {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlAudio) AutoPlay(val any) HtmlAudio {
	p.SetProperty("autoplay", val)
	return p
}

func (p *htmlAudio) Body(elems ...UI) HtmlAudio {
	p.setBody(elems...)
	return p
}

func (p *htmlAudio) Class(name string, items ...*Ref[StyleItem]) HtmlAudio {
	p.setClass(name, items...)
	return p
}

func (p *htmlAudio) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlAudio {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlAudio) ContentEditAble(val any) HtmlAudio {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlAudio) Controls(val any) HtmlAudio {
	p.SetProperty("controls", val)
	return p
}

func (p *htmlAudio) ControlsList(val any) HtmlAudio {
	p.SetProperty("controlslist", val)
	return p
}

func (p *htmlAudio) CrossOrigin(val any) HtmlAudio {
	p.SetProperty("crossorigin", val)
	return p
}

func (p *htmlAudio) DataWith(name string, val any) HtmlAudio {
	p.dataWith(name, val)
	return p
}

func (p *htmlAudio) Dir(val any) HtmlAudio {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlAudio) DisableRemotePlayback(val any) HtmlAudio {
	p.SetProperty("disableremoteplayback", val)
	return p
}

func (p *htmlAudio) DraggAble(val any) HtmlAudio {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlAudio) EnterKeyHint(val any) HtmlAudio {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlAudio) Hidden(val any) HtmlAudio {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlAudio) Id(val string) HtmlAudio {
	p.SetUIElementId(val)
	return p
}

func (p *htmlAudio) Inert(val any) HtmlAudio {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlAudio) InputMode(val any) HtmlAudio {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlAudio) Is(val any) HtmlAudio {
	p.SetProperty("is", val)
	return p
}

func (p *htmlAudio) ItemId(val any) HtmlAudio {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlAudio) ItemProp(val any) HtmlAudio {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlAudio) ItemRef(val any) HtmlAudio {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlAudio) ItemScope(val any) HtmlAudio {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlAudio) ItemType(val any) HtmlAudio {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlAudio) Lang(val any) HtmlAudio {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlAudio) Loop(val any) HtmlAudio {
	p.SetProperty("loop", val)
	return p
}

func (p *htmlAudio) Muted(val any) HtmlAudio {
	p.SetProperty("muted", val)
	return p
}

func (p *htmlAudio) Nonce(val any) HtmlAudio {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlAudio) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlAudio) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlAudio) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlAudio) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlAudio) OnAudioProcess(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("audioprocess", handler, options...)
	return p
}

func (p *htmlAudio) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlAudio) OnBlur(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlAudio) OnCanPlay(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("canplay", handler, options...)
	return p
}

func (p *htmlAudio) OnCanPlayThrough(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("canplaythrough", handler, options...)
	return p
}

func (p *htmlAudio) OnClick(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlAudio) OnComplete(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("complete", handler, options...)
	return p
}

func (p *htmlAudio) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlAudio) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlAudio) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlAudio) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlAudio) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlAudio) OnCopy(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlAudio) OnCut(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlAudio) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlAudio) OnDrag(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlAudio) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlAudio) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlAudio) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlAudio) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlAudio) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlAudio) OnDrop(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlAudio) OnDurationChange(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("durationchange", handler, options...)
	return p
}

func (p *htmlAudio) OnEmptied(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("emptied", handler, options...)
	return p
}

func (p *htmlAudio) OnEnded(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("ended", handler, options...)
	return p
}

func (p *htmlAudio) OnError(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlAudio) OnFocus(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlAudio) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlAudio) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlAudio) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlAudio) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlAudio) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlAudio) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlAudio) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlAudio) OnLoadedData(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("loadeddata", handler, options...)
	return p
}

func (p *htmlAudio) OnLoadedMetadata(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("loadedmetadata", handler, options...)
	return p
}

func (p *htmlAudio) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlAudio) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlAudio) OnPaste(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlAudio) OnPause(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pause", handler, options...)
	return p
}

func (p *htmlAudio) OnPlay(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("play", handler, options...)
	return p
}

func (p *htmlAudio) OnPlaying(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("playing", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlAudio) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlAudio) OnRateChange(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("ratechange", handler, options...)
	return p
}

func (p *htmlAudio) OnScroll(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlAudio) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlAudio) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlAudio) OnSeeked(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("seeked", handler, options...)
	return p
}

func (p *htmlAudio) OnSeeking(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("seeking", handler, options...)
	return p
}

func (p *htmlAudio) OnStalled(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("stalled", handler, options...)
	return p
}

func (p *htmlAudio) OnSuspend(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("suspend", handler, options...)
	return p
}

func (p *htmlAudio) OnTimeUpdate(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("timeupdate", handler, options...)
	return p
}

func (p *htmlAudio) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlAudio) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlAudio) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlAudio) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlAudio) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlAudio) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlAudio) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlAudio) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlAudio) OnVolumeChange(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("volumechange", handler, options...)
	return p
}

func (p *htmlAudio) OnWaiting(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("waiting", handler, options...)
	return p
}

func (p *htmlAudio) OnWheel(handler func(event Event, options ...any), options ...any) HtmlAudio {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlAudio) Part(val any) HtmlAudio {
	p.SetProperty("part", val)
	return p
}

func (p *htmlAudio) Preload(val any) HtmlAudio {
	p.SetProperty("preload", val)
	return p
}

func (p *htmlAudio) Slot(val any) HtmlAudio {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlAudio) SpellCheck(val any) HtmlAudio {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlAudio) Src(val any) HtmlAudio {
	p.SetProperty("src", val)
	return p
}

func (p *htmlAudio) Style(items ...*Ref[StyleItem]) HtmlAudio {
	p.setStyle(items...)
	return p
}

func (p *htmlAudio) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlAudio {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlAudio) TabIndex(val any) HtmlAudio {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlAudio) Text(val any) HtmlAudio {
	p.setText(val)
	return p
}

func (p *htmlAudio) Title(val any) HtmlAudio {
	p.SetProperty("title", val)
	return p
}

func (p *htmlAudio) Translate(val any) HtmlAudio {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlAudio) VirtualKeyBoardPolicy(val any) HtmlAudio {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// B return a html <b> element
func B() HtmlB {
	return &htmlB{htmlBaseElement: htmlBaseElement{tag: "b"}}
}

// HtmlB represent a html <b> element
type HtmlB interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlB

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlB

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlB

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlB

	// Id set element id attribute
	Id(val string) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlB

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlB

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlB

	// Text set val as text conent for current element
	Text(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlB

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlB
}

type htmlB struct {
	htmlBaseElement
}

func (p *htmlB) AccessKey(val any) HtmlB {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlB) AutoCapitalize(val any) HtmlB {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlB) AutoFocus(val any) HtmlB {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlB) Body(elems ...UI) HtmlB {
	p.setBody(elems...)
	return p
}

func (p *htmlB) Class(name string, items ...*Ref[StyleItem]) HtmlB {
	p.setClass(name, items...)
	return p
}

func (p *htmlB) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlB {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlB) ContentEditAble(val any) HtmlB {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlB) DataWith(name string, val any) HtmlB {
	p.dataWith(name, val)
	return p
}

func (p *htmlB) Dir(val any) HtmlB {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlB) DraggAble(val any) HtmlB {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlB) EnterKeyHint(val any) HtmlB {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlB) Hidden(val any) HtmlB {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlB) Id(val string) HtmlB {
	p.SetUIElementId(val)
	return p
}

func (p *htmlB) Inert(val any) HtmlB {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlB) InputMode(val any) HtmlB {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlB) Is(val any) HtmlB {
	p.SetProperty("is", val)
	return p
}

func (p *htmlB) ItemId(val any) HtmlB {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlB) ItemProp(val any) HtmlB {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlB) ItemRef(val any) HtmlB {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlB) ItemScope(val any) HtmlB {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlB) ItemType(val any) HtmlB {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlB) Lang(val any) HtmlB {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlB) Nonce(val any) HtmlB {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlB) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlB) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlB) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlB) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlB) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlB) OnBlur(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlB) OnClick(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlB) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlB) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlB) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlB) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlB) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlB) OnCopy(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlB) OnCut(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlB) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlB) OnDrag(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlB) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlB) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlB) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlB) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlB) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlB) OnDrop(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlB) OnError(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlB) OnFocus(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlB) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlB) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlB) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlB) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlB) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlB) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlB) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlB) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlB) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlB) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlB) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlB) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlB) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlB) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlB) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlB) OnPaste(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlB) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlB) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlB) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlB) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlB) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlB) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlB) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlB) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlB) OnScroll(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlB) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlB) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlB) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlB) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlB) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlB) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlB) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlB) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlB) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlB) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlB) OnWheel(handler func(event Event, options ...any), options ...any) HtmlB {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlB) Part(val any) HtmlB {
	p.SetProperty("part", val)
	return p
}

func (p *htmlB) Slot(val any) HtmlB {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlB) SpellCheck(val any) HtmlB {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlB) Style(items ...*Ref[StyleItem]) HtmlB {
	p.setStyle(items...)
	return p
}

func (p *htmlB) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlB {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlB) TabIndex(val any) HtmlB {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlB) Text(val any) HtmlB {
	p.setText(val)
	return p
}

func (p *htmlB) Title(val any) HtmlB {
	p.SetProperty("title", val)
	return p
}

func (p *htmlB) Translate(val any) HtmlB {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlB) VirtualKeyBoardPolicy(val any) HtmlB {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Base return a html <base> element
func Base() HtmlBase {
	return &htmlBase{htmlBaseElement: htmlBaseElement{tag: "base"}}
}

// HtmlBase represent a html <base> element
type HtmlBase interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBase

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBase

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBase

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base#attr-href
	Href(val any) HtmlBase

	// Id set element id attribute
	Id(val string) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBase

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBase

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base#attr-target
	Target(val any) HtmlBase

	// Text set val as text conent for current element
	Text(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBase

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBase
}

type htmlBase struct {
	htmlBaseElement
}

func (p *htmlBase) AccessKey(val any) HtmlBase {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBase) AutoCapitalize(val any) HtmlBase {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBase) AutoFocus(val any) HtmlBase {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBase) Body(elems ...UI) HtmlBase {
	p.setBody(elems...)
	return p
}

func (p *htmlBase) Class(name string, items ...*Ref[StyleItem]) HtmlBase {
	p.setClass(name, items...)
	return p
}

func (p *htmlBase) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBase {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBase) ContentEditAble(val any) HtmlBase {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBase) DataWith(name string, val any) HtmlBase {
	p.dataWith(name, val)
	return p
}

func (p *htmlBase) Dir(val any) HtmlBase {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBase) DraggAble(val any) HtmlBase {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBase) EnterKeyHint(val any) HtmlBase {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBase) Hidden(val any) HtmlBase {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBase) Href(val any) HtmlBase {
	p.SetProperty("href", val)
	return p
}

func (p *htmlBase) Id(val string) HtmlBase {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBase) Inert(val any) HtmlBase {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBase) InputMode(val any) HtmlBase {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBase) Is(val any) HtmlBase {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBase) ItemId(val any) HtmlBase {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBase) ItemProp(val any) HtmlBase {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBase) ItemRef(val any) HtmlBase {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBase) ItemScope(val any) HtmlBase {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBase) ItemType(val any) HtmlBase {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBase) Lang(val any) HtmlBase {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBase) Nonce(val any) HtmlBase {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBase) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBase) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBase) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBase) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBase) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBase) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBase) OnClick(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBase) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBase) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBase) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBase) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBase) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBase) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBase) OnCut(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBase) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBase) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBase) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBase) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBase) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBase) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBase) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBase) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBase) OnError(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBase) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBase) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBase) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBase) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBase) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBase) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBase) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBase) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBase) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBase) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBase) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBase) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBase) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBase) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBase) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBase) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBase) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBase) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBase) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBase) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBase) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBase) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBase) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBase) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBase) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBase) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBase) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBase) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBase) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBase) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBase) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBase) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBase) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBase) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBase) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBase) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBase) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBase {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBase) Part(val any) HtmlBase {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBase) Slot(val any) HtmlBase {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBase) SpellCheck(val any) HtmlBase {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBase) Style(items ...*Ref[StyleItem]) HtmlBase {
	p.setStyle(items...)
	return p
}

func (p *htmlBase) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBase {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBase) TabIndex(val any) HtmlBase {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBase) Target(val any) HtmlBase {
	p.SetProperty("target", val)
	return p
}

func (p *htmlBase) Text(val any) HtmlBase {
	p.setText(val)
	return p
}

func (p *htmlBase) Title(val any) HtmlBase {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBase) Translate(val any) HtmlBase {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBase) VirtualKeyBoardPolicy(val any) HtmlBase {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Bdi return a html <bdi> element
func Bdi() HtmlBdi {
	return &htmlBdi{htmlBaseElement: htmlBaseElement{tag: "bdi"}}
}

// HtmlBdi represent a html <bdi> element
type HtmlBdi interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBdi

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBdi

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBdi

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBdi

	// Id set element id attribute
	Id(val string) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBdi

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBdi

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBdi

	// Text set val as text conent for current element
	Text(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBdi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBdi
}

type htmlBdi struct {
	htmlBaseElement
}

func (p *htmlBdi) AccessKey(val any) HtmlBdi {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBdi) AutoCapitalize(val any) HtmlBdi {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBdi) AutoFocus(val any) HtmlBdi {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBdi) Body(elems ...UI) HtmlBdi {
	p.setBody(elems...)
	return p
}

func (p *htmlBdi) Class(name string, items ...*Ref[StyleItem]) HtmlBdi {
	p.setClass(name, items...)
	return p
}

func (p *htmlBdi) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBdi {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBdi) ContentEditAble(val any) HtmlBdi {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBdi) DataWith(name string, val any) HtmlBdi {
	p.dataWith(name, val)
	return p
}

func (p *htmlBdi) Dir(val any) HtmlBdi {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBdi) DraggAble(val any) HtmlBdi {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBdi) EnterKeyHint(val any) HtmlBdi {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBdi) Hidden(val any) HtmlBdi {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBdi) Id(val string) HtmlBdi {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBdi) Inert(val any) HtmlBdi {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBdi) InputMode(val any) HtmlBdi {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBdi) Is(val any) HtmlBdi {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBdi) ItemId(val any) HtmlBdi {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBdi) ItemProp(val any) HtmlBdi {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBdi) ItemRef(val any) HtmlBdi {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBdi) ItemScope(val any) HtmlBdi {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBdi) ItemType(val any) HtmlBdi {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBdi) Lang(val any) HtmlBdi {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBdi) Nonce(val any) HtmlBdi {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBdi) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBdi) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBdi) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBdi) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBdi) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBdi) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBdi) OnClick(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBdi) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBdi) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBdi) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBdi) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBdi) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBdi) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBdi) OnCut(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBdi) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBdi) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBdi) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBdi) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBdi) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBdi) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBdi) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBdi) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBdi) OnError(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBdi) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBdi) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBdi) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBdi) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBdi) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBdi) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBdi) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBdi) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBdi) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBdi) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBdi) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBdi) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBdi) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBdi) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBdi) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBdi) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBdi) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBdi) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBdi) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBdi) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBdi) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBdi) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBdi) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBdi) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBdi {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBdi) Part(val any) HtmlBdi {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBdi) Slot(val any) HtmlBdi {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBdi) SpellCheck(val any) HtmlBdi {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBdi) Style(items ...*Ref[StyleItem]) HtmlBdi {
	p.setStyle(items...)
	return p
}

func (p *htmlBdi) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBdi {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBdi) TabIndex(val any) HtmlBdi {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBdi) Text(val any) HtmlBdi {
	p.setText(val)
	return p
}

func (p *htmlBdi) Title(val any) HtmlBdi {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBdi) Translate(val any) HtmlBdi {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBdi) VirtualKeyBoardPolicy(val any) HtmlBdi {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Bdo return a html <bdo> element
func Bdo() HtmlBdo {
	return &htmlBdo{htmlBaseElement: htmlBaseElement{tag: "bdo"}}
}

// HtmlBdo represent a html <bdo> element
type HtmlBdo interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBdo

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBdo

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBdo

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBdo

	// Id set element id attribute
	Id(val string) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBdo

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBdo

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBdo

	// Text set val as text conent for current element
	Text(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBdo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBdo
}

type htmlBdo struct {
	htmlBaseElement
}

func (p *htmlBdo) AccessKey(val any) HtmlBdo {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBdo) AutoCapitalize(val any) HtmlBdo {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBdo) AutoFocus(val any) HtmlBdo {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBdo) Body(elems ...UI) HtmlBdo {
	p.setBody(elems...)
	return p
}

func (p *htmlBdo) Class(name string, items ...*Ref[StyleItem]) HtmlBdo {
	p.setClass(name, items...)
	return p
}

func (p *htmlBdo) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBdo {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBdo) ContentEditAble(val any) HtmlBdo {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBdo) DataWith(name string, val any) HtmlBdo {
	p.dataWith(name, val)
	return p
}

func (p *htmlBdo) Dir(val any) HtmlBdo {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBdo) DraggAble(val any) HtmlBdo {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBdo) EnterKeyHint(val any) HtmlBdo {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBdo) Hidden(val any) HtmlBdo {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBdo) Id(val string) HtmlBdo {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBdo) Inert(val any) HtmlBdo {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBdo) InputMode(val any) HtmlBdo {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBdo) Is(val any) HtmlBdo {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBdo) ItemId(val any) HtmlBdo {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBdo) ItemProp(val any) HtmlBdo {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBdo) ItemRef(val any) HtmlBdo {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBdo) ItemScope(val any) HtmlBdo {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBdo) ItemType(val any) HtmlBdo {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBdo) Lang(val any) HtmlBdo {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBdo) Nonce(val any) HtmlBdo {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBdo) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBdo) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBdo) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBdo) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBdo) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBdo) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBdo) OnClick(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBdo) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBdo) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBdo) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBdo) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBdo) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBdo) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBdo) OnCut(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBdo) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBdo) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBdo) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBdo) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBdo) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBdo) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBdo) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBdo) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBdo) OnError(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBdo) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBdo) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBdo) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBdo) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBdo) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBdo) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBdo) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBdo) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBdo) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBdo) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBdo) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBdo) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBdo) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBdo) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBdo) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBdo) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBdo) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBdo) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBdo) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBdo) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBdo) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBdo) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBdo) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBdo) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBdo {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBdo) Part(val any) HtmlBdo {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBdo) Slot(val any) HtmlBdo {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBdo) SpellCheck(val any) HtmlBdo {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBdo) Style(items ...*Ref[StyleItem]) HtmlBdo {
	p.setStyle(items...)
	return p
}

func (p *htmlBdo) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBdo {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBdo) TabIndex(val any) HtmlBdo {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBdo) Text(val any) HtmlBdo {
	p.setText(val)
	return p
}

func (p *htmlBdo) Title(val any) HtmlBdo {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBdo) Translate(val any) HtmlBdo {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBdo) VirtualKeyBoardPolicy(val any) HtmlBdo {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Blockquote return a html <blockquote> element
func Blockquote() HtmlBlockquote {
	return &htmlBlockquote{htmlBaseElement: htmlBaseElement{tag: "blockquote"}}
}

// HtmlBlockquote represent a html <blockquote> element
type HtmlBlockquote interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBlockquote

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#attr-cite
	Cite(val any) HtmlBlockquote

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBlockquote

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBlockquote

	// Id set element id attribute
	Id(val string) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBlockquote

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBlockquote

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBlockquote

	// Text set val as text conent for current element
	Text(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBlockquote

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBlockquote
}

type htmlBlockquote struct {
	htmlBaseElement
}

func (p *htmlBlockquote) AccessKey(val any) HtmlBlockquote {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBlockquote) AutoCapitalize(val any) HtmlBlockquote {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBlockquote) AutoFocus(val any) HtmlBlockquote {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBlockquote) Body(elems ...UI) HtmlBlockquote {
	p.setBody(elems...)
	return p
}

func (p *htmlBlockquote) Cite(val any) HtmlBlockquote {
	p.SetProperty("cite", val)
	return p
}

func (p *htmlBlockquote) Class(name string, items ...*Ref[StyleItem]) HtmlBlockquote {
	p.setClass(name, items...)
	return p
}

func (p *htmlBlockquote) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBlockquote {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBlockquote) ContentEditAble(val any) HtmlBlockquote {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBlockquote) DataWith(name string, val any) HtmlBlockquote {
	p.dataWith(name, val)
	return p
}

func (p *htmlBlockquote) Dir(val any) HtmlBlockquote {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBlockquote) DraggAble(val any) HtmlBlockquote {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBlockquote) EnterKeyHint(val any) HtmlBlockquote {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBlockquote) Hidden(val any) HtmlBlockquote {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBlockquote) Id(val string) HtmlBlockquote {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBlockquote) Inert(val any) HtmlBlockquote {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBlockquote) InputMode(val any) HtmlBlockquote {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBlockquote) Is(val any) HtmlBlockquote {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBlockquote) ItemId(val any) HtmlBlockquote {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBlockquote) ItemProp(val any) HtmlBlockquote {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBlockquote) ItemRef(val any) HtmlBlockquote {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBlockquote) ItemScope(val any) HtmlBlockquote {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBlockquote) ItemType(val any) HtmlBlockquote {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBlockquote) Lang(val any) HtmlBlockquote {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBlockquote) Nonce(val any) HtmlBlockquote {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBlockquote) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBlockquote) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBlockquote) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBlockquote) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBlockquote) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBlockquote) OnClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBlockquote) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBlockquote) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBlockquote) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBlockquote) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBlockquote) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBlockquote) OnCut(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBlockquote) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBlockquote) OnError(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBlockquote) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBlockquote) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBlockquote) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBlockquote) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBlockquote) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBlockquote) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBlockquote) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBlockquote) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBlockquote) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBlockquote) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBlockquote) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBlockquote) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBlockquote) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBlockquote) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBlockquote) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBlockquote {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBlockquote) Part(val any) HtmlBlockquote {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBlockquote) Slot(val any) HtmlBlockquote {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBlockquote) SpellCheck(val any) HtmlBlockquote {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBlockquote) Style(items ...*Ref[StyleItem]) HtmlBlockquote {
	p.setStyle(items...)
	return p
}

func (p *htmlBlockquote) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBlockquote {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBlockquote) TabIndex(val any) HtmlBlockquote {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBlockquote) Text(val any) HtmlBlockquote {
	p.setText(val)
	return p
}

func (p *htmlBlockquote) Title(val any) HtmlBlockquote {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBlockquote) Translate(val any) HtmlBlockquote {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBlockquote) VirtualKeyBoardPolicy(val any) HtmlBlockquote {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Body return a html <body> element
func Body() HtmlBody {
	return &htmlBody{htmlBaseElement: htmlBaseElement{tag: "body"}}
}

// HtmlBody represent a html <body> element
type HtmlBody interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBody

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBody

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBody

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBody

	// Id set element id attribute
	Id(val string) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#afterprint
	OnAfterPrint(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#beforeprint
	OnBeforePrint(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#beforeunload
	OnBeforeUnload(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#hashchange
	OnHashChange(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#languagechange
	OnLanguageChange(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#load
	OnLoad(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#message
	OnMessage(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#offline
	OnOffline(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#online
	OnOnline(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#popstate
	OnPopState(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#redo
	OnRedo(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#resize
	OnResize(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#storage
	OnStorage(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#undo
	OnUndo(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body#unload
	OnUnload(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBody

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBody

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBody

	// Text set val as text conent for current element
	Text(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBody
}

type htmlBody struct {
	htmlBaseElement
}

func (p *htmlBody) AccessKey(val any) HtmlBody {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBody) AutoCapitalize(val any) HtmlBody {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBody) AutoFocus(val any) HtmlBody {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBody) Body(elems ...UI) HtmlBody {
	p.setBody(elems...)
	return p
}

func (p *htmlBody) Class(name string, items ...*Ref[StyleItem]) HtmlBody {
	p.setClass(name, items...)
	return p
}

func (p *htmlBody) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBody {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBody) ContentEditAble(val any) HtmlBody {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBody) DataWith(name string, val any) HtmlBody {
	p.dataWith(name, val)
	return p
}

func (p *htmlBody) Dir(val any) HtmlBody {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBody) DraggAble(val any) HtmlBody {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBody) EnterKeyHint(val any) HtmlBody {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBody) Hidden(val any) HtmlBody {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBody) Id(val string) HtmlBody {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBody) Inert(val any) HtmlBody {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBody) InputMode(val any) HtmlBody {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBody) Is(val any) HtmlBody {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBody) ItemId(val any) HtmlBody {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBody) ItemProp(val any) HtmlBody {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBody) ItemRef(val any) HtmlBody {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBody) ItemScope(val any) HtmlBody {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBody) ItemType(val any) HtmlBody {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBody) Lang(val any) HtmlBody {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBody) Nonce(val any) HtmlBody {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBody) OnAfterPrint(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("afterprint", handler, options...)
	return p
}

func (p *htmlBody) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBody) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBody) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBody) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBody) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBody) OnBeforePrint(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("beforeprint", handler, options...)
	return p
}

func (p *htmlBody) OnBeforeUnload(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("beforeunload", handler, options...)
	return p
}

func (p *htmlBody) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBody) OnClick(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBody) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBody) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBody) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBody) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBody) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBody) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBody) OnCut(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBody) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBody) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBody) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBody) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBody) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBody) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBody) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBody) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBody) OnError(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBody) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBody) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBody) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBody) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBody) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBody) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBody) OnHashChange(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("hashchange", handler, options...)
	return p
}

func (p *htmlBody) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBody) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBody) OnLanguageChange(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("languagechange", handler, options...)
	return p
}

func (p *htmlBody) OnLoad(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("load", handler, options...)
	return p
}

func (p *htmlBody) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBody) OnMessage(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("message", handler, options...)
	return p
}

func (p *htmlBody) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBody) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBody) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBody) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBody) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBody) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBody) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBody) OnOffline(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("offline", handler, options...)
	return p
}

func (p *htmlBody) OnOnline(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("online", handler, options...)
	return p
}

func (p *htmlBody) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBody) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBody) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBody) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBody) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBody) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBody) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBody) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBody) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBody) OnPopState(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("popstate", handler, options...)
	return p
}

func (p *htmlBody) OnRedo(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("redo", handler, options...)
	return p
}

func (p *htmlBody) OnResize(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("resize", handler, options...)
	return p
}

func (p *htmlBody) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBody) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBody) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBody) OnStorage(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("storage", handler, options...)
	return p
}

func (p *htmlBody) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBody) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBody) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBody) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBody) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBody) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBody) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBody) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBody) OnUndo(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("undo", handler, options...)
	return p
}

func (p *htmlBody) OnUnload(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("unload", handler, options...)
	return p
}

func (p *htmlBody) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBody {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBody) Part(val any) HtmlBody {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBody) Slot(val any) HtmlBody {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBody) SpellCheck(val any) HtmlBody {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBody) Style(items ...*Ref[StyleItem]) HtmlBody {
	p.setStyle(items...)
	return p
}

func (p *htmlBody) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBody {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBody) TabIndex(val any) HtmlBody {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBody) Text(val any) HtmlBody {
	p.setText(val)
	return p
}

func (p *htmlBody) Title(val any) HtmlBody {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBody) Translate(val any) HtmlBody {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBody) VirtualKeyBoardPolicy(val any) HtmlBody {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Br return a html <br> element
func Br() HtmlBr {
	return &htmlBr{htmlBaseElement: htmlBaseElement{tag: "br"}}
}

// HtmlBr represent a html <br> element
type HtmlBr interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlBr

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlBr

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlBr

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlBr

	// Id set element id attribute
	Id(val string) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlBr

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlBr

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlBr

	// Text set val as text conent for current element
	Text(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlBr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlBr
}

type htmlBr struct {
	htmlBaseElement
}

func (p *htmlBr) AccessKey(val any) HtmlBr {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlBr) AutoCapitalize(val any) HtmlBr {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlBr) AutoFocus(val any) HtmlBr {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlBr) Body(elems ...UI) HtmlBr {
	p.setBody(elems...)
	return p
}

func (p *htmlBr) Class(name string, items ...*Ref[StyleItem]) HtmlBr {
	p.setClass(name, items...)
	return p
}

func (p *htmlBr) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlBr {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlBr) ContentEditAble(val any) HtmlBr {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlBr) DataWith(name string, val any) HtmlBr {
	p.dataWith(name, val)
	return p
}

func (p *htmlBr) Dir(val any) HtmlBr {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlBr) DraggAble(val any) HtmlBr {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlBr) EnterKeyHint(val any) HtmlBr {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlBr) Hidden(val any) HtmlBr {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlBr) Id(val string) HtmlBr {
	p.SetUIElementId(val)
	return p
}

func (p *htmlBr) Inert(val any) HtmlBr {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlBr) InputMode(val any) HtmlBr {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlBr) Is(val any) HtmlBr {
	p.SetProperty("is", val)
	return p
}

func (p *htmlBr) ItemId(val any) HtmlBr {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlBr) ItemProp(val any) HtmlBr {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlBr) ItemRef(val any) HtmlBr {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlBr) ItemScope(val any) HtmlBr {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlBr) ItemType(val any) HtmlBr {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlBr) Lang(val any) HtmlBr {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlBr) Nonce(val any) HtmlBr {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlBr) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlBr) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlBr) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlBr) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlBr) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlBr) OnBlur(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlBr) OnClick(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlBr) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlBr) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlBr) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlBr) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlBr) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlBr) OnCopy(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlBr) OnCut(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlBr) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlBr) OnDrag(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlBr) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlBr) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlBr) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlBr) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlBr) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlBr) OnDrop(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlBr) OnError(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlBr) OnFocus(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlBr) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlBr) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlBr) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlBr) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlBr) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlBr) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlBr) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlBr) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlBr) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlBr) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlBr) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlBr) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlBr) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlBr) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlBr) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlBr) OnPaste(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlBr) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlBr) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlBr) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlBr) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlBr) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlBr) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlBr) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlBr) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlBr) OnScroll(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlBr) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlBr) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlBr) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlBr) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlBr) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlBr) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlBr) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlBr) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlBr) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlBr) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlBr) OnWheel(handler func(event Event, options ...any), options ...any) HtmlBr {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlBr) Part(val any) HtmlBr {
	p.SetProperty("part", val)
	return p
}

func (p *htmlBr) Slot(val any) HtmlBr {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlBr) SpellCheck(val any) HtmlBr {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlBr) Style(items ...*Ref[StyleItem]) HtmlBr {
	p.setStyle(items...)
	return p
}

func (p *htmlBr) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlBr {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlBr) TabIndex(val any) HtmlBr {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlBr) Text(val any) HtmlBr {
	p.setText(val)
	return p
}

func (p *htmlBr) Title(val any) HtmlBr {
	p.SetProperty("title", val)
	return p
}

func (p *htmlBr) Translate(val any) HtmlBr {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlBr) VirtualKeyBoardPolicy(val any) HtmlBr {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Button return a html <button> element
func Button() HtmlButton {
	return &htmlButton{htmlBaseElement: htmlBaseElement{tag: "button"}}
}

// HtmlButton represent a html <button> element
type HtmlButton interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-autocomplete
	AutoComplete(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlButton

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlButton

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlButton

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-disabled
	Disabled(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-form
	Form(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction
	FormAction(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formenctype
	FormEnctype(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod
	FormMethod(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formnovalidate
	FormNoValidate(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formtarget
	FormTarget(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlButton

	// Id set element id attribute
	Id(val string) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-name
	Name(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlButton

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlButton

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlButton

	// Text set val as text conent for current element
	Text(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type
	Type(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-value
	Value(val any) HtmlButton

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlButton
}

type htmlButton struct {
	htmlBaseElement
}

func (p *htmlButton) AccessKey(val any) HtmlButton {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlButton) AutoCapitalize(val any) HtmlButton {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlButton) AutoComplete(val any) HtmlButton {
	p.SetProperty("autocomplete", val)
	return p
}

func (p *htmlButton) AutoFocus(val any) HtmlButton {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlButton) Body(elems ...UI) HtmlButton {
	p.setBody(elems...)
	return p
}

func (p *htmlButton) Class(name string, items ...*Ref[StyleItem]) HtmlButton {
	p.setClass(name, items...)
	return p
}

func (p *htmlButton) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlButton {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlButton) ContentEditAble(val any) HtmlButton {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlButton) DataWith(name string, val any) HtmlButton {
	p.dataWith(name, val)
	return p
}

func (p *htmlButton) Dir(val any) HtmlButton {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlButton) Disabled(val any) HtmlButton {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlButton) DraggAble(val any) HtmlButton {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlButton) EnterKeyHint(val any) HtmlButton {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlButton) Form(val any) HtmlButton {
	p.SetProperty("form", val)
	return p
}

func (p *htmlButton) FormAction(val any) HtmlButton {
	p.SetProperty("formaction", val)
	return p
}

func (p *htmlButton) FormEnctype(val any) HtmlButton {
	p.SetProperty("formenctype", val)
	return p
}

func (p *htmlButton) FormMethod(val any) HtmlButton {
	p.SetProperty("formmethod", val)
	return p
}

func (p *htmlButton) FormNoValidate(val any) HtmlButton {
	p.SetProperty("formnovalidate", val)
	return p
}

func (p *htmlButton) FormTarget(val any) HtmlButton {
	p.SetProperty("formtarget", val)
	return p
}

func (p *htmlButton) Hidden(val any) HtmlButton {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlButton) Id(val string) HtmlButton {
	p.SetUIElementId(val)
	return p
}

func (p *htmlButton) Inert(val any) HtmlButton {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlButton) InputMode(val any) HtmlButton {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlButton) Is(val any) HtmlButton {
	p.SetProperty("is", val)
	return p
}

func (p *htmlButton) ItemId(val any) HtmlButton {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlButton) ItemProp(val any) HtmlButton {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlButton) ItemRef(val any) HtmlButton {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlButton) ItemScope(val any) HtmlButton {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlButton) ItemType(val any) HtmlButton {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlButton) Lang(val any) HtmlButton {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlButton) Name(val any) HtmlButton {
	p.SetProperty("name", val)
	return p
}

func (p *htmlButton) Nonce(val any) HtmlButton {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlButton) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlButton) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlButton) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlButton) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlButton) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlButton) OnBlur(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlButton) OnClick(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlButton) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlButton) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlButton) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlButton) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlButton) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlButton) OnCopy(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlButton) OnCut(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlButton) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlButton) OnDrag(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlButton) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlButton) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlButton) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlButton) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlButton) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlButton) OnDrop(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlButton) OnError(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlButton) OnFocus(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlButton) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlButton) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlButton) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlButton) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlButton) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlButton) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlButton) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlButton) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlButton) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlButton) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlButton) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlButton) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlButton) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlButton) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlButton) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlButton) OnPaste(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlButton) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlButton) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlButton) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlButton) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlButton) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlButton) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlButton) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlButton) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlButton) OnScroll(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlButton) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlButton) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlButton) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlButton) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlButton) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlButton) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlButton) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlButton) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlButton) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlButton) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlButton) OnWheel(handler func(event Event, options ...any), options ...any) HtmlButton {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlButton) Part(val any) HtmlButton {
	p.SetProperty("part", val)
	return p
}

func (p *htmlButton) Slot(val any) HtmlButton {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlButton) SpellCheck(val any) HtmlButton {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlButton) Style(items ...*Ref[StyleItem]) HtmlButton {
	p.setStyle(items...)
	return p
}

func (p *htmlButton) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlButton {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlButton) TabIndex(val any) HtmlButton {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlButton) Text(val any) HtmlButton {
	p.setText(val)
	return p
}

func (p *htmlButton) Title(val any) HtmlButton {
	p.SetProperty("title", val)
	return p
}

func (p *htmlButton) Translate(val any) HtmlButton {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlButton) Type(val any) HtmlButton {
	p.SetProperty("type", val)
	return p
}

func (p *htmlButton) Value(val any) HtmlButton {
	p.SetProperty("value", val)
	return p
}

func (p *htmlButton) VirtualKeyBoardPolicy(val any) HtmlButton {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Canvas return a html <canvas> element
func Canvas() HtmlCanvas {
	return &htmlCanvas{htmlBaseElement: htmlBaseElement{tag: "canvas"}}
}

// HtmlCanvas represent a html <canvas> element
type HtmlCanvas interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlCanvas

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlCanvas

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlCanvas

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#attr-height
	Height(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlCanvas

	// Id set element id attribute
	Id(val string) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlCanvas

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlCanvas

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlCanvas

	// Text set val as text conent for current element
	Text(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlCanvas

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#attr-width
	Width(val any) HtmlCanvas
}

type htmlCanvas struct {
	htmlBaseElement
}

func (p *htmlCanvas) AccessKey(val any) HtmlCanvas {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlCanvas) AutoCapitalize(val any) HtmlCanvas {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlCanvas) AutoFocus(val any) HtmlCanvas {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlCanvas) Body(elems ...UI) HtmlCanvas {
	p.setBody(elems...)
	return p
}

func (p *htmlCanvas) Class(name string, items ...*Ref[StyleItem]) HtmlCanvas {
	p.setClass(name, items...)
	return p
}

func (p *htmlCanvas) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCanvas {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlCanvas) ContentEditAble(val any) HtmlCanvas {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlCanvas) DataWith(name string, val any) HtmlCanvas {
	p.dataWith(name, val)
	return p
}

func (p *htmlCanvas) Dir(val any) HtmlCanvas {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlCanvas) DraggAble(val any) HtmlCanvas {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlCanvas) EnterKeyHint(val any) HtmlCanvas {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlCanvas) Height(val any) HtmlCanvas {
	p.SetProperty("height", val)
	return p
}

func (p *htmlCanvas) Hidden(val any) HtmlCanvas {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlCanvas) Id(val string) HtmlCanvas {
	p.SetUIElementId(val)
	return p
}

func (p *htmlCanvas) Inert(val any) HtmlCanvas {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlCanvas) InputMode(val any) HtmlCanvas {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlCanvas) Is(val any) HtmlCanvas {
	p.SetProperty("is", val)
	return p
}

func (p *htmlCanvas) ItemId(val any) HtmlCanvas {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlCanvas) ItemProp(val any) HtmlCanvas {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlCanvas) ItemRef(val any) HtmlCanvas {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlCanvas) ItemScope(val any) HtmlCanvas {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlCanvas) ItemType(val any) HtmlCanvas {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlCanvas) Lang(val any) HtmlCanvas {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlCanvas) Nonce(val any) HtmlCanvas {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlCanvas) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlCanvas) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlCanvas) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlCanvas) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlCanvas) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlCanvas) OnBlur(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlCanvas) OnClick(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlCanvas) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlCanvas) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlCanvas) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlCanvas) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlCanvas) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlCanvas) OnCopy(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlCanvas) OnCut(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlCanvas) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlCanvas) OnDrag(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlCanvas) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlCanvas) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlCanvas) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlCanvas) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlCanvas) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlCanvas) OnDrop(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlCanvas) OnError(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlCanvas) OnFocus(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlCanvas) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlCanvas) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlCanvas) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlCanvas) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlCanvas) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlCanvas) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlCanvas) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlCanvas) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlCanvas) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlCanvas) OnPaste(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlCanvas) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlCanvas) OnScroll(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlCanvas) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlCanvas) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlCanvas) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlCanvas) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlCanvas) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlCanvas) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlCanvas) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlCanvas) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlCanvas) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlCanvas) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlCanvas) OnWheel(handler func(event Event, options ...any), options ...any) HtmlCanvas {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlCanvas) Part(val any) HtmlCanvas {
	p.SetProperty("part", val)
	return p
}

func (p *htmlCanvas) Slot(val any) HtmlCanvas {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlCanvas) SpellCheck(val any) HtmlCanvas {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlCanvas) Style(items ...*Ref[StyleItem]) HtmlCanvas {
	p.setStyle(items...)
	return p
}

func (p *htmlCanvas) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCanvas {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlCanvas) TabIndex(val any) HtmlCanvas {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlCanvas) Text(val any) HtmlCanvas {
	p.setText(val)
	return p
}

func (p *htmlCanvas) Title(val any) HtmlCanvas {
	p.SetProperty("title", val)
	return p
}

func (p *htmlCanvas) Translate(val any) HtmlCanvas {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlCanvas) VirtualKeyBoardPolicy(val any) HtmlCanvas {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlCanvas) Width(val any) HtmlCanvas {
	p.SetProperty("width", val)
	return p
}

// Caption return a html <caption> element
func Caption() HtmlCaption {
	return &htmlCaption{htmlBaseElement: htmlBaseElement{tag: "caption"}}
}

// HtmlCaption represent a html <caption> element
type HtmlCaption interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlCaption

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlCaption

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlCaption

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlCaption

	// Id set element id attribute
	Id(val string) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlCaption

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlCaption

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlCaption

	// Text set val as text conent for current element
	Text(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlCaption
}

type htmlCaption struct {
	htmlBaseElement
}

func (p *htmlCaption) AccessKey(val any) HtmlCaption {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlCaption) AutoCapitalize(val any) HtmlCaption {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlCaption) AutoFocus(val any) HtmlCaption {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlCaption) Body(elems ...UI) HtmlCaption {
	p.setBody(elems...)
	return p
}

func (p *htmlCaption) Class(name string, items ...*Ref[StyleItem]) HtmlCaption {
	p.setClass(name, items...)
	return p
}

func (p *htmlCaption) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCaption {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlCaption) ContentEditAble(val any) HtmlCaption {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlCaption) DataWith(name string, val any) HtmlCaption {
	p.dataWith(name, val)
	return p
}

func (p *htmlCaption) Dir(val any) HtmlCaption {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlCaption) DraggAble(val any) HtmlCaption {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlCaption) EnterKeyHint(val any) HtmlCaption {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlCaption) Hidden(val any) HtmlCaption {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlCaption) Id(val string) HtmlCaption {
	p.SetUIElementId(val)
	return p
}

func (p *htmlCaption) Inert(val any) HtmlCaption {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlCaption) InputMode(val any) HtmlCaption {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlCaption) Is(val any) HtmlCaption {
	p.SetProperty("is", val)
	return p
}

func (p *htmlCaption) ItemId(val any) HtmlCaption {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlCaption) ItemProp(val any) HtmlCaption {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlCaption) ItemRef(val any) HtmlCaption {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlCaption) ItemScope(val any) HtmlCaption {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlCaption) ItemType(val any) HtmlCaption {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlCaption) Lang(val any) HtmlCaption {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlCaption) Nonce(val any) HtmlCaption {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlCaption) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlCaption) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlCaption) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlCaption) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlCaption) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlCaption) OnBlur(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlCaption) OnClick(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlCaption) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlCaption) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlCaption) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlCaption) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlCaption) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlCaption) OnCopy(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlCaption) OnCut(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlCaption) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlCaption) OnDrag(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlCaption) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlCaption) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlCaption) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlCaption) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlCaption) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlCaption) OnDrop(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlCaption) OnError(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlCaption) OnFocus(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlCaption) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlCaption) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlCaption) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlCaption) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlCaption) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlCaption) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlCaption) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlCaption) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlCaption) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlCaption) OnPaste(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlCaption) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlCaption) OnScroll(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlCaption) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlCaption) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlCaption) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlCaption) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlCaption) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlCaption) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlCaption) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlCaption) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlCaption) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlCaption) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlCaption) OnWheel(handler func(event Event, options ...any), options ...any) HtmlCaption {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlCaption) Part(val any) HtmlCaption {
	p.SetProperty("part", val)
	return p
}

func (p *htmlCaption) Slot(val any) HtmlCaption {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlCaption) SpellCheck(val any) HtmlCaption {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlCaption) Style(items ...*Ref[StyleItem]) HtmlCaption {
	p.setStyle(items...)
	return p
}

func (p *htmlCaption) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCaption {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlCaption) TabIndex(val any) HtmlCaption {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlCaption) Text(val any) HtmlCaption {
	p.setText(val)
	return p
}

func (p *htmlCaption) Title(val any) HtmlCaption {
	p.SetProperty("title", val)
	return p
}

func (p *htmlCaption) Translate(val any) HtmlCaption {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlCaption) VirtualKeyBoardPolicy(val any) HtmlCaption {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Cite return a html <cite> element
func Cite() HtmlCite {
	return &htmlCite{htmlBaseElement: htmlBaseElement{tag: "cite"}}
}

// HtmlCite represent a html <cite> element
type HtmlCite interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlCite

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlCite

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlCite

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlCite

	// Id set element id attribute
	Id(val string) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlCite

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlCite

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlCite

	// Text set val as text conent for current element
	Text(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlCite

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlCite
}

type htmlCite struct {
	htmlBaseElement
}

func (p *htmlCite) AccessKey(val any) HtmlCite {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlCite) AutoCapitalize(val any) HtmlCite {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlCite) AutoFocus(val any) HtmlCite {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlCite) Body(elems ...UI) HtmlCite {
	p.setBody(elems...)
	return p
}

func (p *htmlCite) Class(name string, items ...*Ref[StyleItem]) HtmlCite {
	p.setClass(name, items...)
	return p
}

func (p *htmlCite) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCite {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlCite) ContentEditAble(val any) HtmlCite {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlCite) DataWith(name string, val any) HtmlCite {
	p.dataWith(name, val)
	return p
}

func (p *htmlCite) Dir(val any) HtmlCite {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlCite) DraggAble(val any) HtmlCite {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlCite) EnterKeyHint(val any) HtmlCite {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlCite) Hidden(val any) HtmlCite {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlCite) Id(val string) HtmlCite {
	p.SetUIElementId(val)
	return p
}

func (p *htmlCite) Inert(val any) HtmlCite {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlCite) InputMode(val any) HtmlCite {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlCite) Is(val any) HtmlCite {
	p.SetProperty("is", val)
	return p
}

func (p *htmlCite) ItemId(val any) HtmlCite {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlCite) ItemProp(val any) HtmlCite {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlCite) ItemRef(val any) HtmlCite {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlCite) ItemScope(val any) HtmlCite {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlCite) ItemType(val any) HtmlCite {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlCite) Lang(val any) HtmlCite {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlCite) Nonce(val any) HtmlCite {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlCite) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlCite) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlCite) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlCite) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlCite) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlCite) OnBlur(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlCite) OnClick(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlCite) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlCite) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlCite) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlCite) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlCite) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlCite) OnCopy(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlCite) OnCut(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlCite) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlCite) OnDrag(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlCite) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlCite) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlCite) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlCite) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlCite) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlCite) OnDrop(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlCite) OnError(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlCite) OnFocus(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlCite) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlCite) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlCite) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlCite) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlCite) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlCite) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlCite) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlCite) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlCite) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlCite) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlCite) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlCite) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlCite) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlCite) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlCite) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlCite) OnPaste(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlCite) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlCite) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlCite) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlCite) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlCite) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlCite) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlCite) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlCite) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlCite) OnScroll(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlCite) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlCite) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlCite) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlCite) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlCite) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlCite) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlCite) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlCite) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlCite) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlCite) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlCite) OnWheel(handler func(event Event, options ...any), options ...any) HtmlCite {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlCite) Part(val any) HtmlCite {
	p.SetProperty("part", val)
	return p
}

func (p *htmlCite) Slot(val any) HtmlCite {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlCite) SpellCheck(val any) HtmlCite {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlCite) Style(items ...*Ref[StyleItem]) HtmlCite {
	p.setStyle(items...)
	return p
}

func (p *htmlCite) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCite {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlCite) TabIndex(val any) HtmlCite {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlCite) Text(val any) HtmlCite {
	p.setText(val)
	return p
}

func (p *htmlCite) Title(val any) HtmlCite {
	p.SetProperty("title", val)
	return p
}

func (p *htmlCite) Translate(val any) HtmlCite {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlCite) VirtualKeyBoardPolicy(val any) HtmlCite {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Code return a html <code> element
func Code() HtmlCode {
	return &htmlCode{htmlBaseElement: htmlBaseElement{tag: "code"}}
}

// HtmlCode represent a html <code> element
type HtmlCode interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlCode

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlCode

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlCode

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlCode

	// Id set element id attribute
	Id(val string) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlCode

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlCode

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlCode

	// Text set val as text conent for current element
	Text(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlCode

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlCode
}

type htmlCode struct {
	htmlBaseElement
}

func (p *htmlCode) AccessKey(val any) HtmlCode {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlCode) AutoCapitalize(val any) HtmlCode {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlCode) AutoFocus(val any) HtmlCode {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlCode) Body(elems ...UI) HtmlCode {
	p.setBody(elems...)
	return p
}

func (p *htmlCode) Class(name string, items ...*Ref[StyleItem]) HtmlCode {
	p.setClass(name, items...)
	return p
}

func (p *htmlCode) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCode {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlCode) ContentEditAble(val any) HtmlCode {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlCode) DataWith(name string, val any) HtmlCode {
	p.dataWith(name, val)
	return p
}

func (p *htmlCode) Dir(val any) HtmlCode {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlCode) DraggAble(val any) HtmlCode {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlCode) EnterKeyHint(val any) HtmlCode {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlCode) Hidden(val any) HtmlCode {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlCode) Id(val string) HtmlCode {
	p.SetUIElementId(val)
	return p
}

func (p *htmlCode) Inert(val any) HtmlCode {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlCode) InputMode(val any) HtmlCode {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlCode) Is(val any) HtmlCode {
	p.SetProperty("is", val)
	return p
}

func (p *htmlCode) ItemId(val any) HtmlCode {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlCode) ItemProp(val any) HtmlCode {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlCode) ItemRef(val any) HtmlCode {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlCode) ItemScope(val any) HtmlCode {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlCode) ItemType(val any) HtmlCode {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlCode) Lang(val any) HtmlCode {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlCode) Nonce(val any) HtmlCode {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlCode) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlCode) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlCode) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlCode) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlCode) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlCode) OnBlur(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlCode) OnClick(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlCode) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlCode) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlCode) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlCode) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlCode) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlCode) OnCopy(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlCode) OnCut(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlCode) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlCode) OnDrag(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlCode) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlCode) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlCode) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlCode) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlCode) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlCode) OnDrop(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlCode) OnError(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlCode) OnFocus(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlCode) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlCode) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlCode) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlCode) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlCode) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlCode) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlCode) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlCode) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlCode) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlCode) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlCode) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlCode) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlCode) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlCode) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlCode) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlCode) OnPaste(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlCode) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlCode) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlCode) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlCode) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlCode) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlCode) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlCode) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlCode) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlCode) OnScroll(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlCode) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlCode) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlCode) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlCode) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlCode) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlCode) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlCode) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlCode) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlCode) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlCode) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlCode) OnWheel(handler func(event Event, options ...any), options ...any) HtmlCode {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlCode) Part(val any) HtmlCode {
	p.SetProperty("part", val)
	return p
}

func (p *htmlCode) Slot(val any) HtmlCode {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlCode) SpellCheck(val any) HtmlCode {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlCode) Style(items ...*Ref[StyleItem]) HtmlCode {
	p.setStyle(items...)
	return p
}

func (p *htmlCode) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCode {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlCode) TabIndex(val any) HtmlCode {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlCode) Text(val any) HtmlCode {
	p.setText(val)
	return p
}

func (p *htmlCode) Title(val any) HtmlCode {
	p.SetProperty("title", val)
	return p
}

func (p *htmlCode) Translate(val any) HtmlCode {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlCode) VirtualKeyBoardPolicy(val any) HtmlCode {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Col return a html <col> element
func Col() HtmlCol {
	return &htmlCol{htmlBaseElement: htmlBaseElement{tag: "col"}}
}

// HtmlCol represent a html <col> element
type HtmlCol interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlCol

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlCol

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlCol

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlCol

	// Id set element id attribute
	Id(val string) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-span
	Span(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlCol

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlCol

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlCol

	// Text set val as text conent for current element
	Text(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlCol

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlCol
}

type htmlCol struct {
	htmlBaseElement
}

func (p *htmlCol) AccessKey(val any) HtmlCol {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlCol) AutoCapitalize(val any) HtmlCol {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlCol) AutoFocus(val any) HtmlCol {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlCol) Body(elems ...UI) HtmlCol {
	p.setBody(elems...)
	return p
}

func (p *htmlCol) Class(name string, items ...*Ref[StyleItem]) HtmlCol {
	p.setClass(name, items...)
	return p
}

func (p *htmlCol) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlCol {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlCol) ContentEditAble(val any) HtmlCol {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlCol) DataWith(name string, val any) HtmlCol {
	p.dataWith(name, val)
	return p
}

func (p *htmlCol) Dir(val any) HtmlCol {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlCol) DraggAble(val any) HtmlCol {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlCol) EnterKeyHint(val any) HtmlCol {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlCol) Hidden(val any) HtmlCol {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlCol) Id(val string) HtmlCol {
	p.SetUIElementId(val)
	return p
}

func (p *htmlCol) Inert(val any) HtmlCol {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlCol) InputMode(val any) HtmlCol {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlCol) Is(val any) HtmlCol {
	p.SetProperty("is", val)
	return p
}

func (p *htmlCol) ItemId(val any) HtmlCol {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlCol) ItemProp(val any) HtmlCol {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlCol) ItemRef(val any) HtmlCol {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlCol) ItemScope(val any) HtmlCol {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlCol) ItemType(val any) HtmlCol {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlCol) Lang(val any) HtmlCol {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlCol) Nonce(val any) HtmlCol {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlCol) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlCol) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlCol) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlCol) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlCol) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlCol) OnBlur(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlCol) OnClick(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlCol) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlCol) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlCol) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlCol) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlCol) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlCol) OnCopy(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlCol) OnCut(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlCol) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlCol) OnDrag(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlCol) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlCol) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlCol) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlCol) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlCol) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlCol) OnDrop(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlCol) OnError(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlCol) OnFocus(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlCol) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlCol) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlCol) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlCol) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlCol) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlCol) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlCol) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlCol) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlCol) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlCol) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlCol) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlCol) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlCol) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlCol) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlCol) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlCol) OnPaste(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlCol) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlCol) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlCol) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlCol) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlCol) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlCol) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlCol) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlCol) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlCol) OnScroll(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlCol) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlCol) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlCol) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlCol) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlCol) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlCol) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlCol) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlCol) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlCol) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlCol) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlCol) OnWheel(handler func(event Event, options ...any), options ...any) HtmlCol {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlCol) Part(val any) HtmlCol {
	p.SetProperty("part", val)
	return p
}

func (p *htmlCol) Slot(val any) HtmlCol {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlCol) Span(val any) HtmlCol {
	p.SetProperty("span", val)
	return p
}

func (p *htmlCol) SpellCheck(val any) HtmlCol {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlCol) Style(items ...*Ref[StyleItem]) HtmlCol {
	p.setStyle(items...)
	return p
}

func (p *htmlCol) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlCol {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlCol) TabIndex(val any) HtmlCol {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlCol) Text(val any) HtmlCol {
	p.setText(val)
	return p
}

func (p *htmlCol) Title(val any) HtmlCol {
	p.SetProperty("title", val)
	return p
}

func (p *htmlCol) Translate(val any) HtmlCol {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlCol) VirtualKeyBoardPolicy(val any) HtmlCol {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// ColGroup return a html <colgroup> element
func ColGroup() HtmlColGroup {
	return &htmlColGroup{htmlBaseElement: htmlBaseElement{tag: "colgroup"}}
}

// HtmlColGroup represent a html <colgroup> element
type HtmlColGroup interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlColGroup

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlColGroup

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlColGroup

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlColGroup

	// Id set element id attribute
	Id(val string) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-span
	Span(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlColGroup

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlColGroup

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlColGroup

	// Text set val as text conent for current element
	Text(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlColGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlColGroup
}

type htmlColGroup struct {
	htmlBaseElement
}

func (p *htmlColGroup) AccessKey(val any) HtmlColGroup {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlColGroup) AutoCapitalize(val any) HtmlColGroup {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlColGroup) AutoFocus(val any) HtmlColGroup {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlColGroup) Body(elems ...UI) HtmlColGroup {
	p.setBody(elems...)
	return p
}

func (p *htmlColGroup) Class(name string, items ...*Ref[StyleItem]) HtmlColGroup {
	p.setClass(name, items...)
	return p
}

func (p *htmlColGroup) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlColGroup {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlColGroup) ContentEditAble(val any) HtmlColGroup {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlColGroup) DataWith(name string, val any) HtmlColGroup {
	p.dataWith(name, val)
	return p
}

func (p *htmlColGroup) Dir(val any) HtmlColGroup {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlColGroup) DraggAble(val any) HtmlColGroup {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlColGroup) EnterKeyHint(val any) HtmlColGroup {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlColGroup) Hidden(val any) HtmlColGroup {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlColGroup) Id(val string) HtmlColGroup {
	p.SetUIElementId(val)
	return p
}

func (p *htmlColGroup) Inert(val any) HtmlColGroup {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlColGroup) InputMode(val any) HtmlColGroup {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlColGroup) Is(val any) HtmlColGroup {
	p.SetProperty("is", val)
	return p
}

func (p *htmlColGroup) ItemId(val any) HtmlColGroup {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlColGroup) ItemProp(val any) HtmlColGroup {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlColGroup) ItemRef(val any) HtmlColGroup {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlColGroup) ItemScope(val any) HtmlColGroup {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlColGroup) ItemType(val any) HtmlColGroup {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlColGroup) Lang(val any) HtmlColGroup {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlColGroup) Nonce(val any) HtmlColGroup {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlColGroup) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlColGroup) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlColGroup) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlColGroup) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlColGroup) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlColGroup) OnBlur(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlColGroup) OnClick(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlColGroup) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlColGroup) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlColGroup) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlColGroup) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlColGroup) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlColGroup) OnCopy(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlColGroup) OnCut(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlColGroup) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlColGroup) OnDrag(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlColGroup) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlColGroup) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlColGroup) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlColGroup) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlColGroup) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlColGroup) OnDrop(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlColGroup) OnError(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlColGroup) OnFocus(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlColGroup) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlColGroup) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlColGroup) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlColGroup) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlColGroup) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlColGroup) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlColGroup) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlColGroup) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlColGroup) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlColGroup) OnPaste(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlColGroup) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlColGroup) OnScroll(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlColGroup) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlColGroup) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlColGroup) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlColGroup) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlColGroup) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlColGroup) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlColGroup) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlColGroup) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlColGroup) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlColGroup) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlColGroup) OnWheel(handler func(event Event, options ...any), options ...any) HtmlColGroup {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlColGroup) Part(val any) HtmlColGroup {
	p.SetProperty("part", val)
	return p
}

func (p *htmlColGroup) Slot(val any) HtmlColGroup {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlColGroup) Span(val any) HtmlColGroup {
	p.SetProperty("span", val)
	return p
}

func (p *htmlColGroup) SpellCheck(val any) HtmlColGroup {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlColGroup) Style(items ...*Ref[StyleItem]) HtmlColGroup {
	p.setStyle(items...)
	return p
}

func (p *htmlColGroup) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlColGroup {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlColGroup) TabIndex(val any) HtmlColGroup {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlColGroup) Text(val any) HtmlColGroup {
	p.setText(val)
	return p
}

func (p *htmlColGroup) Title(val any) HtmlColGroup {
	p.SetProperty("title", val)
	return p
}

func (p *htmlColGroup) Translate(val any) HtmlColGroup {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlColGroup) VirtualKeyBoardPolicy(val any) HtmlColGroup {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Data return a html <data> element
func Data() HtmlData {
	return &htmlData{htmlBaseElement: htmlBaseElement{tag: "data"}}
}

// HtmlData represent a html <data> element
type HtmlData interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlData

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlData

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlData

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlData

	// Id set element id attribute
	Id(val string) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlData

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlData

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlData

	// Text set val as text conent for current element
	Text(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data#attr-value
	Value(val any) HtmlData

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlData
}

type htmlData struct {
	htmlBaseElement
}

func (p *htmlData) AccessKey(val any) HtmlData {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlData) AutoCapitalize(val any) HtmlData {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlData) AutoFocus(val any) HtmlData {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlData) Body(elems ...UI) HtmlData {
	p.setBody(elems...)
	return p
}

func (p *htmlData) Class(name string, items ...*Ref[StyleItem]) HtmlData {
	p.setClass(name, items...)
	return p
}

func (p *htmlData) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlData {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlData) ContentEditAble(val any) HtmlData {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlData) DataWith(name string, val any) HtmlData {
	p.dataWith(name, val)
	return p
}

func (p *htmlData) Dir(val any) HtmlData {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlData) DraggAble(val any) HtmlData {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlData) EnterKeyHint(val any) HtmlData {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlData) Hidden(val any) HtmlData {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlData) Id(val string) HtmlData {
	p.SetUIElementId(val)
	return p
}

func (p *htmlData) Inert(val any) HtmlData {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlData) InputMode(val any) HtmlData {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlData) Is(val any) HtmlData {
	p.SetProperty("is", val)
	return p
}

func (p *htmlData) ItemId(val any) HtmlData {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlData) ItemProp(val any) HtmlData {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlData) ItemRef(val any) HtmlData {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlData) ItemScope(val any) HtmlData {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlData) ItemType(val any) HtmlData {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlData) Lang(val any) HtmlData {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlData) Nonce(val any) HtmlData {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlData) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlData) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlData) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlData) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlData) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlData) OnBlur(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlData) OnClick(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlData) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlData) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlData) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlData) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlData) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlData) OnCopy(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlData) OnCut(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlData) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlData) OnDrag(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlData) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlData) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlData) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlData) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlData) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlData) OnDrop(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlData) OnError(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlData) OnFocus(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlData) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlData) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlData) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlData) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlData) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlData) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlData) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlData) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlData) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlData) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlData) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlData) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlData) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlData) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlData) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlData) OnPaste(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlData) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlData) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlData) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlData) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlData) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlData) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlData) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlData) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlData) OnScroll(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlData) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlData) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlData) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlData) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlData) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlData) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlData) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlData) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlData) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlData) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlData) OnWheel(handler func(event Event, options ...any), options ...any) HtmlData {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlData) Part(val any) HtmlData {
	p.SetProperty("part", val)
	return p
}

func (p *htmlData) Slot(val any) HtmlData {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlData) SpellCheck(val any) HtmlData {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlData) Style(items ...*Ref[StyleItem]) HtmlData {
	p.setStyle(items...)
	return p
}

func (p *htmlData) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlData {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlData) TabIndex(val any) HtmlData {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlData) Text(val any) HtmlData {
	p.setText(val)
	return p
}

func (p *htmlData) Title(val any) HtmlData {
	p.SetProperty("title", val)
	return p
}

func (p *htmlData) Translate(val any) HtmlData {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlData) Value(val any) HtmlData {
	p.SetProperty("value", val)
	return p
}

func (p *htmlData) VirtualKeyBoardPolicy(val any) HtmlData {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// DataList return a html <datalist> element
func DataList() HtmlDataList {
	return &htmlDataList{htmlBaseElement: htmlBaseElement{tag: "datalist"}}
}

// HtmlDataList represent a html <datalist> element
type HtmlDataList interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDataList

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDataList

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDataList

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDataList

	// Id set element id attribute
	Id(val string) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDataList

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDataList

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDataList

	// Text set val as text conent for current element
	Text(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDataList

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDataList
}

type htmlDataList struct {
	htmlBaseElement
}

func (p *htmlDataList) AccessKey(val any) HtmlDataList {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDataList) AutoCapitalize(val any) HtmlDataList {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDataList) AutoFocus(val any) HtmlDataList {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDataList) Body(elems ...UI) HtmlDataList {
	p.setBody(elems...)
	return p
}

func (p *htmlDataList) Class(name string, items ...*Ref[StyleItem]) HtmlDataList {
	p.setClass(name, items...)
	return p
}

func (p *htmlDataList) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDataList {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDataList) ContentEditAble(val any) HtmlDataList {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDataList) DataWith(name string, val any) HtmlDataList {
	p.dataWith(name, val)
	return p
}

func (p *htmlDataList) Dir(val any) HtmlDataList {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDataList) DraggAble(val any) HtmlDataList {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDataList) EnterKeyHint(val any) HtmlDataList {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDataList) Hidden(val any) HtmlDataList {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDataList) Id(val string) HtmlDataList {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDataList) Inert(val any) HtmlDataList {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDataList) InputMode(val any) HtmlDataList {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDataList) Is(val any) HtmlDataList {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDataList) ItemId(val any) HtmlDataList {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDataList) ItemProp(val any) HtmlDataList {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDataList) ItemRef(val any) HtmlDataList {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDataList) ItemScope(val any) HtmlDataList {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDataList) ItemType(val any) HtmlDataList {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDataList) Lang(val any) HtmlDataList {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDataList) Nonce(val any) HtmlDataList {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDataList) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDataList) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDataList) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDataList) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDataList) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDataList) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDataList) OnClick(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDataList) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDataList) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDataList) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDataList) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDataList) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDataList) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDataList) OnCut(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDataList) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDataList) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDataList) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDataList) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDataList) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDataList) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDataList) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDataList) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDataList) OnError(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDataList) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDataList) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDataList) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDataList) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDataList) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDataList) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDataList) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDataList) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDataList) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDataList) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDataList) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDataList) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDataList) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDataList) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDataList) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDataList) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDataList) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDataList) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDataList) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDataList) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDataList) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDataList) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDataList) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDataList) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDataList {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDataList) Part(val any) HtmlDataList {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDataList) Slot(val any) HtmlDataList {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDataList) SpellCheck(val any) HtmlDataList {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDataList) Style(items ...*Ref[StyleItem]) HtmlDataList {
	p.setStyle(items...)
	return p
}

func (p *htmlDataList) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDataList {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDataList) TabIndex(val any) HtmlDataList {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDataList) Text(val any) HtmlDataList {
	p.setText(val)
	return p
}

func (p *htmlDataList) Title(val any) HtmlDataList {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDataList) Translate(val any) HtmlDataList {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDataList) VirtualKeyBoardPolicy(val any) HtmlDataList {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Dd return a html <dd> element
func Dd() HtmlDd {
	return &htmlDd{htmlBaseElement: htmlBaseElement{tag: "dd"}}
}

// HtmlDd represent a html <dd> element
type HtmlDd interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDd

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDd

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDd

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDd

	// Id set element id attribute
	Id(val string) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDd

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDd

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDd

	// Text set val as text conent for current element
	Text(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDd
}

type htmlDd struct {
	htmlBaseElement
}

func (p *htmlDd) AccessKey(val any) HtmlDd {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDd) AutoCapitalize(val any) HtmlDd {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDd) AutoFocus(val any) HtmlDd {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDd) Body(elems ...UI) HtmlDd {
	p.setBody(elems...)
	return p
}

func (p *htmlDd) Class(name string, items ...*Ref[StyleItem]) HtmlDd {
	p.setClass(name, items...)
	return p
}

func (p *htmlDd) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDd {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDd) ContentEditAble(val any) HtmlDd {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDd) DataWith(name string, val any) HtmlDd {
	p.dataWith(name, val)
	return p
}

func (p *htmlDd) Dir(val any) HtmlDd {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDd) DraggAble(val any) HtmlDd {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDd) EnterKeyHint(val any) HtmlDd {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDd) Hidden(val any) HtmlDd {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDd) Id(val string) HtmlDd {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDd) Inert(val any) HtmlDd {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDd) InputMode(val any) HtmlDd {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDd) Is(val any) HtmlDd {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDd) ItemId(val any) HtmlDd {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDd) ItemProp(val any) HtmlDd {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDd) ItemRef(val any) HtmlDd {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDd) ItemScope(val any) HtmlDd {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDd) ItemType(val any) HtmlDd {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDd) Lang(val any) HtmlDd {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDd) Nonce(val any) HtmlDd {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDd) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDd) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDd) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDd) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDd) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDd) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDd) OnClick(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDd) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDd) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDd) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDd) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDd) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDd) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDd) OnCut(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDd) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDd) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDd) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDd) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDd) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDd) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDd) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDd) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDd) OnError(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDd) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDd) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDd) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDd) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDd) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDd) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDd) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDd) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDd) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDd) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDd) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDd) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDd) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDd) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDd) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDd) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDd) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDd) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDd) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDd) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDd) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDd) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDd) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDd) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDd) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDd) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDd) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDd) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDd) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDd) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDd) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDd) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDd) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDd) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDd) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDd) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDd) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDd {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDd) Part(val any) HtmlDd {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDd) Slot(val any) HtmlDd {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDd) SpellCheck(val any) HtmlDd {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDd) Style(items ...*Ref[StyleItem]) HtmlDd {
	p.setStyle(items...)
	return p
}

func (p *htmlDd) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDd {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDd) TabIndex(val any) HtmlDd {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDd) Text(val any) HtmlDd {
	p.setText(val)
	return p
}

func (p *htmlDd) Title(val any) HtmlDd {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDd) Translate(val any) HtmlDd {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDd) VirtualKeyBoardPolicy(val any) HtmlDd {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Del return a html <del> element
func Del() HtmlDel {
	return &htmlDel{htmlBaseElement: htmlBaseElement{tag: "del"}}
}

// HtmlDel represent a html <del> element
type HtmlDel interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDel

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del#attr-cite
	Cite(val any) HtmlDel

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDel

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del#attr-datetime
	DateTime(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDel

	// Id set element id attribute
	Id(val string) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDel

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDel

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDel

	// Text set val as text conent for current element
	Text(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDel
}

type htmlDel struct {
	htmlBaseElement
}

func (p *htmlDel) AccessKey(val any) HtmlDel {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDel) AutoCapitalize(val any) HtmlDel {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDel) AutoFocus(val any) HtmlDel {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDel) Body(elems ...UI) HtmlDel {
	p.setBody(elems...)
	return p
}

func (p *htmlDel) Cite(val any) HtmlDel {
	p.SetProperty("cite", val)
	return p
}

func (p *htmlDel) Class(name string, items ...*Ref[StyleItem]) HtmlDel {
	p.setClass(name, items...)
	return p
}

func (p *htmlDel) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDel {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDel) ContentEditAble(val any) HtmlDel {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDel) DataWith(name string, val any) HtmlDel {
	p.dataWith(name, val)
	return p
}

func (p *htmlDel) DateTime(val any) HtmlDel {
	p.SetProperty("datetime", val)
	return p
}

func (p *htmlDel) Dir(val any) HtmlDel {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDel) DraggAble(val any) HtmlDel {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDel) EnterKeyHint(val any) HtmlDel {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDel) Hidden(val any) HtmlDel {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDel) Id(val string) HtmlDel {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDel) Inert(val any) HtmlDel {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDel) InputMode(val any) HtmlDel {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDel) Is(val any) HtmlDel {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDel) ItemId(val any) HtmlDel {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDel) ItemProp(val any) HtmlDel {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDel) ItemRef(val any) HtmlDel {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDel) ItemScope(val any) HtmlDel {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDel) ItemType(val any) HtmlDel {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDel) Lang(val any) HtmlDel {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDel) Nonce(val any) HtmlDel {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDel) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDel) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDel) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDel) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDel) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDel) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDel) OnClick(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDel) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDel) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDel) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDel) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDel) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDel) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDel) OnCut(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDel) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDel) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDel) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDel) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDel) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDel) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDel) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDel) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDel) OnError(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDel) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDel) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDel) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDel) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDel) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDel) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDel) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDel) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDel) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDel) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDel) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDel) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDel) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDel) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDel) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDel) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDel) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDel) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDel) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDel) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDel) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDel) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDel) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDel) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDel) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDel) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDel) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDel) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDel) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDel) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDel) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDel) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDel) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDel) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDel) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDel) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDel) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDel {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDel) Part(val any) HtmlDel {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDel) Slot(val any) HtmlDel {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDel) SpellCheck(val any) HtmlDel {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDel) Style(items ...*Ref[StyleItem]) HtmlDel {
	p.setStyle(items...)
	return p
}

func (p *htmlDel) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDel {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDel) TabIndex(val any) HtmlDel {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDel) Text(val any) HtmlDel {
	p.setText(val)
	return p
}

func (p *htmlDel) Title(val any) HtmlDel {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDel) Translate(val any) HtmlDel {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDel) VirtualKeyBoardPolicy(val any) HtmlDel {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Details return a html <details> element
func Details() HtmlDetails {
	return &htmlDetails{htmlBaseElement: htmlBaseElement{tag: "details"}}
}

// HtmlDetails represent a html <details> element
type HtmlDetails interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDetails

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDetails

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDetails

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDetails

	// Id set element id attribute
	Id(val string) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#toggle
	OnToggle(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#open
	Open(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDetails

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDetails

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDetails

	// Text set val as text conent for current element
	Text(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDetails

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDetails
}

type htmlDetails struct {
	htmlBaseElement
}

func (p *htmlDetails) AccessKey(val any) HtmlDetails {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDetails) AutoCapitalize(val any) HtmlDetails {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDetails) AutoFocus(val any) HtmlDetails {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDetails) Body(elems ...UI) HtmlDetails {
	p.setBody(elems...)
	return p
}

func (p *htmlDetails) Class(name string, items ...*Ref[StyleItem]) HtmlDetails {
	p.setClass(name, items...)
	return p
}

func (p *htmlDetails) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDetails {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDetails) ContentEditAble(val any) HtmlDetails {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDetails) DataWith(name string, val any) HtmlDetails {
	p.dataWith(name, val)
	return p
}

func (p *htmlDetails) Dir(val any) HtmlDetails {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDetails) DraggAble(val any) HtmlDetails {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDetails) EnterKeyHint(val any) HtmlDetails {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDetails) Hidden(val any) HtmlDetails {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDetails) Id(val string) HtmlDetails {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDetails) Inert(val any) HtmlDetails {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDetails) InputMode(val any) HtmlDetails {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDetails) Is(val any) HtmlDetails {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDetails) ItemId(val any) HtmlDetails {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDetails) ItemProp(val any) HtmlDetails {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDetails) ItemRef(val any) HtmlDetails {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDetails) ItemScope(val any) HtmlDetails {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDetails) ItemType(val any) HtmlDetails {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDetails) Lang(val any) HtmlDetails {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDetails) Nonce(val any) HtmlDetails {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDetails) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDetails) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDetails) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDetails) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDetails) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDetails) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDetails) OnClick(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDetails) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDetails) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDetails) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDetails) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDetails) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDetails) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDetails) OnCut(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDetails) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDetails) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDetails) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDetails) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDetails) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDetails) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDetails) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDetails) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDetails) OnError(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDetails) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDetails) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDetails) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDetails) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDetails) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDetails) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDetails) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDetails) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDetails) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDetails) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDetails) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDetails) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDetails) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDetails) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDetails) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDetails) OnToggle(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("toggle", handler, options...)
	return p
}

func (p *htmlDetails) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDetails) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDetails) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDetails) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDetails) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDetails) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDetails) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDetails) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDetails) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDetails {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDetails) Open(val any) HtmlDetails {
	p.SetProperty("open", val)
	return p
}

func (p *htmlDetails) Part(val any) HtmlDetails {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDetails) Slot(val any) HtmlDetails {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDetails) SpellCheck(val any) HtmlDetails {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDetails) Style(items ...*Ref[StyleItem]) HtmlDetails {
	p.setStyle(items...)
	return p
}

func (p *htmlDetails) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDetails {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDetails) TabIndex(val any) HtmlDetails {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDetails) Text(val any) HtmlDetails {
	p.setText(val)
	return p
}

func (p *htmlDetails) Title(val any) HtmlDetails {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDetails) Translate(val any) HtmlDetails {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDetails) VirtualKeyBoardPolicy(val any) HtmlDetails {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Dfn return a html <dfn> element
func Dfn() HtmlDfn {
	return &htmlDfn{htmlBaseElement: htmlBaseElement{tag: "dfn"}}
}

// HtmlDfn represent a html <dfn> element
type HtmlDfn interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDfn

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDfn

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDfn

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDfn

	// Id set element id attribute
	Id(val string) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDfn

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDfn

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDfn

	// Text set val as text conent for current element
	Text(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDfn

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDfn
}

type htmlDfn struct {
	htmlBaseElement
}

func (p *htmlDfn) AccessKey(val any) HtmlDfn {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDfn) AutoCapitalize(val any) HtmlDfn {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDfn) AutoFocus(val any) HtmlDfn {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDfn) Body(elems ...UI) HtmlDfn {
	p.setBody(elems...)
	return p
}

func (p *htmlDfn) Class(name string, items ...*Ref[StyleItem]) HtmlDfn {
	p.setClass(name, items...)
	return p
}

func (p *htmlDfn) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDfn {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDfn) ContentEditAble(val any) HtmlDfn {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDfn) DataWith(name string, val any) HtmlDfn {
	p.dataWith(name, val)
	return p
}

func (p *htmlDfn) Dir(val any) HtmlDfn {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDfn) DraggAble(val any) HtmlDfn {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDfn) EnterKeyHint(val any) HtmlDfn {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDfn) Hidden(val any) HtmlDfn {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDfn) Id(val string) HtmlDfn {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDfn) Inert(val any) HtmlDfn {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDfn) InputMode(val any) HtmlDfn {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDfn) Is(val any) HtmlDfn {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDfn) ItemId(val any) HtmlDfn {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDfn) ItemProp(val any) HtmlDfn {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDfn) ItemRef(val any) HtmlDfn {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDfn) ItemScope(val any) HtmlDfn {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDfn) ItemType(val any) HtmlDfn {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDfn) Lang(val any) HtmlDfn {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDfn) Nonce(val any) HtmlDfn {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDfn) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDfn) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDfn) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDfn) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDfn) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDfn) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDfn) OnClick(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDfn) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDfn) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDfn) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDfn) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDfn) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDfn) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDfn) OnCut(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDfn) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDfn) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDfn) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDfn) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDfn) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDfn) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDfn) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDfn) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDfn) OnError(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDfn) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDfn) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDfn) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDfn) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDfn) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDfn) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDfn) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDfn) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDfn) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDfn) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDfn) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDfn) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDfn) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDfn) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDfn) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDfn) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDfn) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDfn) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDfn) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDfn) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDfn) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDfn) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDfn) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDfn) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDfn {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDfn) Part(val any) HtmlDfn {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDfn) Slot(val any) HtmlDfn {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDfn) SpellCheck(val any) HtmlDfn {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDfn) Style(items ...*Ref[StyleItem]) HtmlDfn {
	p.setStyle(items...)
	return p
}

func (p *htmlDfn) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDfn {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDfn) TabIndex(val any) HtmlDfn {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDfn) Text(val any) HtmlDfn {
	p.setText(val)
	return p
}

func (p *htmlDfn) Title(val any) HtmlDfn {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDfn) Translate(val any) HtmlDfn {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDfn) VirtualKeyBoardPolicy(val any) HtmlDfn {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Dialog return a html <dialog> element
func Dialog() HtmlDialog {
	return &htmlDialog{htmlBaseElement: htmlBaseElement{tag: "dialog"}}
}

// HtmlDialog represent a html <dialog> element
type HtmlDialog interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDialog

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDialog

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDialog

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDialog

	// Id set element id attribute
	Id(val string) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#attr-open
	Open(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDialog

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDialog

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDialog

	// Text set val as text conent for current element
	Text(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDialog

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDialog
}

type htmlDialog struct {
	htmlBaseElement
}

func (p *htmlDialog) AccessKey(val any) HtmlDialog {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDialog) AutoCapitalize(val any) HtmlDialog {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDialog) AutoFocus(val any) HtmlDialog {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDialog) Body(elems ...UI) HtmlDialog {
	p.setBody(elems...)
	return p
}

func (p *htmlDialog) Class(name string, items ...*Ref[StyleItem]) HtmlDialog {
	p.setClass(name, items...)
	return p
}

func (p *htmlDialog) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDialog {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDialog) ContentEditAble(val any) HtmlDialog {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDialog) DataWith(name string, val any) HtmlDialog {
	p.dataWith(name, val)
	return p
}

func (p *htmlDialog) Dir(val any) HtmlDialog {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDialog) DraggAble(val any) HtmlDialog {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDialog) EnterKeyHint(val any) HtmlDialog {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDialog) Hidden(val any) HtmlDialog {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDialog) Id(val string) HtmlDialog {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDialog) Inert(val any) HtmlDialog {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDialog) InputMode(val any) HtmlDialog {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDialog) Is(val any) HtmlDialog {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDialog) ItemId(val any) HtmlDialog {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDialog) ItemProp(val any) HtmlDialog {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDialog) ItemRef(val any) HtmlDialog {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDialog) ItemScope(val any) HtmlDialog {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDialog) ItemType(val any) HtmlDialog {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDialog) Lang(val any) HtmlDialog {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDialog) Nonce(val any) HtmlDialog {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDialog) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDialog) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDialog) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDialog) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDialog) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDialog) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDialog) OnClick(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDialog) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDialog) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDialog) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDialog) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDialog) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDialog) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDialog) OnCut(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDialog) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDialog) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDialog) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDialog) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDialog) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDialog) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDialog) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDialog) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDialog) OnError(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDialog) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDialog) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDialog) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDialog) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDialog) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDialog) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDialog) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDialog) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDialog) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDialog) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDialog) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDialog) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDialog) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDialog) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDialog) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDialog) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDialog) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDialog) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDialog) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDialog) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDialog) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDialog) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDialog) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDialog) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDialog {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDialog) Open(val any) HtmlDialog {
	p.SetProperty("open", val)
	return p
}

func (p *htmlDialog) Part(val any) HtmlDialog {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDialog) Slot(val any) HtmlDialog {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDialog) SpellCheck(val any) HtmlDialog {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDialog) Style(items ...*Ref[StyleItem]) HtmlDialog {
	p.setStyle(items...)
	return p
}

func (p *htmlDialog) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDialog {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDialog) TabIndex(val any) HtmlDialog {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDialog) Text(val any) HtmlDialog {
	p.setText(val)
	return p
}

func (p *htmlDialog) Title(val any) HtmlDialog {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDialog) Translate(val any) HtmlDialog {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDialog) VirtualKeyBoardPolicy(val any) HtmlDialog {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Div return a html <div> element
func Div() HtmlDiv {
	return &htmlDiv{htmlBaseElement: htmlBaseElement{tag: "div"}}
}

// HtmlDiv represent a html <div> element
type HtmlDiv interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDiv

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDiv

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDiv

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDiv

	// Id set element id attribute
	Id(val string) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDiv

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDiv

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDiv

	// Text set val as text conent for current element
	Text(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDiv

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDiv
}

type htmlDiv struct {
	htmlBaseElement
}

func (p *htmlDiv) AccessKey(val any) HtmlDiv {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDiv) AutoCapitalize(val any) HtmlDiv {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDiv) AutoFocus(val any) HtmlDiv {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDiv) Body(elems ...UI) HtmlDiv {
	p.setBody(elems...)
	return p
}

func (p *htmlDiv) Class(name string, items ...*Ref[StyleItem]) HtmlDiv {
	p.setClass(name, items...)
	return p
}

func (p *htmlDiv) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDiv {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDiv) ContentEditAble(val any) HtmlDiv {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDiv) DataWith(name string, val any) HtmlDiv {
	p.dataWith(name, val)
	return p
}

func (p *htmlDiv) Dir(val any) HtmlDiv {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDiv) DraggAble(val any) HtmlDiv {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDiv) EnterKeyHint(val any) HtmlDiv {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDiv) Hidden(val any) HtmlDiv {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDiv) Id(val string) HtmlDiv {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDiv) Inert(val any) HtmlDiv {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDiv) InputMode(val any) HtmlDiv {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDiv) Is(val any) HtmlDiv {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDiv) ItemId(val any) HtmlDiv {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDiv) ItemProp(val any) HtmlDiv {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDiv) ItemRef(val any) HtmlDiv {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDiv) ItemScope(val any) HtmlDiv {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDiv) ItemType(val any) HtmlDiv {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDiv) Lang(val any) HtmlDiv {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDiv) Nonce(val any) HtmlDiv {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDiv) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDiv) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDiv) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDiv) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDiv) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDiv) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDiv) OnClick(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDiv) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDiv) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDiv) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDiv) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDiv) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDiv) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDiv) OnCut(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDiv) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDiv) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDiv) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDiv) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDiv) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDiv) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDiv) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDiv) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDiv) OnError(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDiv) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDiv) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDiv) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDiv) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDiv) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDiv) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDiv) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDiv) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDiv) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDiv) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDiv) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDiv) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDiv) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDiv) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDiv) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDiv) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDiv) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDiv) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDiv) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDiv) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDiv) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDiv) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDiv) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDiv) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDiv {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDiv) Part(val any) HtmlDiv {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDiv) Slot(val any) HtmlDiv {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDiv) SpellCheck(val any) HtmlDiv {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDiv) Style(items ...*Ref[StyleItem]) HtmlDiv {
	p.setStyle(items...)
	return p
}

func (p *htmlDiv) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDiv {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDiv) TabIndex(val any) HtmlDiv {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDiv) Text(val any) HtmlDiv {
	p.setText(val)
	return p
}

func (p *htmlDiv) Title(val any) HtmlDiv {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDiv) Translate(val any) HtmlDiv {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDiv) VirtualKeyBoardPolicy(val any) HtmlDiv {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Dl return a html <dl> element
func Dl() HtmlDl {
	return &htmlDl{htmlBaseElement: htmlBaseElement{tag: "dl"}}
}

// HtmlDl represent a html <dl> element
type HtmlDl interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDl

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDl

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDl

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDl

	// Id set element id attribute
	Id(val string) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDl

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDl

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDl

	// Text set val as text conent for current element
	Text(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDl
}

type htmlDl struct {
	htmlBaseElement
}

func (p *htmlDl) AccessKey(val any) HtmlDl {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDl) AutoCapitalize(val any) HtmlDl {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDl) AutoFocus(val any) HtmlDl {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDl) Body(elems ...UI) HtmlDl {
	p.setBody(elems...)
	return p
}

func (p *htmlDl) Class(name string, items ...*Ref[StyleItem]) HtmlDl {
	p.setClass(name, items...)
	return p
}

func (p *htmlDl) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDl {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDl) ContentEditAble(val any) HtmlDl {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDl) DataWith(name string, val any) HtmlDl {
	p.dataWith(name, val)
	return p
}

func (p *htmlDl) Dir(val any) HtmlDl {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDl) DraggAble(val any) HtmlDl {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDl) EnterKeyHint(val any) HtmlDl {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDl) Hidden(val any) HtmlDl {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDl) Id(val string) HtmlDl {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDl) Inert(val any) HtmlDl {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDl) InputMode(val any) HtmlDl {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDl) Is(val any) HtmlDl {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDl) ItemId(val any) HtmlDl {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDl) ItemProp(val any) HtmlDl {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDl) ItemRef(val any) HtmlDl {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDl) ItemScope(val any) HtmlDl {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDl) ItemType(val any) HtmlDl {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDl) Lang(val any) HtmlDl {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDl) Nonce(val any) HtmlDl {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDl) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDl) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDl) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDl) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDl) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDl) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDl) OnClick(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDl) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDl) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDl) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDl) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDl) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDl) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDl) OnCut(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDl) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDl) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDl) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDl) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDl) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDl) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDl) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDl) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDl) OnError(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDl) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDl) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDl) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDl) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDl) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDl) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDl) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDl) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDl) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDl) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDl) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDl) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDl) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDl) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDl) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDl) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDl) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDl) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDl) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDl) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDl) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDl) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDl) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDl) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDl) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDl) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDl) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDl) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDl) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDl) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDl) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDl) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDl) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDl) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDl) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDl) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDl) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDl {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDl) Part(val any) HtmlDl {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDl) Slot(val any) HtmlDl {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDl) SpellCheck(val any) HtmlDl {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDl) Style(items ...*Ref[StyleItem]) HtmlDl {
	p.setStyle(items...)
	return p
}

func (p *htmlDl) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDl {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDl) TabIndex(val any) HtmlDl {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDl) Text(val any) HtmlDl {
	p.setText(val)
	return p
}

func (p *htmlDl) Title(val any) HtmlDl {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDl) Translate(val any) HtmlDl {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDl) VirtualKeyBoardPolicy(val any) HtmlDl {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Dt return a html <dt> element
func Dt() HtmlDt {
	return &htmlDt{htmlBaseElement: htmlBaseElement{tag: "dt"}}
}

// HtmlDt represent a html <dt> element
type HtmlDt interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlDt

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlDt

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlDt

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlDt

	// Id set element id attribute
	Id(val string) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlDt

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlDt

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlDt

	// Text set val as text conent for current element
	Text(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlDt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlDt
}

type htmlDt struct {
	htmlBaseElement
}

func (p *htmlDt) AccessKey(val any) HtmlDt {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlDt) AutoCapitalize(val any) HtmlDt {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlDt) AutoFocus(val any) HtmlDt {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlDt) Body(elems ...UI) HtmlDt {
	p.setBody(elems...)
	return p
}

func (p *htmlDt) Class(name string, items ...*Ref[StyleItem]) HtmlDt {
	p.setClass(name, items...)
	return p
}

func (p *htmlDt) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlDt {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlDt) ContentEditAble(val any) HtmlDt {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlDt) DataWith(name string, val any) HtmlDt {
	p.dataWith(name, val)
	return p
}

func (p *htmlDt) Dir(val any) HtmlDt {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlDt) DraggAble(val any) HtmlDt {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlDt) EnterKeyHint(val any) HtmlDt {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlDt) Hidden(val any) HtmlDt {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlDt) Id(val string) HtmlDt {
	p.SetUIElementId(val)
	return p
}

func (p *htmlDt) Inert(val any) HtmlDt {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlDt) InputMode(val any) HtmlDt {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlDt) Is(val any) HtmlDt {
	p.SetProperty("is", val)
	return p
}

func (p *htmlDt) ItemId(val any) HtmlDt {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlDt) ItemProp(val any) HtmlDt {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlDt) ItemRef(val any) HtmlDt {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlDt) ItemScope(val any) HtmlDt {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlDt) ItemType(val any) HtmlDt {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlDt) Lang(val any) HtmlDt {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlDt) Nonce(val any) HtmlDt {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlDt) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlDt) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlDt) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlDt) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlDt) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlDt) OnBlur(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlDt) OnClick(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlDt) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlDt) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlDt) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlDt) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlDt) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlDt) OnCopy(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlDt) OnCut(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlDt) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlDt) OnDrag(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlDt) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlDt) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlDt) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlDt) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlDt) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlDt) OnDrop(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlDt) OnError(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlDt) OnFocus(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlDt) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlDt) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlDt) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlDt) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlDt) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlDt) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlDt) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlDt) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlDt) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlDt) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlDt) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlDt) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlDt) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlDt) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlDt) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlDt) OnPaste(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlDt) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlDt) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlDt) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlDt) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlDt) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlDt) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlDt) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlDt) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlDt) OnScroll(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlDt) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlDt) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlDt) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlDt) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlDt) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlDt) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlDt) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlDt) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlDt) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlDt) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlDt) OnWheel(handler func(event Event, options ...any), options ...any) HtmlDt {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlDt) Part(val any) HtmlDt {
	p.SetProperty("part", val)
	return p
}

func (p *htmlDt) Slot(val any) HtmlDt {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlDt) SpellCheck(val any) HtmlDt {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlDt) Style(items ...*Ref[StyleItem]) HtmlDt {
	p.setStyle(items...)
	return p
}

func (p *htmlDt) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlDt {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlDt) TabIndex(val any) HtmlDt {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlDt) Text(val any) HtmlDt {
	p.setText(val)
	return p
}

func (p *htmlDt) Title(val any) HtmlDt {
	p.SetProperty("title", val)
	return p
}

func (p *htmlDt) Translate(val any) HtmlDt {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlDt) VirtualKeyBoardPolicy(val any) HtmlDt {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Em return a html <em> element
func Em() HtmlEm {
	return &htmlEm{htmlBaseElement: htmlBaseElement{tag: "em"}}
}

// HtmlEm represent a html <em> element
type HtmlEm interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlEm

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlEm

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlEm

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlEm

	// Id set element id attribute
	Id(val string) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlEm

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlEm

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlEm

	// Text set val as text conent for current element
	Text(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlEm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlEm
}

type htmlEm struct {
	htmlBaseElement
}

func (p *htmlEm) AccessKey(val any) HtmlEm {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlEm) AutoCapitalize(val any) HtmlEm {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlEm) AutoFocus(val any) HtmlEm {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlEm) Body(elems ...UI) HtmlEm {
	p.setBody(elems...)
	return p
}

func (p *htmlEm) Class(name string, items ...*Ref[StyleItem]) HtmlEm {
	p.setClass(name, items...)
	return p
}

func (p *htmlEm) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlEm {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlEm) ContentEditAble(val any) HtmlEm {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlEm) DataWith(name string, val any) HtmlEm {
	p.dataWith(name, val)
	return p
}

func (p *htmlEm) Dir(val any) HtmlEm {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlEm) DraggAble(val any) HtmlEm {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlEm) EnterKeyHint(val any) HtmlEm {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlEm) Hidden(val any) HtmlEm {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlEm) Id(val string) HtmlEm {
	p.SetUIElementId(val)
	return p
}

func (p *htmlEm) Inert(val any) HtmlEm {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlEm) InputMode(val any) HtmlEm {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlEm) Is(val any) HtmlEm {
	p.SetProperty("is", val)
	return p
}

func (p *htmlEm) ItemId(val any) HtmlEm {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlEm) ItemProp(val any) HtmlEm {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlEm) ItemRef(val any) HtmlEm {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlEm) ItemScope(val any) HtmlEm {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlEm) ItemType(val any) HtmlEm {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlEm) Lang(val any) HtmlEm {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlEm) Nonce(val any) HtmlEm {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlEm) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlEm) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlEm) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlEm) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlEm) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlEm) OnBlur(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlEm) OnClick(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlEm) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlEm) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlEm) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlEm) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlEm) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlEm) OnCopy(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlEm) OnCut(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlEm) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlEm) OnDrag(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlEm) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlEm) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlEm) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlEm) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlEm) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlEm) OnDrop(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlEm) OnError(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlEm) OnFocus(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlEm) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlEm) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlEm) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlEm) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlEm) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlEm) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlEm) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlEm) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlEm) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlEm) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlEm) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlEm) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlEm) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlEm) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlEm) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlEm) OnPaste(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlEm) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlEm) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlEm) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlEm) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlEm) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlEm) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlEm) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlEm) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlEm) OnScroll(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlEm) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlEm) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlEm) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlEm) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlEm) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlEm) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlEm) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlEm) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlEm) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlEm) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlEm) OnWheel(handler func(event Event, options ...any), options ...any) HtmlEm {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlEm) Part(val any) HtmlEm {
	p.SetProperty("part", val)
	return p
}

func (p *htmlEm) Slot(val any) HtmlEm {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlEm) SpellCheck(val any) HtmlEm {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlEm) Style(items ...*Ref[StyleItem]) HtmlEm {
	p.setStyle(items...)
	return p
}

func (p *htmlEm) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlEm {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlEm) TabIndex(val any) HtmlEm {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlEm) Text(val any) HtmlEm {
	p.setText(val)
	return p
}

func (p *htmlEm) Title(val any) HtmlEm {
	p.SetProperty("title", val)
	return p
}

func (p *htmlEm) Translate(val any) HtmlEm {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlEm) VirtualKeyBoardPolicy(val any) HtmlEm {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Embed return a html <embed> element
func Embed() HtmlEmbed {
	return &htmlEmbed{htmlBaseElement: htmlBaseElement{tag: "embed"}}
}

// HtmlEmbed represent a html <embed> element
type HtmlEmbed interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlEmbed

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlEmbed

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlEmbed

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed#attr-height
	Height(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlEmbed

	// Id set element id attribute
	Id(val string) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed#attr-src
	Src(val any) HtmlEmbed

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlEmbed

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlEmbed

	// Text set val as text conent for current element
	Text(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed#attr-type
	Type(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlEmbed

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed#attr-width
	Width(val any) HtmlEmbed
}

type htmlEmbed struct {
	htmlBaseElement
}

func (p *htmlEmbed) AccessKey(val any) HtmlEmbed {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlEmbed) AutoCapitalize(val any) HtmlEmbed {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlEmbed) AutoFocus(val any) HtmlEmbed {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlEmbed) Body(elems ...UI) HtmlEmbed {
	p.setBody(elems...)
	return p
}

func (p *htmlEmbed) Class(name string, items ...*Ref[StyleItem]) HtmlEmbed {
	p.setClass(name, items...)
	return p
}

func (p *htmlEmbed) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlEmbed {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlEmbed) ContentEditAble(val any) HtmlEmbed {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlEmbed) DataWith(name string, val any) HtmlEmbed {
	p.dataWith(name, val)
	return p
}

func (p *htmlEmbed) Dir(val any) HtmlEmbed {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlEmbed) DraggAble(val any) HtmlEmbed {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlEmbed) EnterKeyHint(val any) HtmlEmbed {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlEmbed) Height(val any) HtmlEmbed {
	p.SetProperty("height", val)
	return p
}

func (p *htmlEmbed) Hidden(val any) HtmlEmbed {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlEmbed) Id(val string) HtmlEmbed {
	p.SetUIElementId(val)
	return p
}

func (p *htmlEmbed) Inert(val any) HtmlEmbed {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlEmbed) InputMode(val any) HtmlEmbed {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlEmbed) Is(val any) HtmlEmbed {
	p.SetProperty("is", val)
	return p
}

func (p *htmlEmbed) ItemId(val any) HtmlEmbed {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlEmbed) ItemProp(val any) HtmlEmbed {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlEmbed) ItemRef(val any) HtmlEmbed {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlEmbed) ItemScope(val any) HtmlEmbed {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlEmbed) ItemType(val any) HtmlEmbed {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlEmbed) Lang(val any) HtmlEmbed {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlEmbed) Nonce(val any) HtmlEmbed {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlEmbed) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlEmbed) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlEmbed) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlEmbed) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlEmbed) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlEmbed) OnBlur(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlEmbed) OnClick(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlEmbed) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlEmbed) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlEmbed) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlEmbed) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlEmbed) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlEmbed) OnCopy(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlEmbed) OnCut(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlEmbed) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlEmbed) OnDrag(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlEmbed) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlEmbed) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlEmbed) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlEmbed) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlEmbed) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlEmbed) OnDrop(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlEmbed) OnError(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlEmbed) OnFocus(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlEmbed) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlEmbed) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlEmbed) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlEmbed) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlEmbed) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlEmbed) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlEmbed) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlEmbed) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlEmbed) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlEmbed) OnPaste(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlEmbed) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlEmbed) OnScroll(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlEmbed) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlEmbed) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlEmbed) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlEmbed) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlEmbed) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlEmbed) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlEmbed) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlEmbed) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlEmbed) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlEmbed) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlEmbed) OnWheel(handler func(event Event, options ...any), options ...any) HtmlEmbed {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlEmbed) Part(val any) HtmlEmbed {
	p.SetProperty("part", val)
	return p
}

func (p *htmlEmbed) Slot(val any) HtmlEmbed {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlEmbed) SpellCheck(val any) HtmlEmbed {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlEmbed) Src(val any) HtmlEmbed {
	p.SetProperty("src", val)
	return p
}

func (p *htmlEmbed) Style(items ...*Ref[StyleItem]) HtmlEmbed {
	p.setStyle(items...)
	return p
}

func (p *htmlEmbed) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlEmbed {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlEmbed) TabIndex(val any) HtmlEmbed {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlEmbed) Text(val any) HtmlEmbed {
	p.setText(val)
	return p
}

func (p *htmlEmbed) Title(val any) HtmlEmbed {
	p.SetProperty("title", val)
	return p
}

func (p *htmlEmbed) Translate(val any) HtmlEmbed {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlEmbed) Type(val any) HtmlEmbed {
	p.SetProperty("type", val)
	return p
}

func (p *htmlEmbed) VirtualKeyBoardPolicy(val any) HtmlEmbed {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlEmbed) Width(val any) HtmlEmbed {
	p.SetProperty("width", val)
	return p
}

// FieldSet return a html <fieldset> element
func FieldSet() HtmlFieldSet {
	return &htmlFieldSet{htmlBaseElement: htmlBaseElement{tag: "fieldset"}}
}

// HtmlFieldSet represent a html <fieldset> element
type HtmlFieldSet interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlFieldSet

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlFieldSet

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlFieldSet

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldSet#attr-disabled
	Disabled(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldSet#attr-form
	Form(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlFieldSet

	// Id set element id attribute
	Id(val string) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldSet#attr-name
	Name(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlFieldSet

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlFieldSet

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlFieldSet

	// Text set val as text conent for current element
	Text(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlFieldSet

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlFieldSet
}

type htmlFieldSet struct {
	htmlBaseElement
}

func (p *htmlFieldSet) AccessKey(val any) HtmlFieldSet {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlFieldSet) AutoCapitalize(val any) HtmlFieldSet {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlFieldSet) AutoFocus(val any) HtmlFieldSet {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlFieldSet) Body(elems ...UI) HtmlFieldSet {
	p.setBody(elems...)
	return p
}

func (p *htmlFieldSet) Class(name string, items ...*Ref[StyleItem]) HtmlFieldSet {
	p.setClass(name, items...)
	return p
}

func (p *htmlFieldSet) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFieldSet {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlFieldSet) ContentEditAble(val any) HtmlFieldSet {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlFieldSet) DataWith(name string, val any) HtmlFieldSet {
	p.dataWith(name, val)
	return p
}

func (p *htmlFieldSet) Dir(val any) HtmlFieldSet {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlFieldSet) Disabled(val any) HtmlFieldSet {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlFieldSet) DraggAble(val any) HtmlFieldSet {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlFieldSet) EnterKeyHint(val any) HtmlFieldSet {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlFieldSet) Form(val any) HtmlFieldSet {
	p.SetProperty("form", val)
	return p
}

func (p *htmlFieldSet) Hidden(val any) HtmlFieldSet {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlFieldSet) Id(val string) HtmlFieldSet {
	p.SetUIElementId(val)
	return p
}

func (p *htmlFieldSet) Inert(val any) HtmlFieldSet {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlFieldSet) InputMode(val any) HtmlFieldSet {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlFieldSet) Is(val any) HtmlFieldSet {
	p.SetProperty("is", val)
	return p
}

func (p *htmlFieldSet) ItemId(val any) HtmlFieldSet {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlFieldSet) ItemProp(val any) HtmlFieldSet {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlFieldSet) ItemRef(val any) HtmlFieldSet {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlFieldSet) ItemScope(val any) HtmlFieldSet {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlFieldSet) ItemType(val any) HtmlFieldSet {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlFieldSet) Lang(val any) HtmlFieldSet {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlFieldSet) Name(val any) HtmlFieldSet {
	p.SetProperty("name", val)
	return p
}

func (p *htmlFieldSet) Nonce(val any) HtmlFieldSet {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlFieldSet) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlFieldSet) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlFieldSet) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlFieldSet) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlFieldSet) OnBlur(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlFieldSet) OnClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlFieldSet) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlFieldSet) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlFieldSet) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlFieldSet) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlFieldSet) OnCopy(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlFieldSet) OnCut(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDrag(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlFieldSet) OnDrop(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlFieldSet) OnError(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlFieldSet) OnFocus(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlFieldSet) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlFieldSet) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlFieldSet) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlFieldSet) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlFieldSet) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlFieldSet) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlFieldSet) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlFieldSet) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlFieldSet) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPaste(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlFieldSet) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlFieldSet) OnScroll(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlFieldSet) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlFieldSet) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlFieldSet) OnWheel(handler func(event Event, options ...any), options ...any) HtmlFieldSet {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlFieldSet) Part(val any) HtmlFieldSet {
	p.SetProperty("part", val)
	return p
}

func (p *htmlFieldSet) Slot(val any) HtmlFieldSet {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlFieldSet) SpellCheck(val any) HtmlFieldSet {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlFieldSet) Style(items ...*Ref[StyleItem]) HtmlFieldSet {
	p.setStyle(items...)
	return p
}

func (p *htmlFieldSet) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFieldSet {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlFieldSet) TabIndex(val any) HtmlFieldSet {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlFieldSet) Text(val any) HtmlFieldSet {
	p.setText(val)
	return p
}

func (p *htmlFieldSet) Title(val any) HtmlFieldSet {
	p.SetProperty("title", val)
	return p
}

func (p *htmlFieldSet) Translate(val any) HtmlFieldSet {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlFieldSet) VirtualKeyBoardPolicy(val any) HtmlFieldSet {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// FigCaption return a html <figcaption> element
func FigCaption() HtmlFigCaption {
	return &htmlFigCaption{htmlBaseElement: htmlBaseElement{tag: "figcaption"}}
}

// HtmlFigCaption represent a html <figcaption> element
type HtmlFigCaption interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlFigCaption

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlFigCaption

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlFigCaption

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlFigCaption

	// Id set element id attribute
	Id(val string) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlFigCaption

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlFigCaption

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlFigCaption

	// Text set val as text conent for current element
	Text(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlFigCaption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlFigCaption
}

type htmlFigCaption struct {
	htmlBaseElement
}

func (p *htmlFigCaption) AccessKey(val any) HtmlFigCaption {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlFigCaption) AutoCapitalize(val any) HtmlFigCaption {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlFigCaption) AutoFocus(val any) HtmlFigCaption {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlFigCaption) Body(elems ...UI) HtmlFigCaption {
	p.setBody(elems...)
	return p
}

func (p *htmlFigCaption) Class(name string, items ...*Ref[StyleItem]) HtmlFigCaption {
	p.setClass(name, items...)
	return p
}

func (p *htmlFigCaption) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFigCaption {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlFigCaption) ContentEditAble(val any) HtmlFigCaption {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlFigCaption) DataWith(name string, val any) HtmlFigCaption {
	p.dataWith(name, val)
	return p
}

func (p *htmlFigCaption) Dir(val any) HtmlFigCaption {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlFigCaption) DraggAble(val any) HtmlFigCaption {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlFigCaption) EnterKeyHint(val any) HtmlFigCaption {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlFigCaption) Hidden(val any) HtmlFigCaption {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlFigCaption) Id(val string) HtmlFigCaption {
	p.SetUIElementId(val)
	return p
}

func (p *htmlFigCaption) Inert(val any) HtmlFigCaption {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlFigCaption) InputMode(val any) HtmlFigCaption {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlFigCaption) Is(val any) HtmlFigCaption {
	p.SetProperty("is", val)
	return p
}

func (p *htmlFigCaption) ItemId(val any) HtmlFigCaption {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlFigCaption) ItemProp(val any) HtmlFigCaption {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlFigCaption) ItemRef(val any) HtmlFigCaption {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlFigCaption) ItemScope(val any) HtmlFigCaption {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlFigCaption) ItemType(val any) HtmlFigCaption {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlFigCaption) Lang(val any) HtmlFigCaption {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlFigCaption) Nonce(val any) HtmlFigCaption {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlFigCaption) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlFigCaption) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlFigCaption) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlFigCaption) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlFigCaption) OnBlur(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlFigCaption) OnClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlFigCaption) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlFigCaption) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlFigCaption) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlFigCaption) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlFigCaption) OnCopy(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlFigCaption) OnCut(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDrag(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlFigCaption) OnDrop(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlFigCaption) OnError(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlFigCaption) OnFocus(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlFigCaption) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlFigCaption) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlFigCaption) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlFigCaption) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlFigCaption) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlFigCaption) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlFigCaption) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlFigCaption) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlFigCaption) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPaste(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlFigCaption) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlFigCaption) OnScroll(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlFigCaption) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlFigCaption) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlFigCaption) OnWheel(handler func(event Event, options ...any), options ...any) HtmlFigCaption {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlFigCaption) Part(val any) HtmlFigCaption {
	p.SetProperty("part", val)
	return p
}

func (p *htmlFigCaption) Slot(val any) HtmlFigCaption {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlFigCaption) SpellCheck(val any) HtmlFigCaption {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlFigCaption) Style(items ...*Ref[StyleItem]) HtmlFigCaption {
	p.setStyle(items...)
	return p
}

func (p *htmlFigCaption) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFigCaption {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlFigCaption) TabIndex(val any) HtmlFigCaption {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlFigCaption) Text(val any) HtmlFigCaption {
	p.setText(val)
	return p
}

func (p *htmlFigCaption) Title(val any) HtmlFigCaption {
	p.SetProperty("title", val)
	return p
}

func (p *htmlFigCaption) Translate(val any) HtmlFigCaption {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlFigCaption) VirtualKeyBoardPolicy(val any) HtmlFigCaption {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Figure return a html <figure> element
func Figure() HtmlFigure {
	return &htmlFigure{htmlBaseElement: htmlBaseElement{tag: "figure"}}
}

// HtmlFigure represent a html <figure> element
type HtmlFigure interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlFigure

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlFigure

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlFigure

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlFigure

	// Id set element id attribute
	Id(val string) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlFigure

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlFigure

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlFigure

	// Text set val as text conent for current element
	Text(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlFigure

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlFigure
}

type htmlFigure struct {
	htmlBaseElement
}

func (p *htmlFigure) AccessKey(val any) HtmlFigure {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlFigure) AutoCapitalize(val any) HtmlFigure {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlFigure) AutoFocus(val any) HtmlFigure {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlFigure) Body(elems ...UI) HtmlFigure {
	p.setBody(elems...)
	return p
}

func (p *htmlFigure) Class(name string, items ...*Ref[StyleItem]) HtmlFigure {
	p.setClass(name, items...)
	return p
}

func (p *htmlFigure) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFigure {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlFigure) ContentEditAble(val any) HtmlFigure {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlFigure) DataWith(name string, val any) HtmlFigure {
	p.dataWith(name, val)
	return p
}

func (p *htmlFigure) Dir(val any) HtmlFigure {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlFigure) DraggAble(val any) HtmlFigure {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlFigure) EnterKeyHint(val any) HtmlFigure {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlFigure) Hidden(val any) HtmlFigure {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlFigure) Id(val string) HtmlFigure {
	p.SetUIElementId(val)
	return p
}

func (p *htmlFigure) Inert(val any) HtmlFigure {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlFigure) InputMode(val any) HtmlFigure {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlFigure) Is(val any) HtmlFigure {
	p.SetProperty("is", val)
	return p
}

func (p *htmlFigure) ItemId(val any) HtmlFigure {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlFigure) ItemProp(val any) HtmlFigure {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlFigure) ItemRef(val any) HtmlFigure {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlFigure) ItemScope(val any) HtmlFigure {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlFigure) ItemType(val any) HtmlFigure {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlFigure) Lang(val any) HtmlFigure {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlFigure) Nonce(val any) HtmlFigure {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlFigure) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlFigure) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlFigure) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlFigure) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlFigure) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlFigure) OnBlur(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlFigure) OnClick(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlFigure) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlFigure) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlFigure) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlFigure) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlFigure) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlFigure) OnCopy(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlFigure) OnCut(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlFigure) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlFigure) OnDrag(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlFigure) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlFigure) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlFigure) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlFigure) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlFigure) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlFigure) OnDrop(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlFigure) OnError(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlFigure) OnFocus(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlFigure) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlFigure) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlFigure) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlFigure) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlFigure) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlFigure) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlFigure) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlFigure) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlFigure) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlFigure) OnPaste(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlFigure) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlFigure) OnScroll(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlFigure) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlFigure) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlFigure) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlFigure) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlFigure) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlFigure) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlFigure) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlFigure) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlFigure) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlFigure) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlFigure) OnWheel(handler func(event Event, options ...any), options ...any) HtmlFigure {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlFigure) Part(val any) HtmlFigure {
	p.SetProperty("part", val)
	return p
}

func (p *htmlFigure) Slot(val any) HtmlFigure {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlFigure) SpellCheck(val any) HtmlFigure {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlFigure) Style(items ...*Ref[StyleItem]) HtmlFigure {
	p.setStyle(items...)
	return p
}

func (p *htmlFigure) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFigure {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlFigure) TabIndex(val any) HtmlFigure {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlFigure) Text(val any) HtmlFigure {
	p.setText(val)
	return p
}

func (p *htmlFigure) Title(val any) HtmlFigure {
	p.SetProperty("title", val)
	return p
}

func (p *htmlFigure) Translate(val any) HtmlFigure {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlFigure) VirtualKeyBoardPolicy(val any) HtmlFigure {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Footer return a html <footer> element
func Footer() HtmlFooter {
	return &htmlFooter{htmlBaseElement: htmlBaseElement{tag: "footer"}}
}

// HtmlFooter represent a html <footer> element
type HtmlFooter interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlFooter

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlFooter

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlFooter

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlFooter

	// Id set element id attribute
	Id(val string) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlFooter

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlFooter

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlFooter

	// Text set val as text conent for current element
	Text(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlFooter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlFooter
}

type htmlFooter struct {
	htmlBaseElement
}

func (p *htmlFooter) AccessKey(val any) HtmlFooter {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlFooter) AutoCapitalize(val any) HtmlFooter {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlFooter) AutoFocus(val any) HtmlFooter {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlFooter) Body(elems ...UI) HtmlFooter {
	p.setBody(elems...)
	return p
}

func (p *htmlFooter) Class(name string, items ...*Ref[StyleItem]) HtmlFooter {
	p.setClass(name, items...)
	return p
}

func (p *htmlFooter) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlFooter {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlFooter) ContentEditAble(val any) HtmlFooter {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlFooter) DataWith(name string, val any) HtmlFooter {
	p.dataWith(name, val)
	return p
}

func (p *htmlFooter) Dir(val any) HtmlFooter {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlFooter) DraggAble(val any) HtmlFooter {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlFooter) EnterKeyHint(val any) HtmlFooter {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlFooter) Hidden(val any) HtmlFooter {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlFooter) Id(val string) HtmlFooter {
	p.SetUIElementId(val)
	return p
}

func (p *htmlFooter) Inert(val any) HtmlFooter {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlFooter) InputMode(val any) HtmlFooter {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlFooter) Is(val any) HtmlFooter {
	p.SetProperty("is", val)
	return p
}

func (p *htmlFooter) ItemId(val any) HtmlFooter {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlFooter) ItemProp(val any) HtmlFooter {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlFooter) ItemRef(val any) HtmlFooter {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlFooter) ItemScope(val any) HtmlFooter {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlFooter) ItemType(val any) HtmlFooter {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlFooter) Lang(val any) HtmlFooter {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlFooter) Nonce(val any) HtmlFooter {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlFooter) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlFooter) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlFooter) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlFooter) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlFooter) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlFooter) OnBlur(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlFooter) OnClick(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlFooter) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlFooter) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlFooter) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlFooter) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlFooter) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlFooter) OnCopy(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlFooter) OnCut(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlFooter) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlFooter) OnDrag(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlFooter) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlFooter) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlFooter) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlFooter) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlFooter) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlFooter) OnDrop(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlFooter) OnError(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlFooter) OnFocus(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlFooter) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlFooter) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlFooter) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlFooter) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlFooter) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlFooter) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlFooter) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlFooter) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlFooter) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlFooter) OnPaste(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlFooter) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlFooter) OnScroll(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlFooter) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlFooter) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlFooter) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlFooter) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlFooter) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlFooter) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlFooter) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlFooter) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlFooter) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlFooter) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlFooter) OnWheel(handler func(event Event, options ...any), options ...any) HtmlFooter {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlFooter) Part(val any) HtmlFooter {
	p.SetProperty("part", val)
	return p
}

func (p *htmlFooter) Slot(val any) HtmlFooter {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlFooter) SpellCheck(val any) HtmlFooter {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlFooter) Style(items ...*Ref[StyleItem]) HtmlFooter {
	p.setStyle(items...)
	return p
}

func (p *htmlFooter) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlFooter {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlFooter) TabIndex(val any) HtmlFooter {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlFooter) Text(val any) HtmlFooter {
	p.setText(val)
	return p
}

func (p *htmlFooter) Title(val any) HtmlFooter {
	p.SetProperty("title", val)
	return p
}

func (p *htmlFooter) Translate(val any) HtmlFooter {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlFooter) VirtualKeyBoardPolicy(val any) HtmlFooter {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Form return a html <form> element
func Form() HtmlForm {
	return &htmlForm{htmlBaseElement: htmlBaseElement{tag: "form"}}
}

// HtmlForm represent a html <form> element
type HtmlForm interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action
	Action(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete
	AutoComplete(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlForm

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlForm

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlForm

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype
	Enctype(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlForm

	// Id set element id attribute
	Id(val string) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method
	Method(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-name
	Name(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate
	NoValidate(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-rel
	Rel(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlForm

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlForm

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target
	Target(val any) HtmlForm

	// Text set val as text conent for current element
	Text(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlForm

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlForm
}

type htmlForm struct {
	htmlBaseElement
}

func (p *htmlForm) AccessKey(val any) HtmlForm {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlForm) Action(val any) HtmlForm {
	p.SetProperty("action", val)
	return p
}

func (p *htmlForm) AutoCapitalize(val any) HtmlForm {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlForm) AutoComplete(val any) HtmlForm {
	p.SetProperty("autocomplete", val)
	return p
}

func (p *htmlForm) AutoFocus(val any) HtmlForm {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlForm) Body(elems ...UI) HtmlForm {
	p.setBody(elems...)
	return p
}

func (p *htmlForm) Class(name string, items ...*Ref[StyleItem]) HtmlForm {
	p.setClass(name, items...)
	return p
}

func (p *htmlForm) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlForm {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlForm) ContentEditAble(val any) HtmlForm {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlForm) DataWith(name string, val any) HtmlForm {
	p.dataWith(name, val)
	return p
}

func (p *htmlForm) Dir(val any) HtmlForm {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlForm) DraggAble(val any) HtmlForm {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlForm) Enctype(val any) HtmlForm {
	p.SetProperty("enctype", val)
	return p
}

func (p *htmlForm) EnterKeyHint(val any) HtmlForm {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlForm) Hidden(val any) HtmlForm {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlForm) Id(val string) HtmlForm {
	p.SetUIElementId(val)
	return p
}

func (p *htmlForm) Inert(val any) HtmlForm {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlForm) InputMode(val any) HtmlForm {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlForm) Is(val any) HtmlForm {
	p.SetProperty("is", val)
	return p
}

func (p *htmlForm) ItemId(val any) HtmlForm {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlForm) ItemProp(val any) HtmlForm {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlForm) ItemRef(val any) HtmlForm {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlForm) ItemScope(val any) HtmlForm {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlForm) ItemType(val any) HtmlForm {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlForm) Lang(val any) HtmlForm {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlForm) Method(val any) HtmlForm {
	p.SetProperty("method", val)
	return p
}

func (p *htmlForm) Name(val any) HtmlForm {
	p.SetProperty("name", val)
	return p
}

func (p *htmlForm) Nonce(val any) HtmlForm {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlForm) NoValidate(val any) HtmlForm {
	p.SetProperty("novalidate", val)
	return p
}

func (p *htmlForm) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlForm) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlForm) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlForm) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlForm) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlForm) OnBlur(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlForm) OnClick(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlForm) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlForm) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlForm) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlForm) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlForm) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlForm) OnCopy(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlForm) OnCut(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlForm) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlForm) OnDrag(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlForm) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlForm) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlForm) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlForm) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlForm) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlForm) OnDrop(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlForm) OnError(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlForm) OnFocus(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlForm) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlForm) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlForm) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlForm) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlForm) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlForm) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlForm) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlForm) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlForm) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlForm) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlForm) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlForm) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlForm) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlForm) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlForm) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlForm) OnPaste(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlForm) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlForm) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlForm) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlForm) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlForm) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlForm) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlForm) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlForm) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlForm) OnScroll(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlForm) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlForm) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlForm) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlForm) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlForm) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlForm) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlForm) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlForm) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlForm) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlForm) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlForm) OnWheel(handler func(event Event, options ...any), options ...any) HtmlForm {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlForm) Part(val any) HtmlForm {
	p.SetProperty("part", val)
	return p
}

func (p *htmlForm) Rel(val any) HtmlForm {
	p.SetProperty("rel", val)
	return p
}

func (p *htmlForm) Slot(val any) HtmlForm {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlForm) SpellCheck(val any) HtmlForm {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlForm) Style(items ...*Ref[StyleItem]) HtmlForm {
	p.setStyle(items...)
	return p
}

func (p *htmlForm) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlForm {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlForm) TabIndex(val any) HtmlForm {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlForm) Target(val any) HtmlForm {
	p.SetProperty("target", val)
	return p
}

func (p *htmlForm) Text(val any) HtmlForm {
	p.setText(val)
	return p
}

func (p *htmlForm) Title(val any) HtmlForm {
	p.SetProperty("title", val)
	return p
}

func (p *htmlForm) Translate(val any) HtmlForm {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlForm) VirtualKeyBoardPolicy(val any) HtmlForm {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H1 return a html <h1> element
func H1() HtmlH1 {
	return &htmlH1{htmlBaseElement: htmlBaseElement{tag: "h1"}}
}

// HtmlH1 represent a html <h1> element
type HtmlH1 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH1

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH1

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH1

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH1

	// Id set element id attribute
	Id(val string) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH1

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH1

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH1

	// Text set val as text conent for current element
	Text(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH1

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH1
}

type htmlH1 struct {
	htmlBaseElement
}

func (p *htmlH1) AccessKey(val any) HtmlH1 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH1) AutoCapitalize(val any) HtmlH1 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH1) AutoFocus(val any) HtmlH1 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH1) Body(elems ...UI) HtmlH1 {
	p.setBody(elems...)
	return p
}

func (p *htmlH1) Class(name string, items ...*Ref[StyleItem]) HtmlH1 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH1) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH1 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH1) ContentEditAble(val any) HtmlH1 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH1) DataWith(name string, val any) HtmlH1 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH1) Dir(val any) HtmlH1 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH1) DraggAble(val any) HtmlH1 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH1) EnterKeyHint(val any) HtmlH1 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH1) Hidden(val any) HtmlH1 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH1) Id(val string) HtmlH1 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH1) Inert(val any) HtmlH1 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH1) InputMode(val any) HtmlH1 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH1) Is(val any) HtmlH1 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH1) ItemId(val any) HtmlH1 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH1) ItemProp(val any) HtmlH1 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH1) ItemRef(val any) HtmlH1 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH1) ItemScope(val any) HtmlH1 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH1) ItemType(val any) HtmlH1 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH1) Lang(val any) HtmlH1 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH1) Nonce(val any) HtmlH1 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH1) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH1) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH1) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH1) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH1) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH1) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH1) OnClick(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH1) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH1) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH1) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH1) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH1) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH1) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH1) OnCut(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH1) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH1) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH1) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH1) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH1) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH1) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH1) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH1) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH1) OnError(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH1) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH1) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH1) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH1) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH1) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH1) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH1) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH1) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH1) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH1) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH1) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH1) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH1) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH1) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH1) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH1) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH1) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH1) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH1) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH1) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH1) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH1) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH1) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH1) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH1) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH1) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH1) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH1) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH1) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH1) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH1) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH1) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH1) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH1) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH1) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH1) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH1) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH1 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH1) Part(val any) HtmlH1 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH1) Slot(val any) HtmlH1 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH1) SpellCheck(val any) HtmlH1 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH1) Style(items ...*Ref[StyleItem]) HtmlH1 {
	p.setStyle(items...)
	return p
}

func (p *htmlH1) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH1 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH1) TabIndex(val any) HtmlH1 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH1) Text(val any) HtmlH1 {
	p.setText(val)
	return p
}

func (p *htmlH1) Title(val any) HtmlH1 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH1) Translate(val any) HtmlH1 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH1) VirtualKeyBoardPolicy(val any) HtmlH1 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H2 return a html <h2> element
func H2() HtmlH2 {
	return &htmlH2{htmlBaseElement: htmlBaseElement{tag: "h2"}}
}

// HtmlH2 represent a html <h2> element
type HtmlH2 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH2

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH2

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH2

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH2

	// Id set element id attribute
	Id(val string) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH2

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH2

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH2

	// Text set val as text conent for current element
	Text(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH2

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH2
}

type htmlH2 struct {
	htmlBaseElement
}

func (p *htmlH2) AccessKey(val any) HtmlH2 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH2) AutoCapitalize(val any) HtmlH2 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH2) AutoFocus(val any) HtmlH2 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH2) Body(elems ...UI) HtmlH2 {
	p.setBody(elems...)
	return p
}

func (p *htmlH2) Class(name string, items ...*Ref[StyleItem]) HtmlH2 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH2) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH2 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH2) ContentEditAble(val any) HtmlH2 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH2) DataWith(name string, val any) HtmlH2 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH2) Dir(val any) HtmlH2 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH2) DraggAble(val any) HtmlH2 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH2) EnterKeyHint(val any) HtmlH2 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH2) Hidden(val any) HtmlH2 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH2) Id(val string) HtmlH2 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH2) Inert(val any) HtmlH2 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH2) InputMode(val any) HtmlH2 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH2) Is(val any) HtmlH2 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH2) ItemId(val any) HtmlH2 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH2) ItemProp(val any) HtmlH2 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH2) ItemRef(val any) HtmlH2 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH2) ItemScope(val any) HtmlH2 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH2) ItemType(val any) HtmlH2 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH2) Lang(val any) HtmlH2 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH2) Nonce(val any) HtmlH2 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH2) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH2) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH2) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH2) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH2) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH2) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH2) OnClick(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH2) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH2) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH2) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH2) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH2) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH2) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH2) OnCut(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH2) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH2) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH2) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH2) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH2) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH2) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH2) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH2) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH2) OnError(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH2) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH2) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH2) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH2) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH2) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH2) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH2) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH2) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH2) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH2) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH2) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH2) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH2) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH2) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH2) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH2) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH2) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH2) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH2) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH2) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH2) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH2) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH2) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH2) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH2) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH2) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH2) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH2) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH2) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH2) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH2) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH2) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH2) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH2) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH2) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH2) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH2) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH2 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH2) Part(val any) HtmlH2 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH2) Slot(val any) HtmlH2 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH2) SpellCheck(val any) HtmlH2 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH2) Style(items ...*Ref[StyleItem]) HtmlH2 {
	p.setStyle(items...)
	return p
}

func (p *htmlH2) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH2 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH2) TabIndex(val any) HtmlH2 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH2) Text(val any) HtmlH2 {
	p.setText(val)
	return p
}

func (p *htmlH2) Title(val any) HtmlH2 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH2) Translate(val any) HtmlH2 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH2) VirtualKeyBoardPolicy(val any) HtmlH2 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H3 return a html <h3> element
func H3() HtmlH3 {
	return &htmlH3{htmlBaseElement: htmlBaseElement{tag: "h3"}}
}

// HtmlH3 represent a html <h3> element
type HtmlH3 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH3

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH3

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH3

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH3

	// Id set element id attribute
	Id(val string) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH3

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH3

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH3

	// Text set val as text conent for current element
	Text(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH3

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH3
}

type htmlH3 struct {
	htmlBaseElement
}

func (p *htmlH3) AccessKey(val any) HtmlH3 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH3) AutoCapitalize(val any) HtmlH3 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH3) AutoFocus(val any) HtmlH3 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH3) Body(elems ...UI) HtmlH3 {
	p.setBody(elems...)
	return p
}

func (p *htmlH3) Class(name string, items ...*Ref[StyleItem]) HtmlH3 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH3) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH3 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH3) ContentEditAble(val any) HtmlH3 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH3) DataWith(name string, val any) HtmlH3 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH3) Dir(val any) HtmlH3 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH3) DraggAble(val any) HtmlH3 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH3) EnterKeyHint(val any) HtmlH3 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH3) Hidden(val any) HtmlH3 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH3) Id(val string) HtmlH3 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH3) Inert(val any) HtmlH3 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH3) InputMode(val any) HtmlH3 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH3) Is(val any) HtmlH3 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH3) ItemId(val any) HtmlH3 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH3) ItemProp(val any) HtmlH3 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH3) ItemRef(val any) HtmlH3 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH3) ItemScope(val any) HtmlH3 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH3) ItemType(val any) HtmlH3 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH3) Lang(val any) HtmlH3 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH3) Nonce(val any) HtmlH3 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH3) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH3) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH3) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH3) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH3) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH3) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH3) OnClick(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH3) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH3) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH3) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH3) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH3) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH3) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH3) OnCut(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH3) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH3) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH3) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH3) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH3) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH3) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH3) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH3) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH3) OnError(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH3) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH3) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH3) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH3) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH3) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH3) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH3) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH3) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH3) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH3) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH3) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH3) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH3) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH3) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH3) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH3) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH3) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH3) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH3) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH3) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH3) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH3) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH3) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH3) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH3) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH3) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH3) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH3) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH3) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH3) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH3) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH3) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH3) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH3) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH3) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH3) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH3) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH3 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH3) Part(val any) HtmlH3 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH3) Slot(val any) HtmlH3 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH3) SpellCheck(val any) HtmlH3 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH3) Style(items ...*Ref[StyleItem]) HtmlH3 {
	p.setStyle(items...)
	return p
}

func (p *htmlH3) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH3 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH3) TabIndex(val any) HtmlH3 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH3) Text(val any) HtmlH3 {
	p.setText(val)
	return p
}

func (p *htmlH3) Title(val any) HtmlH3 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH3) Translate(val any) HtmlH3 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH3) VirtualKeyBoardPolicy(val any) HtmlH3 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H4 return a html <h4> element
func H4() HtmlH4 {
	return &htmlH4{htmlBaseElement: htmlBaseElement{tag: "h4"}}
}

// HtmlH4 represent a html <h4> element
type HtmlH4 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH4

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH4

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH4

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH4

	// Id set element id attribute
	Id(val string) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH4

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH4

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH4

	// Text set val as text conent for current element
	Text(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH4

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH4
}

type htmlH4 struct {
	htmlBaseElement
}

func (p *htmlH4) AccessKey(val any) HtmlH4 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH4) AutoCapitalize(val any) HtmlH4 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH4) AutoFocus(val any) HtmlH4 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH4) Body(elems ...UI) HtmlH4 {
	p.setBody(elems...)
	return p
}

func (p *htmlH4) Class(name string, items ...*Ref[StyleItem]) HtmlH4 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH4) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH4 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH4) ContentEditAble(val any) HtmlH4 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH4) DataWith(name string, val any) HtmlH4 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH4) Dir(val any) HtmlH4 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH4) DraggAble(val any) HtmlH4 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH4) EnterKeyHint(val any) HtmlH4 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH4) Hidden(val any) HtmlH4 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH4) Id(val string) HtmlH4 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH4) Inert(val any) HtmlH4 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH4) InputMode(val any) HtmlH4 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH4) Is(val any) HtmlH4 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH4) ItemId(val any) HtmlH4 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH4) ItemProp(val any) HtmlH4 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH4) ItemRef(val any) HtmlH4 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH4) ItemScope(val any) HtmlH4 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH4) ItemType(val any) HtmlH4 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH4) Lang(val any) HtmlH4 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH4) Nonce(val any) HtmlH4 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH4) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH4) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH4) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH4) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH4) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH4) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH4) OnClick(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH4) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH4) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH4) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH4) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH4) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH4) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH4) OnCut(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH4) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH4) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH4) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH4) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH4) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH4) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH4) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH4) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH4) OnError(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH4) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH4) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH4) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH4) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH4) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH4) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH4) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH4) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH4) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH4) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH4) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH4) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH4) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH4) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH4) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH4) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH4) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH4) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH4) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH4) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH4) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH4) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH4) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH4) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH4) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH4) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH4) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH4) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH4) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH4) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH4) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH4) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH4) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH4) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH4) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH4) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH4) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH4 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH4) Part(val any) HtmlH4 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH4) Slot(val any) HtmlH4 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH4) SpellCheck(val any) HtmlH4 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH4) Style(items ...*Ref[StyleItem]) HtmlH4 {
	p.setStyle(items...)
	return p
}

func (p *htmlH4) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH4 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH4) TabIndex(val any) HtmlH4 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH4) Text(val any) HtmlH4 {
	p.setText(val)
	return p
}

func (p *htmlH4) Title(val any) HtmlH4 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH4) Translate(val any) HtmlH4 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH4) VirtualKeyBoardPolicy(val any) HtmlH4 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H5 return a html <h5> element
func H5() HtmlH5 {
	return &htmlH5{htmlBaseElement: htmlBaseElement{tag: "h5"}}
}

// HtmlH5 represent a html <h5> element
type HtmlH5 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH5

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH5

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH5

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH5

	// Id set element id attribute
	Id(val string) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH5

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH5

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH5

	// Text set val as text conent for current element
	Text(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH5

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH5
}

type htmlH5 struct {
	htmlBaseElement
}

func (p *htmlH5) AccessKey(val any) HtmlH5 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH5) AutoCapitalize(val any) HtmlH5 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH5) AutoFocus(val any) HtmlH5 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH5) Body(elems ...UI) HtmlH5 {
	p.setBody(elems...)
	return p
}

func (p *htmlH5) Class(name string, items ...*Ref[StyleItem]) HtmlH5 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH5) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH5 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH5) ContentEditAble(val any) HtmlH5 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH5) DataWith(name string, val any) HtmlH5 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH5) Dir(val any) HtmlH5 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH5) DraggAble(val any) HtmlH5 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH5) EnterKeyHint(val any) HtmlH5 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH5) Hidden(val any) HtmlH5 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH5) Id(val string) HtmlH5 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH5) Inert(val any) HtmlH5 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH5) InputMode(val any) HtmlH5 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH5) Is(val any) HtmlH5 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH5) ItemId(val any) HtmlH5 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH5) ItemProp(val any) HtmlH5 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH5) ItemRef(val any) HtmlH5 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH5) ItemScope(val any) HtmlH5 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH5) ItemType(val any) HtmlH5 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH5) Lang(val any) HtmlH5 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH5) Nonce(val any) HtmlH5 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH5) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH5) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH5) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH5) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH5) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH5) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH5) OnClick(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH5) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH5) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH5) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH5) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH5) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH5) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH5) OnCut(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH5) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH5) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH5) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH5) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH5) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH5) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH5) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH5) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH5) OnError(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH5) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH5) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH5) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH5) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH5) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH5) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH5) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH5) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH5) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH5) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH5) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH5) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH5) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH5) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH5) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH5) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH5) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH5) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH5) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH5) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH5) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH5) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH5) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH5) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH5) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH5) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH5) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH5) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH5) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH5) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH5) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH5) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH5) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH5) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH5) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH5) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH5) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH5 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH5) Part(val any) HtmlH5 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH5) Slot(val any) HtmlH5 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH5) SpellCheck(val any) HtmlH5 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH5) Style(items ...*Ref[StyleItem]) HtmlH5 {
	p.setStyle(items...)
	return p
}

func (p *htmlH5) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH5 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH5) TabIndex(val any) HtmlH5 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH5) Text(val any) HtmlH5 {
	p.setText(val)
	return p
}

func (p *htmlH5) Title(val any) HtmlH5 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH5) Translate(val any) HtmlH5 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH5) VirtualKeyBoardPolicy(val any) HtmlH5 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// H6 return a html <h6> element
func H6() HtmlH6 {
	return &htmlH6{htmlBaseElement: htmlBaseElement{tag: "h6"}}
}

// HtmlH6 represent a html <h6> element
type HtmlH6 interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlH6

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlH6

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlH6

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlH6

	// Id set element id attribute
	Id(val string) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlH6

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlH6

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlH6

	// Text set val as text conent for current element
	Text(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlH6

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlH6
}

type htmlH6 struct {
	htmlBaseElement
}

func (p *htmlH6) AccessKey(val any) HtmlH6 {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlH6) AutoCapitalize(val any) HtmlH6 {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlH6) AutoFocus(val any) HtmlH6 {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlH6) Body(elems ...UI) HtmlH6 {
	p.setBody(elems...)
	return p
}

func (p *htmlH6) Class(name string, items ...*Ref[StyleItem]) HtmlH6 {
	p.setClass(name, items...)
	return p
}

func (p *htmlH6) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlH6 {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlH6) ContentEditAble(val any) HtmlH6 {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlH6) DataWith(name string, val any) HtmlH6 {
	p.dataWith(name, val)
	return p
}

func (p *htmlH6) Dir(val any) HtmlH6 {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlH6) DraggAble(val any) HtmlH6 {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlH6) EnterKeyHint(val any) HtmlH6 {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlH6) Hidden(val any) HtmlH6 {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlH6) Id(val string) HtmlH6 {
	p.SetUIElementId(val)
	return p
}

func (p *htmlH6) Inert(val any) HtmlH6 {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlH6) InputMode(val any) HtmlH6 {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlH6) Is(val any) HtmlH6 {
	p.SetProperty("is", val)
	return p
}

func (p *htmlH6) ItemId(val any) HtmlH6 {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlH6) ItemProp(val any) HtmlH6 {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlH6) ItemRef(val any) HtmlH6 {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlH6) ItemScope(val any) HtmlH6 {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlH6) ItemType(val any) HtmlH6 {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlH6) Lang(val any) HtmlH6 {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlH6) Nonce(val any) HtmlH6 {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlH6) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlH6) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlH6) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlH6) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlH6) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlH6) OnBlur(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlH6) OnClick(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlH6) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlH6) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlH6) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlH6) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlH6) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlH6) OnCopy(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlH6) OnCut(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlH6) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlH6) OnDrag(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlH6) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlH6) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlH6) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlH6) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlH6) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlH6) OnDrop(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlH6) OnError(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlH6) OnFocus(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlH6) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlH6) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlH6) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlH6) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlH6) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlH6) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlH6) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlH6) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlH6) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlH6) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlH6) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlH6) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlH6) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlH6) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlH6) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlH6) OnPaste(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlH6) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlH6) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlH6) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlH6) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlH6) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlH6) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlH6) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlH6) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlH6) OnScroll(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlH6) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlH6) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlH6) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlH6) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlH6) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlH6) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlH6) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlH6) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlH6) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlH6) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlH6) OnWheel(handler func(event Event, options ...any), options ...any) HtmlH6 {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlH6) Part(val any) HtmlH6 {
	p.SetProperty("part", val)
	return p
}

func (p *htmlH6) Slot(val any) HtmlH6 {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlH6) SpellCheck(val any) HtmlH6 {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlH6) Style(items ...*Ref[StyleItem]) HtmlH6 {
	p.setStyle(items...)
	return p
}

func (p *htmlH6) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlH6 {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlH6) TabIndex(val any) HtmlH6 {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlH6) Text(val any) HtmlH6 {
	p.setText(val)
	return p
}

func (p *htmlH6) Title(val any) HtmlH6 {
	p.SetProperty("title", val)
	return p
}

func (p *htmlH6) Translate(val any) HtmlH6 {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlH6) VirtualKeyBoardPolicy(val any) HtmlH6 {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Head return a html <head> element
func Head() HtmlHead {
	return &htmlHead{htmlBaseElement: htmlBaseElement{tag: "head"}}
}

// HtmlHead represent a html <head> element
type HtmlHead interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHead

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHead

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHead

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHead

	// Id set element id attribute
	Id(val string) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHead

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHead

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHead

	// Text set val as text conent for current element
	Text(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHead
}

type htmlHead struct {
	htmlBaseElement
}

func (p *htmlHead) AccessKey(val any) HtmlHead {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHead) AutoCapitalize(val any) HtmlHead {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHead) AutoFocus(val any) HtmlHead {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHead) Body(elems ...UI) HtmlHead {
	p.setBody(elems...)
	return p
}

func (p *htmlHead) Class(name string, items ...*Ref[StyleItem]) HtmlHead {
	p.setClass(name, items...)
	return p
}

func (p *htmlHead) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHead {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHead) ContentEditAble(val any) HtmlHead {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHead) DataWith(name string, val any) HtmlHead {
	p.dataWith(name, val)
	return p
}

func (p *htmlHead) Dir(val any) HtmlHead {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHead) DraggAble(val any) HtmlHead {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHead) EnterKeyHint(val any) HtmlHead {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHead) Hidden(val any) HtmlHead {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHead) Id(val string) HtmlHead {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHead) Inert(val any) HtmlHead {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHead) InputMode(val any) HtmlHead {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHead) Is(val any) HtmlHead {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHead) ItemId(val any) HtmlHead {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHead) ItemProp(val any) HtmlHead {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHead) ItemRef(val any) HtmlHead {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHead) ItemScope(val any) HtmlHead {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHead) ItemType(val any) HtmlHead {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHead) Lang(val any) HtmlHead {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHead) Nonce(val any) HtmlHead {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHead) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHead) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHead) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHead) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHead) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHead) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHead) OnClick(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHead) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHead) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHead) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHead) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHead) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHead) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHead) OnCut(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHead) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHead) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHead) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHead) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHead) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHead) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHead) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHead) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHead) OnError(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHead) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHead) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHead) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHead) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHead) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHead) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHead) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHead) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHead) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHead) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHead) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHead) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHead) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHead) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHead) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHead) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHead) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHead) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHead) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHead) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHead) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHead) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHead) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHead) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHead) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHead) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHead) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHead) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHead) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHead) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHead) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHead) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHead) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHead) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHead) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHead) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHead) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHead {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHead) Part(val any) HtmlHead {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHead) Slot(val any) HtmlHead {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHead) SpellCheck(val any) HtmlHead {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHead) Style(items ...*Ref[StyleItem]) HtmlHead {
	p.setStyle(items...)
	return p
}

func (p *htmlHead) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHead {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHead) TabIndex(val any) HtmlHead {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHead) Text(val any) HtmlHead {
	p.setText(val)
	return p
}

func (p *htmlHead) Title(val any) HtmlHead {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHead) Translate(val any) HtmlHead {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHead) VirtualKeyBoardPolicy(val any) HtmlHead {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Header return a html <header> element
func Header() HtmlHeader {
	return &htmlHeader{htmlBaseElement: htmlBaseElement{tag: "header"}}
}

// HtmlHeader represent a html <header> element
type HtmlHeader interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHeader

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHeader

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHeader

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHeader

	// Id set element id attribute
	Id(val string) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHeader

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHeader

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHeader

	// Text set val as text conent for current element
	Text(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHeader

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHeader
}

type htmlHeader struct {
	htmlBaseElement
}

func (p *htmlHeader) AccessKey(val any) HtmlHeader {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHeader) AutoCapitalize(val any) HtmlHeader {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHeader) AutoFocus(val any) HtmlHeader {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHeader) Body(elems ...UI) HtmlHeader {
	p.setBody(elems...)
	return p
}

func (p *htmlHeader) Class(name string, items ...*Ref[StyleItem]) HtmlHeader {
	p.setClass(name, items...)
	return p
}

func (p *htmlHeader) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHeader {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHeader) ContentEditAble(val any) HtmlHeader {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHeader) DataWith(name string, val any) HtmlHeader {
	p.dataWith(name, val)
	return p
}

func (p *htmlHeader) Dir(val any) HtmlHeader {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHeader) DraggAble(val any) HtmlHeader {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHeader) EnterKeyHint(val any) HtmlHeader {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHeader) Hidden(val any) HtmlHeader {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHeader) Id(val string) HtmlHeader {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHeader) Inert(val any) HtmlHeader {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHeader) InputMode(val any) HtmlHeader {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHeader) Is(val any) HtmlHeader {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHeader) ItemId(val any) HtmlHeader {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHeader) ItemProp(val any) HtmlHeader {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHeader) ItemRef(val any) HtmlHeader {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHeader) ItemScope(val any) HtmlHeader {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHeader) ItemType(val any) HtmlHeader {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHeader) Lang(val any) HtmlHeader {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHeader) Nonce(val any) HtmlHeader {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHeader) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHeader) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHeader) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHeader) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHeader) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHeader) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHeader) OnClick(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHeader) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHeader) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHeader) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHeader) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHeader) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHeader) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHeader) OnCut(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHeader) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHeader) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHeader) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHeader) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHeader) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHeader) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHeader) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHeader) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHeader) OnError(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHeader) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHeader) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHeader) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHeader) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHeader) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHeader) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHeader) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHeader) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHeader) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHeader) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHeader) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHeader) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHeader) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHeader) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHeader) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHeader) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHeader) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHeader) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHeader) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHeader) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHeader) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHeader) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHeader) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHeader) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHeader {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHeader) Part(val any) HtmlHeader {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHeader) Slot(val any) HtmlHeader {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHeader) SpellCheck(val any) HtmlHeader {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHeader) Style(items ...*Ref[StyleItem]) HtmlHeader {
	p.setStyle(items...)
	return p
}

func (p *htmlHeader) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHeader {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHeader) TabIndex(val any) HtmlHeader {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHeader) Text(val any) HtmlHeader {
	p.setText(val)
	return p
}

func (p *htmlHeader) Title(val any) HtmlHeader {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHeader) Translate(val any) HtmlHeader {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHeader) VirtualKeyBoardPolicy(val any) HtmlHeader {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// HGroup return a html <hgroup> element
func HGroup() HtmlHGroup {
	return &htmlHGroup{htmlBaseElement: htmlBaseElement{tag: "hgroup"}}
}

// HtmlHGroup represent a html <hgroup> element
type HtmlHGroup interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHGroup

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHGroup

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHGroup

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHGroup

	// Id set element id attribute
	Id(val string) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHGroup

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHGroup

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHGroup

	// Text set val as text conent for current element
	Text(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHGroup
}

type htmlHGroup struct {
	htmlBaseElement
}

func (p *htmlHGroup) AccessKey(val any) HtmlHGroup {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHGroup) AutoCapitalize(val any) HtmlHGroup {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHGroup) AutoFocus(val any) HtmlHGroup {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHGroup) Body(elems ...UI) HtmlHGroup {
	p.setBody(elems...)
	return p
}

func (p *htmlHGroup) Class(name string, items ...*Ref[StyleItem]) HtmlHGroup {
	p.setClass(name, items...)
	return p
}

func (p *htmlHGroup) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHGroup {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHGroup) ContentEditAble(val any) HtmlHGroup {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHGroup) DataWith(name string, val any) HtmlHGroup {
	p.dataWith(name, val)
	return p
}

func (p *htmlHGroup) Dir(val any) HtmlHGroup {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHGroup) DraggAble(val any) HtmlHGroup {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHGroup) EnterKeyHint(val any) HtmlHGroup {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHGroup) Hidden(val any) HtmlHGroup {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHGroup) Id(val string) HtmlHGroup {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHGroup) Inert(val any) HtmlHGroup {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHGroup) InputMode(val any) HtmlHGroup {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHGroup) Is(val any) HtmlHGroup {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHGroup) ItemId(val any) HtmlHGroup {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHGroup) ItemProp(val any) HtmlHGroup {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHGroup) ItemRef(val any) HtmlHGroup {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHGroup) ItemScope(val any) HtmlHGroup {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHGroup) ItemType(val any) HtmlHGroup {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHGroup) Lang(val any) HtmlHGroup {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHGroup) Nonce(val any) HtmlHGroup {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHGroup) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHGroup) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHGroup) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHGroup) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHGroup) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHGroup) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHGroup) OnClick(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHGroup) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHGroup) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHGroup) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHGroup) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHGroup) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHGroup) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHGroup) OnCut(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHGroup) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHGroup) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHGroup) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHGroup) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHGroup) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHGroup) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHGroup) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHGroup) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHGroup) OnError(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHGroup) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHGroup) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHGroup) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHGroup) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHGroup) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHGroup) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHGroup) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHGroup) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHGroup) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHGroup) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHGroup) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHGroup) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHGroup) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHGroup) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHGroup) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHGroup) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHGroup) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHGroup) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHGroup) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHGroup) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHGroup) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHGroup) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHGroup) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHGroup) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHGroup {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHGroup) Part(val any) HtmlHGroup {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHGroup) Slot(val any) HtmlHGroup {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHGroup) SpellCheck(val any) HtmlHGroup {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHGroup) Style(items ...*Ref[StyleItem]) HtmlHGroup {
	p.setStyle(items...)
	return p
}

func (p *htmlHGroup) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHGroup {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHGroup) TabIndex(val any) HtmlHGroup {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHGroup) Text(val any) HtmlHGroup {
	p.setText(val)
	return p
}

func (p *htmlHGroup) Title(val any) HtmlHGroup {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHGroup) Translate(val any) HtmlHGroup {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHGroup) VirtualKeyBoardPolicy(val any) HtmlHGroup {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Hr return a html <hr> element
func Hr() HtmlHr {
	return &htmlHr{htmlBaseElement: htmlBaseElement{tag: "hr"}}
}

// HtmlHr represent a html <hr> element
type HtmlHr interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHr

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHr

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHr

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHr

	// Id set element id attribute
	Id(val string) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHr

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHr

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHr

	// Text set val as text conent for current element
	Text(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHr
}

type htmlHr struct {
	htmlBaseElement
}

func (p *htmlHr) AccessKey(val any) HtmlHr {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHr) AutoCapitalize(val any) HtmlHr {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHr) AutoFocus(val any) HtmlHr {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHr) Body(elems ...UI) HtmlHr {
	p.setBody(elems...)
	return p
}

func (p *htmlHr) Class(name string, items ...*Ref[StyleItem]) HtmlHr {
	p.setClass(name, items...)
	return p
}

func (p *htmlHr) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHr {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHr) ContentEditAble(val any) HtmlHr {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHr) DataWith(name string, val any) HtmlHr {
	p.dataWith(name, val)
	return p
}

func (p *htmlHr) Dir(val any) HtmlHr {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHr) DraggAble(val any) HtmlHr {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHr) EnterKeyHint(val any) HtmlHr {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHr) Hidden(val any) HtmlHr {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHr) Id(val string) HtmlHr {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHr) Inert(val any) HtmlHr {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHr) InputMode(val any) HtmlHr {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHr) Is(val any) HtmlHr {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHr) ItemId(val any) HtmlHr {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHr) ItemProp(val any) HtmlHr {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHr) ItemRef(val any) HtmlHr {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHr) ItemScope(val any) HtmlHr {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHr) ItemType(val any) HtmlHr {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHr) Lang(val any) HtmlHr {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHr) Nonce(val any) HtmlHr {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHr) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHr) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHr) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHr) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHr) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHr) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHr) OnClick(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHr) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHr) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHr) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHr) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHr) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHr) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHr) OnCut(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHr) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHr) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHr) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHr) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHr) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHr) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHr) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHr) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHr) OnError(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHr) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHr) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHr) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHr) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHr) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHr) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHr) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHr) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHr) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHr) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHr) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHr) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHr) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHr) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHr) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHr) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHr) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHr) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHr) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHr) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHr) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHr) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHr) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHr) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHr) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHr) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHr) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHr) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHr) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHr) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHr) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHr) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHr) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHr) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHr) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHr) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHr) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHr {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHr) Part(val any) HtmlHr {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHr) Slot(val any) HtmlHr {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHr) SpellCheck(val any) HtmlHr {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHr) Style(items ...*Ref[StyleItem]) HtmlHr {
	p.setStyle(items...)
	return p
}

func (p *htmlHr) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHr {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHr) TabIndex(val any) HtmlHr {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHr) Text(val any) HtmlHr {
	p.setText(val)
	return p
}

func (p *htmlHr) Title(val any) HtmlHr {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHr) Translate(val any) HtmlHr {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHr) VirtualKeyBoardPolicy(val any) HtmlHr {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Html return a html <html> element
func Html() HtmlHtml {
	return &htmlHtml{htmlBaseElement: htmlBaseElement{tag: "html"}}
}

// HtmlHtml represent a html <html> element
type HtmlHtml interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHtml

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHtml

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHtml

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHtml

	// Id set element id attribute
	Id(val string) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHtml

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHtml

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHtml

	// Text set val as text conent for current element
	Text(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHtml

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html#attr-xmlns
	Xmlns(val any) HtmlHtml
}

type htmlHtml struct {
	htmlBaseElement
}

func (p *htmlHtml) AccessKey(val any) HtmlHtml {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHtml) AutoCapitalize(val any) HtmlHtml {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHtml) AutoFocus(val any) HtmlHtml {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHtml) Body(elems ...UI) HtmlHtml {
	p.setBody(elems...)
	return p
}

func (p *htmlHtml) Class(name string, items ...*Ref[StyleItem]) HtmlHtml {
	p.setClass(name, items...)
	return p
}

func (p *htmlHtml) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHtml {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHtml) ContentEditAble(val any) HtmlHtml {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHtml) DataWith(name string, val any) HtmlHtml {
	p.dataWith(name, val)
	return p
}

func (p *htmlHtml) Dir(val any) HtmlHtml {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHtml) DraggAble(val any) HtmlHtml {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHtml) EnterKeyHint(val any) HtmlHtml {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHtml) Hidden(val any) HtmlHtml {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHtml) Id(val string) HtmlHtml {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHtml) Inert(val any) HtmlHtml {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHtml) InputMode(val any) HtmlHtml {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHtml) Is(val any) HtmlHtml {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHtml) ItemId(val any) HtmlHtml {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHtml) ItemProp(val any) HtmlHtml {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHtml) ItemRef(val any) HtmlHtml {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHtml) ItemScope(val any) HtmlHtml {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHtml) ItemType(val any) HtmlHtml {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHtml) Lang(val any) HtmlHtml {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHtml) Nonce(val any) HtmlHtml {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHtml) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHtml) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHtml) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHtml) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHtml) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHtml) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHtml) OnClick(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHtml) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHtml) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHtml) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHtml) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHtml) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHtml) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHtml) OnCut(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHtml) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHtml) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHtml) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHtml) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHtml) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHtml) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHtml) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHtml) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHtml) OnError(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHtml) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHtml) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHtml) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHtml) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHtml) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHtml) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHtml) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHtml) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHtml) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHtml) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHtml) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHtml) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHtml) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHtml) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHtml) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHtml) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHtml) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHtml) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHtml) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHtml) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHtml) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHtml) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHtml) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHtml) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHtml {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHtml) Part(val any) HtmlHtml {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHtml) Slot(val any) HtmlHtml {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHtml) SpellCheck(val any) HtmlHtml {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHtml) Style(items ...*Ref[StyleItem]) HtmlHtml {
	p.setStyle(items...)
	return p
}

func (p *htmlHtml) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHtml {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHtml) TabIndex(val any) HtmlHtml {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHtml) Text(val any) HtmlHtml {
	p.setText(val)
	return p
}

func (p *htmlHtml) Title(val any) HtmlHtml {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHtml) Translate(val any) HtmlHtml {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHtml) VirtualKeyBoardPolicy(val any) HtmlHtml {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlHtml) Xmlns(val any) HtmlHtml {
	p.SetProperty("xmlns", val)
	return p
}

// I return a html <i> element
func I() HtmlI {
	return &htmlI{htmlBaseElement: htmlBaseElement{tag: "i"}}
}

// HtmlI represent a html <i> element
type HtmlI interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlI

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlI

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlI

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlI

	// Id set element id attribute
	Id(val string) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlI

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlI

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlI

	// Text set val as text conent for current element
	Text(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlI
}

type htmlI struct {
	htmlBaseElement
}

func (p *htmlI) AccessKey(val any) HtmlI {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlI) AutoCapitalize(val any) HtmlI {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlI) AutoFocus(val any) HtmlI {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlI) Body(elems ...UI) HtmlI {
	p.setBody(elems...)
	return p
}

func (p *htmlI) Class(name string, items ...*Ref[StyleItem]) HtmlI {
	p.setClass(name, items...)
	return p
}

func (p *htmlI) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlI {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlI) ContentEditAble(val any) HtmlI {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlI) DataWith(name string, val any) HtmlI {
	p.dataWith(name, val)
	return p
}

func (p *htmlI) Dir(val any) HtmlI {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlI) DraggAble(val any) HtmlI {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlI) EnterKeyHint(val any) HtmlI {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlI) Hidden(val any) HtmlI {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlI) Id(val string) HtmlI {
	p.SetUIElementId(val)
	return p
}

func (p *htmlI) Inert(val any) HtmlI {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlI) InputMode(val any) HtmlI {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlI) Is(val any) HtmlI {
	p.SetProperty("is", val)
	return p
}

func (p *htmlI) ItemId(val any) HtmlI {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlI) ItemProp(val any) HtmlI {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlI) ItemRef(val any) HtmlI {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlI) ItemScope(val any) HtmlI {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlI) ItemType(val any) HtmlI {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlI) Lang(val any) HtmlI {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlI) Nonce(val any) HtmlI {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlI) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlI) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlI) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlI) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlI) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlI) OnBlur(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlI) OnClick(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlI) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlI) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlI) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlI) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlI) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlI) OnCopy(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlI) OnCut(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlI) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlI) OnDrag(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlI) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlI) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlI) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlI) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlI) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlI) OnDrop(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlI) OnError(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlI) OnFocus(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlI) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlI) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlI) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlI) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlI) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlI) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlI) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlI) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlI) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlI) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlI) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlI) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlI) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlI) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlI) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlI) OnPaste(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlI) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlI) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlI) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlI) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlI) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlI) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlI) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlI) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlI) OnScroll(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlI) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlI) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlI) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlI) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlI) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlI) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlI) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlI) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlI) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlI) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlI) OnWheel(handler func(event Event, options ...any), options ...any) HtmlI {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlI) Part(val any) HtmlI {
	p.SetProperty("part", val)
	return p
}

func (p *htmlI) Slot(val any) HtmlI {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlI) SpellCheck(val any) HtmlI {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlI) Style(items ...*Ref[StyleItem]) HtmlI {
	p.setStyle(items...)
	return p
}

func (p *htmlI) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlI {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlI) TabIndex(val any) HtmlI {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlI) Text(val any) HtmlI {
	p.setText(val)
	return p
}

func (p *htmlI) Title(val any) HtmlI {
	p.SetProperty("title", val)
	return p
}

func (p *htmlI) Translate(val any) HtmlI {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlI) VirtualKeyBoardPolicy(val any) HtmlI {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// IFrame return a html <iframe> element
func IFrame() HtmlIFrame {
	return &htmlIFrame{htmlBaseElement: htmlBaseElement{tag: "iframe"}}
}

// HtmlIFrame represent a html <iframe> element
type HtmlIFrame interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allow
	Allow(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowfullscreen
	AllowFullScreen(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest
	AllowPaymentRequest(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlIFrame

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlIFrame

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlIFrame

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-credentialless
	CredentialLess(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-csp
	Csp(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-height
	Height(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlIFrame

	// Id set element id attribute
	Id(val string) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading
	Loading(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-name
	Name(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-referrerpolicy
	ReferrerPolicy(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox
	Sandbox(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-src
	Src(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-srcdoc
	SrcDoc(val any) HtmlIFrame

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlIFrame

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlIFrame

	// Text set val as text conent for current element
	Text(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlIFrame

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-width
	Width(val any) HtmlIFrame
}

type htmlIFrame struct {
	htmlBaseElement
}

func (p *htmlIFrame) AccessKey(val any) HtmlIFrame {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlIFrame) Allow(val any) HtmlIFrame {
	p.SetProperty("allow", val)
	return p
}

func (p *htmlIFrame) AllowFullScreen(val any) HtmlIFrame {
	p.SetProperty("allowfullscreen", val)
	return p
}

func (p *htmlIFrame) AllowPaymentRequest(val any) HtmlIFrame {
	p.SetProperty("allowpaymentrequest", val)
	return p
}

func (p *htmlIFrame) AutoCapitalize(val any) HtmlIFrame {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlIFrame) AutoFocus(val any) HtmlIFrame {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlIFrame) Body(elems ...UI) HtmlIFrame {
	p.setBody(elems...)
	return p
}

func (p *htmlIFrame) Class(name string, items ...*Ref[StyleItem]) HtmlIFrame {
	p.setClass(name, items...)
	return p
}

func (p *htmlIFrame) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlIFrame {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlIFrame) ContentEditAble(val any) HtmlIFrame {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlIFrame) CredentialLess(val any) HtmlIFrame {
	p.SetProperty("credentialless", val)
	return p
}

func (p *htmlIFrame) Csp(val any) HtmlIFrame {
	p.SetProperty("csp", val)
	return p
}

func (p *htmlIFrame) DataWith(name string, val any) HtmlIFrame {
	p.dataWith(name, val)
	return p
}

func (p *htmlIFrame) Dir(val any) HtmlIFrame {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlIFrame) DraggAble(val any) HtmlIFrame {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlIFrame) EnterKeyHint(val any) HtmlIFrame {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlIFrame) Height(val any) HtmlIFrame {
	p.SetProperty("height", val)
	return p
}

func (p *htmlIFrame) Hidden(val any) HtmlIFrame {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlIFrame) Id(val string) HtmlIFrame {
	p.SetUIElementId(val)
	return p
}

func (p *htmlIFrame) Inert(val any) HtmlIFrame {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlIFrame) InputMode(val any) HtmlIFrame {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlIFrame) Is(val any) HtmlIFrame {
	p.SetProperty("is", val)
	return p
}

func (p *htmlIFrame) ItemId(val any) HtmlIFrame {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlIFrame) ItemProp(val any) HtmlIFrame {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlIFrame) ItemRef(val any) HtmlIFrame {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlIFrame) ItemScope(val any) HtmlIFrame {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlIFrame) ItemType(val any) HtmlIFrame {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlIFrame) Lang(val any) HtmlIFrame {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlIFrame) Loading(val any) HtmlIFrame {
	p.SetProperty("loading", val)
	return p
}

func (p *htmlIFrame) Name(val any) HtmlIFrame {
	p.SetProperty("name", val)
	return p
}

func (p *htmlIFrame) Nonce(val any) HtmlIFrame {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlIFrame) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlIFrame) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlIFrame) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlIFrame) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlIFrame) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlIFrame) OnBlur(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlIFrame) OnClick(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlIFrame) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlIFrame) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlIFrame) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlIFrame) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlIFrame) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlIFrame) OnCopy(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlIFrame) OnCut(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlIFrame) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlIFrame) OnDrag(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlIFrame) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlIFrame) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlIFrame) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlIFrame) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlIFrame) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlIFrame) OnDrop(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlIFrame) OnError(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlIFrame) OnFocus(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlIFrame) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlIFrame) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlIFrame) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlIFrame) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlIFrame) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlIFrame) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlIFrame) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlIFrame) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlIFrame) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlIFrame) OnPaste(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlIFrame) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlIFrame) OnScroll(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlIFrame) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlIFrame) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlIFrame) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlIFrame) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlIFrame) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlIFrame) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlIFrame) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlIFrame) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlIFrame) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlIFrame) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlIFrame) OnWheel(handler func(event Event, options ...any), options ...any) HtmlIFrame {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlIFrame) Part(val any) HtmlIFrame {
	p.SetProperty("part", val)
	return p
}

func (p *htmlIFrame) ReferrerPolicy(val any) HtmlIFrame {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlIFrame) Sandbox(val any) HtmlIFrame {
	p.SetProperty("sandbox", val)
	return p
}

func (p *htmlIFrame) Slot(val any) HtmlIFrame {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlIFrame) SpellCheck(val any) HtmlIFrame {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlIFrame) Src(val any) HtmlIFrame {
	p.SetProperty("src", val)
	return p
}

func (p *htmlIFrame) SrcDoc(val any) HtmlIFrame {
	p.SetProperty("srcdoc", val)
	return p
}

func (p *htmlIFrame) Style(items ...*Ref[StyleItem]) HtmlIFrame {
	p.setStyle(items...)
	return p
}

func (p *htmlIFrame) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlIFrame {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlIFrame) TabIndex(val any) HtmlIFrame {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlIFrame) Text(val any) HtmlIFrame {
	p.setText(val)
	return p
}

func (p *htmlIFrame) Title(val any) HtmlIFrame {
	p.SetProperty("title", val)
	return p
}

func (p *htmlIFrame) Translate(val any) HtmlIFrame {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlIFrame) VirtualKeyBoardPolicy(val any) HtmlIFrame {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlIFrame) Width(val any) HtmlIFrame {
	p.SetProperty("width", val)
	return p
}

// Img return a html <img> element
func Img() HtmlImg {
	return &htmlImg{htmlBaseElement: htmlBaseElement{tag: "img"}}
}

// HtmlImg represent a html <img> element
type HtmlImg interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#alt
	Alt(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlImg

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlImg

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlImg

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#crossorigin
	CrossOrigin(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#decoding
	Decoding(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#elementtiming
	ElementTiming(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#fetchpriority
	FetchPriority(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#height
	Height(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlImg

	// Id set element id attribute
	Id(val string) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#ismap
	IsMap(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#loading
	Loading(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#referrerpolicy
	ReferrerPolicy(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#sizes
	Sizes(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#src
	Src(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#srcset
	SrcSet(val any) HtmlImg

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlImg

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlImg

	// Text set val as text conent for current element
	Text(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#usemap
	UseMap(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlImg

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#width
	Width(val any) HtmlImg
}

type htmlImg struct {
	htmlBaseElement
}

func (p *htmlImg) AccessKey(val any) HtmlImg {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlImg) Alt(val any) HtmlImg {
	p.SetProperty("alt", val)
	return p
}

func (p *htmlImg) AutoCapitalize(val any) HtmlImg {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlImg) AutoFocus(val any) HtmlImg {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlImg) Body(elems ...UI) HtmlImg {
	p.setBody(elems...)
	return p
}

func (p *htmlImg) Class(name string, items ...*Ref[StyleItem]) HtmlImg {
	p.setClass(name, items...)
	return p
}

func (p *htmlImg) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlImg {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlImg) ContentEditAble(val any) HtmlImg {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlImg) CrossOrigin(val any) HtmlImg {
	p.SetProperty("crossorigin", val)
	return p
}

func (p *htmlImg) DataWith(name string, val any) HtmlImg {
	p.dataWith(name, val)
	return p
}

func (p *htmlImg) Decoding(val any) HtmlImg {
	p.SetProperty("decoding", val)
	return p
}

func (p *htmlImg) Dir(val any) HtmlImg {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlImg) DraggAble(val any) HtmlImg {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlImg) ElementTiming(val any) HtmlImg {
	p.SetProperty("elementtiming", val)
	return p
}

func (p *htmlImg) EnterKeyHint(val any) HtmlImg {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlImg) FetchPriority(val any) HtmlImg {
	p.SetProperty("fetchpriority", val)
	return p
}

func (p *htmlImg) Height(val any) HtmlImg {
	p.SetProperty("height", val)
	return p
}

func (p *htmlImg) Hidden(val any) HtmlImg {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlImg) Id(val string) HtmlImg {
	p.SetUIElementId(val)
	return p
}

func (p *htmlImg) Inert(val any) HtmlImg {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlImg) InputMode(val any) HtmlImg {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlImg) Is(val any) HtmlImg {
	p.SetProperty("is", val)
	return p
}

func (p *htmlImg) IsMap(val any) HtmlImg {
	p.SetProperty("ismap", val)
	return p
}

func (p *htmlImg) ItemId(val any) HtmlImg {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlImg) ItemProp(val any) HtmlImg {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlImg) ItemRef(val any) HtmlImg {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlImg) ItemScope(val any) HtmlImg {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlImg) ItemType(val any) HtmlImg {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlImg) Lang(val any) HtmlImg {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlImg) Loading(val any) HtmlImg {
	p.SetProperty("loading", val)
	return p
}

func (p *htmlImg) Nonce(val any) HtmlImg {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlImg) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlImg) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlImg) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlImg) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlImg) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlImg) OnBlur(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlImg) OnClick(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlImg) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlImg) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlImg) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlImg) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlImg) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlImg) OnCopy(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlImg) OnCut(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlImg) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlImg) OnDrag(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlImg) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlImg) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlImg) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlImg) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlImg) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlImg) OnDrop(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlImg) OnError(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlImg) OnFocus(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlImg) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlImg) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlImg) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlImg) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlImg) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlImg) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlImg) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlImg) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlImg) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlImg) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlImg) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlImg) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlImg) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlImg) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlImg) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlImg) OnPaste(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlImg) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlImg) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlImg) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlImg) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlImg) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlImg) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlImg) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlImg) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlImg) OnScroll(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlImg) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlImg) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlImg) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlImg) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlImg) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlImg) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlImg) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlImg) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlImg) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlImg) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlImg) OnWheel(handler func(event Event, options ...any), options ...any) HtmlImg {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlImg) Part(val any) HtmlImg {
	p.SetProperty("part", val)
	return p
}

func (p *htmlImg) ReferrerPolicy(val any) HtmlImg {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlImg) Sizes(val any) HtmlImg {
	p.SetProperty("sizes", val)
	return p
}

func (p *htmlImg) Slot(val any) HtmlImg {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlImg) SpellCheck(val any) HtmlImg {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlImg) Src(val any) HtmlImg {
	p.SetProperty("src", val)
	return p
}

func (p *htmlImg) SrcSet(val any) HtmlImg {
	p.SetProperty("srcset", val)
	return p
}

func (p *htmlImg) Style(items ...*Ref[StyleItem]) HtmlImg {
	p.setStyle(items...)
	return p
}

func (p *htmlImg) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlImg {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlImg) TabIndex(val any) HtmlImg {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlImg) Text(val any) HtmlImg {
	p.setText(val)
	return p
}

func (p *htmlImg) Title(val any) HtmlImg {
	p.SetProperty("title", val)
	return p
}

func (p *htmlImg) Translate(val any) HtmlImg {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlImg) UseMap(val any) HtmlImg {
	p.SetProperty("usemap", val)
	return p
}

func (p *htmlImg) VirtualKeyBoardPolicy(val any) HtmlImg {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlImg) Width(val any) HtmlImg {
	p.SetProperty("width", val)
	return p
}

// Input return a html <input> element
func Input() HtmlInput {
	return &htmlInput{htmlBaseElement: htmlBaseElement{tag: "input"}}
}

// HtmlInput represent a html <input> element
type HtmlInput interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#accept
	Accept(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#alt
	Alt(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete
	AutoComplete(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlInput

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#capture
	Capture(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#checked
	Checked(val any) HtmlInput

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlInput

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#dirname
	Dirname(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#disabled
	Disabled(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#form
	Form(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction
	FormAction(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formenctype
	FormEnctype(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formmethod
	FormMethod(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formnovalidate
	FormNoValidate(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formtarget
	FormTarget(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#height
	Height(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlInput

	// Id set element id attribute
	Id(val string) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#list
	List(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max
	Max(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength
	MaxLength(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min
	Min(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength
	MinLength(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#multiple
	Multiple(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name
	Name(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event
	OnBeforeInput(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event
	OnChange(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event
	OnInput(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern
	Pattern(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder
	Placeholder(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly
	Readonly(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#required
	Required(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#size
	Size(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#src
	Src(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step
	Step(val any) HtmlInput

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlInput

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlInput

	// Text set val as text conent for current element
	Text(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#type
	Type(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#value
	// val type should be string or *Ref[string]
	Value(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlInput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#width
	Width(val any) HtmlInput
}

type htmlInput struct {
	htmlBaseElement
}

func (p *htmlInput) Accept(val any) HtmlInput {
	p.SetProperty("accept", val)
	return p
}

func (p *htmlInput) AccessKey(val any) HtmlInput {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlInput) Alt(val any) HtmlInput {
	p.SetProperty("alt", val)
	return p
}

func (p *htmlInput) AutoCapitalize(val any) HtmlInput {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlInput) AutoComplete(val any) HtmlInput {
	p.SetProperty("autocomplete", val)
	return p
}

func (p *htmlInput) AutoFocus(val any) HtmlInput {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlInput) Body(elems ...UI) HtmlInput {
	p.setBody(elems...)
	return p
}

func (p *htmlInput) Capture(val any) HtmlInput {
	p.SetProperty("capture", val)
	return p
}

func (p *htmlInput) Checked(val any) HtmlInput {
	p.SetProperty("checked", val)
	return p
}

func (p *htmlInput) Class(name string, items ...*Ref[StyleItem]) HtmlInput {
	p.setClass(name, items...)
	return p
}

func (p *htmlInput) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlInput {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlInput) ContentEditAble(val any) HtmlInput {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlInput) DataWith(name string, val any) HtmlInput {
	p.dataWith(name, val)
	return p
}

func (p *htmlInput) Dir(val any) HtmlInput {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlInput) Dirname(val any) HtmlInput {
	p.SetProperty("dirname", val)
	return p
}

func (p *htmlInput) Disabled(val any) HtmlInput {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlInput) DraggAble(val any) HtmlInput {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlInput) EnterKeyHint(val any) HtmlInput {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlInput) Form(val any) HtmlInput {
	p.SetProperty("form", val)
	return p
}

func (p *htmlInput) FormAction(val any) HtmlInput {
	p.SetProperty("formaction", val)
	return p
}

func (p *htmlInput) FormEnctype(val any) HtmlInput {
	p.SetProperty("formenctype", val)
	return p
}

func (p *htmlInput) FormMethod(val any) HtmlInput {
	p.SetProperty("formmethod", val)
	return p
}

func (p *htmlInput) FormNoValidate(val any) HtmlInput {
	p.SetProperty("formnovalidate", val)
	return p
}

func (p *htmlInput) FormTarget(val any) HtmlInput {
	p.SetProperty("formtarget", val)
	return p
}

func (p *htmlInput) Height(val any) HtmlInput {
	p.SetProperty("height", val)
	return p
}

func (p *htmlInput) Hidden(val any) HtmlInput {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlInput) Id(val string) HtmlInput {
	p.SetUIElementId(val)
	return p
}

func (p *htmlInput) Inert(val any) HtmlInput {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlInput) InputMode(val any) HtmlInput {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlInput) Is(val any) HtmlInput {
	p.SetProperty("is", val)
	return p
}

func (p *htmlInput) ItemId(val any) HtmlInput {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlInput) ItemProp(val any) HtmlInput {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlInput) ItemRef(val any) HtmlInput {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlInput) ItemScope(val any) HtmlInput {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlInput) ItemType(val any) HtmlInput {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlInput) Lang(val any) HtmlInput {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlInput) List(val any) HtmlInput {
	p.SetProperty("list", val)
	return p
}

func (p *htmlInput) Max(val any) HtmlInput {
	p.SetProperty("max", val)
	return p
}

func (p *htmlInput) MaxLength(val any) HtmlInput {
	p.SetProperty("maxlength", val)
	return p
}

func (p *htmlInput) Min(val any) HtmlInput {
	p.SetProperty("min", val)
	return p
}

func (p *htmlInput) MinLength(val any) HtmlInput {
	p.SetProperty("minlength", val)
	return p
}

func (p *htmlInput) Multiple(val any) HtmlInput {
	p.SetProperty("multiple", val)
	return p
}

func (p *htmlInput) Name(val any) HtmlInput {
	p.SetProperty("name", val)
	return p
}

func (p *htmlInput) Nonce(val any) HtmlInput {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlInput) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlInput) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlInput) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlInput) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlInput) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlInput) OnBeforeInput(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("beforeinput", handler, options...)
	return p
}

func (p *htmlInput) OnBlur(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlInput) OnChange(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("change", handler, options...)
	return p
}

func (p *htmlInput) OnClick(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlInput) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlInput) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlInput) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlInput) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlInput) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlInput) OnCopy(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlInput) OnCut(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlInput) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlInput) OnDrag(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlInput) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlInput) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlInput) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlInput) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlInput) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlInput) OnDrop(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlInput) OnError(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlInput) OnFocus(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlInput) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlInput) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlInput) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlInput) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlInput) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlInput) OnInput(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("input", handler, options...)
	return p
}

func (p *htmlInput) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlInput) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlInput) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlInput) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlInput) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlInput) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlInput) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlInput) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlInput) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlInput) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlInput) OnPaste(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlInput) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlInput) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlInput) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlInput) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlInput) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlInput) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlInput) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlInput) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlInput) OnScroll(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlInput) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlInput) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlInput) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlInput) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlInput) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlInput) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlInput) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlInput) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlInput) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlInput) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlInput) OnWheel(handler func(event Event, options ...any), options ...any) HtmlInput {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlInput) Part(val any) HtmlInput {
	p.SetProperty("part", val)
	return p
}

func (p *htmlInput) Pattern(val any) HtmlInput {
	p.SetProperty("pattern", val)
	return p
}

func (p *htmlInput) Placeholder(val any) HtmlInput {
	p.SetProperty("placeholder", val)
	return p
}

func (p *htmlInput) Readonly(val any) HtmlInput {
	p.SetProperty("readonly", val)
	return p
}

func (p *htmlInput) Required(val any) HtmlInput {
	p.SetProperty("required", val)
	return p
}

func (p *htmlInput) Size(val any) HtmlInput {
	p.SetProperty("size", val)
	return p
}

func (p *htmlInput) Slot(val any) HtmlInput {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlInput) SpellCheck(val any) HtmlInput {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlInput) Src(val any) HtmlInput {
	p.SetProperty("src", val)
	return p
}

func (p *htmlInput) Step(val any) HtmlInput {
	p.SetProperty("step", val)
	return p
}

func (p *htmlInput) Style(items ...*Ref[StyleItem]) HtmlInput {
	p.setStyle(items...)
	return p
}

func (p *htmlInput) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlInput {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlInput) TabIndex(val any) HtmlInput {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlInput) Text(val any) HtmlInput {
	p.setText(val)
	return p
}

func (p *htmlInput) Title(val any) HtmlInput {
	p.SetProperty("title", val)
	return p
}

func (p *htmlInput) Translate(val any) HtmlInput {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlInput) Type(val any) HtmlInput {
	p.SetProperty("type", val)
	return p
}

func (p *htmlInput) Value(val any) HtmlInput {
	p.bindInputValue(val)
	return p
}

func (p *htmlInput) VirtualKeyBoardPolicy(val any) HtmlInput {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlInput) Width(val any) HtmlInput {
	p.SetProperty("width", val)
	return p
}

// Ins return a html <ins> element
func Ins() HtmlIns {
	return &htmlIns{htmlBaseElement: htmlBaseElement{tag: "ins"}}
}

// HtmlIns represent a html <ins> element
type HtmlIns interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlIns

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins#attr-cite
	Cite(val any) HtmlIns

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlIns

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins#attr-datetime
	Datetime(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlIns

	// Id set element id attribute
	Id(val string) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlIns

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlIns

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlIns

	// Text set val as text conent for current element
	Text(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlIns

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlIns
}

type htmlIns struct {
	htmlBaseElement
}

func (p *htmlIns) AccessKey(val any) HtmlIns {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlIns) AutoCapitalize(val any) HtmlIns {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlIns) AutoFocus(val any) HtmlIns {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlIns) Body(elems ...UI) HtmlIns {
	p.setBody(elems...)
	return p
}

func (p *htmlIns) Cite(val any) HtmlIns {
	p.SetProperty("cite", val)
	return p
}

func (p *htmlIns) Class(name string, items ...*Ref[StyleItem]) HtmlIns {
	p.setClass(name, items...)
	return p
}

func (p *htmlIns) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlIns {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlIns) ContentEditAble(val any) HtmlIns {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlIns) DataWith(name string, val any) HtmlIns {
	p.dataWith(name, val)
	return p
}

func (p *htmlIns) Datetime(val any) HtmlIns {
	p.SetProperty("datetime", val)
	return p
}

func (p *htmlIns) Dir(val any) HtmlIns {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlIns) DraggAble(val any) HtmlIns {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlIns) EnterKeyHint(val any) HtmlIns {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlIns) Hidden(val any) HtmlIns {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlIns) Id(val string) HtmlIns {
	p.SetUIElementId(val)
	return p
}

func (p *htmlIns) Inert(val any) HtmlIns {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlIns) InputMode(val any) HtmlIns {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlIns) Is(val any) HtmlIns {
	p.SetProperty("is", val)
	return p
}

func (p *htmlIns) ItemId(val any) HtmlIns {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlIns) ItemProp(val any) HtmlIns {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlIns) ItemRef(val any) HtmlIns {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlIns) ItemScope(val any) HtmlIns {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlIns) ItemType(val any) HtmlIns {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlIns) Lang(val any) HtmlIns {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlIns) Nonce(val any) HtmlIns {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlIns) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlIns) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlIns) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlIns) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlIns) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlIns) OnBlur(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlIns) OnClick(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlIns) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlIns) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlIns) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlIns) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlIns) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlIns) OnCopy(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlIns) OnCut(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlIns) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlIns) OnDrag(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlIns) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlIns) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlIns) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlIns) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlIns) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlIns) OnDrop(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlIns) OnError(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlIns) OnFocus(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlIns) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlIns) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlIns) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlIns) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlIns) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlIns) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlIns) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlIns) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlIns) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlIns) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlIns) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlIns) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlIns) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlIns) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlIns) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlIns) OnPaste(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlIns) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlIns) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlIns) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlIns) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlIns) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlIns) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlIns) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlIns) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlIns) OnScroll(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlIns) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlIns) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlIns) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlIns) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlIns) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlIns) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlIns) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlIns) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlIns) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlIns) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlIns) OnWheel(handler func(event Event, options ...any), options ...any) HtmlIns {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlIns) Part(val any) HtmlIns {
	p.SetProperty("part", val)
	return p
}

func (p *htmlIns) Slot(val any) HtmlIns {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlIns) SpellCheck(val any) HtmlIns {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlIns) Style(items ...*Ref[StyleItem]) HtmlIns {
	p.setStyle(items...)
	return p
}

func (p *htmlIns) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlIns {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlIns) TabIndex(val any) HtmlIns {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlIns) Text(val any) HtmlIns {
	p.setText(val)
	return p
}

func (p *htmlIns) Title(val any) HtmlIns {
	p.SetProperty("title", val)
	return p
}

func (p *htmlIns) Translate(val any) HtmlIns {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlIns) VirtualKeyBoardPolicy(val any) HtmlIns {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Kbd return a html <kbd> element
func Kbd() HtmlKbd {
	return &htmlKbd{htmlBaseElement: htmlBaseElement{tag: "kbd"}}
}

// HtmlKbd represent a html <kbd> element
type HtmlKbd interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlKbd

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlKbd

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlKbd

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlKbd

	// Id set element id attribute
	Id(val string) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlKbd

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlKbd

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlKbd

	// Text set val as text conent for current element
	Text(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlKbd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlKbd
}

type htmlKbd struct {
	htmlBaseElement
}

func (p *htmlKbd) AccessKey(val any) HtmlKbd {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlKbd) AutoCapitalize(val any) HtmlKbd {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlKbd) AutoFocus(val any) HtmlKbd {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlKbd) Body(elems ...UI) HtmlKbd {
	p.setBody(elems...)
	return p
}

func (p *htmlKbd) Class(name string, items ...*Ref[StyleItem]) HtmlKbd {
	p.setClass(name, items...)
	return p
}

func (p *htmlKbd) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlKbd {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlKbd) ContentEditAble(val any) HtmlKbd {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlKbd) DataWith(name string, val any) HtmlKbd {
	p.dataWith(name, val)
	return p
}

func (p *htmlKbd) Dir(val any) HtmlKbd {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlKbd) DraggAble(val any) HtmlKbd {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlKbd) EnterKeyHint(val any) HtmlKbd {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlKbd) Hidden(val any) HtmlKbd {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlKbd) Id(val string) HtmlKbd {
	p.SetUIElementId(val)
	return p
}

func (p *htmlKbd) Inert(val any) HtmlKbd {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlKbd) InputMode(val any) HtmlKbd {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlKbd) Is(val any) HtmlKbd {
	p.SetProperty("is", val)
	return p
}

func (p *htmlKbd) ItemId(val any) HtmlKbd {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlKbd) ItemProp(val any) HtmlKbd {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlKbd) ItemRef(val any) HtmlKbd {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlKbd) ItemScope(val any) HtmlKbd {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlKbd) ItemType(val any) HtmlKbd {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlKbd) Lang(val any) HtmlKbd {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlKbd) Nonce(val any) HtmlKbd {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlKbd) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlKbd) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlKbd) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlKbd) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlKbd) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlKbd) OnBlur(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlKbd) OnClick(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlKbd) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlKbd) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlKbd) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlKbd) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlKbd) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlKbd) OnCopy(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlKbd) OnCut(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlKbd) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlKbd) OnDrag(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlKbd) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlKbd) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlKbd) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlKbd) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlKbd) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlKbd) OnDrop(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlKbd) OnError(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlKbd) OnFocus(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlKbd) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlKbd) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlKbd) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlKbd) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlKbd) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlKbd) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlKbd) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlKbd) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlKbd) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlKbd) OnPaste(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlKbd) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlKbd) OnScroll(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlKbd) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlKbd) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlKbd) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlKbd) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlKbd) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlKbd) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlKbd) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlKbd) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlKbd) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlKbd) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlKbd) OnWheel(handler func(event Event, options ...any), options ...any) HtmlKbd {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlKbd) Part(val any) HtmlKbd {
	p.SetProperty("part", val)
	return p
}

func (p *htmlKbd) Slot(val any) HtmlKbd {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlKbd) SpellCheck(val any) HtmlKbd {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlKbd) Style(items ...*Ref[StyleItem]) HtmlKbd {
	p.setStyle(items...)
	return p
}

func (p *htmlKbd) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlKbd {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlKbd) TabIndex(val any) HtmlKbd {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlKbd) Text(val any) HtmlKbd {
	p.setText(val)
	return p
}

func (p *htmlKbd) Title(val any) HtmlKbd {
	p.SetProperty("title", val)
	return p
}

func (p *htmlKbd) Translate(val any) HtmlKbd {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlKbd) VirtualKeyBoardPolicy(val any) HtmlKbd {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Label return a html <label> element
func Label() HtmlLabel {
	return &htmlLabel{htmlBaseElement: htmlBaseElement{tag: "label"}}
}

// HtmlLabel represent a html <label> element
type HtmlLabel interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlLabel

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlLabel

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlLabel

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for
	For(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlLabel

	// Id set element id attribute
	Id(val string) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlLabel

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlLabel

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlLabel

	// Text set val as text conent for current element
	Text(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlLabel

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlLabel
}

type htmlLabel struct {
	htmlBaseElement
}

func (p *htmlLabel) AccessKey(val any) HtmlLabel {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlLabel) AutoCapitalize(val any) HtmlLabel {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlLabel) AutoFocus(val any) HtmlLabel {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlLabel) Body(elems ...UI) HtmlLabel {
	p.setBody(elems...)
	return p
}

func (p *htmlLabel) Class(name string, items ...*Ref[StyleItem]) HtmlLabel {
	p.setClass(name, items...)
	return p
}

func (p *htmlLabel) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLabel {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlLabel) ContentEditAble(val any) HtmlLabel {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlLabel) DataWith(name string, val any) HtmlLabel {
	p.dataWith(name, val)
	return p
}

func (p *htmlLabel) Dir(val any) HtmlLabel {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlLabel) DraggAble(val any) HtmlLabel {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlLabel) EnterKeyHint(val any) HtmlLabel {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlLabel) For(val any) HtmlLabel {
	p.SetAttribute("for", val)
	return p
}

func (p *htmlLabel) Hidden(val any) HtmlLabel {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlLabel) Id(val string) HtmlLabel {
	p.SetUIElementId(val)
	return p
}

func (p *htmlLabel) Inert(val any) HtmlLabel {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlLabel) InputMode(val any) HtmlLabel {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlLabel) Is(val any) HtmlLabel {
	p.SetProperty("is", val)
	return p
}

func (p *htmlLabel) ItemId(val any) HtmlLabel {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlLabel) ItemProp(val any) HtmlLabel {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlLabel) ItemRef(val any) HtmlLabel {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlLabel) ItemScope(val any) HtmlLabel {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlLabel) ItemType(val any) HtmlLabel {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlLabel) Lang(val any) HtmlLabel {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlLabel) Nonce(val any) HtmlLabel {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlLabel) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlLabel) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlLabel) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlLabel) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlLabel) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlLabel) OnBlur(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlLabel) OnClick(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlLabel) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlLabel) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlLabel) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlLabel) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlLabel) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlLabel) OnCopy(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlLabel) OnCut(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlLabel) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlLabel) OnDrag(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlLabel) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlLabel) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlLabel) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlLabel) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlLabel) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlLabel) OnDrop(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlLabel) OnError(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlLabel) OnFocus(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlLabel) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlLabel) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlLabel) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlLabel) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlLabel) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlLabel) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlLabel) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlLabel) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlLabel) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlLabel) OnPaste(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlLabel) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlLabel) OnScroll(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlLabel) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlLabel) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlLabel) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlLabel) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlLabel) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlLabel) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlLabel) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlLabel) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlLabel) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlLabel) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlLabel) OnWheel(handler func(event Event, options ...any), options ...any) HtmlLabel {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlLabel) Part(val any) HtmlLabel {
	p.SetProperty("part", val)
	return p
}

func (p *htmlLabel) Slot(val any) HtmlLabel {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlLabel) SpellCheck(val any) HtmlLabel {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlLabel) Style(items ...*Ref[StyleItem]) HtmlLabel {
	p.setStyle(items...)
	return p
}

func (p *htmlLabel) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLabel {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlLabel) TabIndex(val any) HtmlLabel {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlLabel) Text(val any) HtmlLabel {
	p.setText(val)
	return p
}

func (p *htmlLabel) Title(val any) HtmlLabel {
	p.SetProperty("title", val)
	return p
}

func (p *htmlLabel) Translate(val any) HtmlLabel {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlLabel) VirtualKeyBoardPolicy(val any) HtmlLabel {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Legend return a html <legend> element
func Legend() HtmlLegend {
	return &htmlLegend{htmlBaseElement: htmlBaseElement{tag: "legend"}}
}

// HtmlLegend represent a html <legend> element
type HtmlLegend interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlLegend

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlLegend

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlLegend

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlLegend

	// Id set element id attribute
	Id(val string) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlLegend

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlLegend

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlLegend

	// Text set val as text conent for current element
	Text(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlLegend

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlLegend
}

type htmlLegend struct {
	htmlBaseElement
}

func (p *htmlLegend) AccessKey(val any) HtmlLegend {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlLegend) AutoCapitalize(val any) HtmlLegend {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlLegend) AutoFocus(val any) HtmlLegend {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlLegend) Body(elems ...UI) HtmlLegend {
	p.setBody(elems...)
	return p
}

func (p *htmlLegend) Class(name string, items ...*Ref[StyleItem]) HtmlLegend {
	p.setClass(name, items...)
	return p
}

func (p *htmlLegend) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLegend {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlLegend) ContentEditAble(val any) HtmlLegend {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlLegend) DataWith(name string, val any) HtmlLegend {
	p.dataWith(name, val)
	return p
}

func (p *htmlLegend) Dir(val any) HtmlLegend {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlLegend) DraggAble(val any) HtmlLegend {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlLegend) EnterKeyHint(val any) HtmlLegend {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlLegend) Hidden(val any) HtmlLegend {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlLegend) Id(val string) HtmlLegend {
	p.SetUIElementId(val)
	return p
}

func (p *htmlLegend) Inert(val any) HtmlLegend {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlLegend) InputMode(val any) HtmlLegend {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlLegend) Is(val any) HtmlLegend {
	p.SetProperty("is", val)
	return p
}

func (p *htmlLegend) ItemId(val any) HtmlLegend {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlLegend) ItemProp(val any) HtmlLegend {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlLegend) ItemRef(val any) HtmlLegend {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlLegend) ItemScope(val any) HtmlLegend {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlLegend) ItemType(val any) HtmlLegend {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlLegend) Lang(val any) HtmlLegend {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlLegend) Nonce(val any) HtmlLegend {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlLegend) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlLegend) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlLegend) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlLegend) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlLegend) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlLegend) OnBlur(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlLegend) OnClick(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlLegend) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlLegend) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlLegend) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlLegend) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlLegend) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlLegend) OnCopy(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlLegend) OnCut(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlLegend) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlLegend) OnDrag(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlLegend) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlLegend) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlLegend) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlLegend) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlLegend) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlLegend) OnDrop(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlLegend) OnError(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlLegend) OnFocus(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlLegend) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlLegend) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlLegend) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlLegend) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlLegend) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlLegend) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlLegend) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlLegend) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlLegend) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlLegend) OnPaste(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlLegend) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlLegend) OnScroll(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlLegend) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlLegend) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlLegend) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlLegend) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlLegend) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlLegend) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlLegend) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlLegend) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlLegend) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlLegend) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlLegend) OnWheel(handler func(event Event, options ...any), options ...any) HtmlLegend {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlLegend) Part(val any) HtmlLegend {
	p.SetProperty("part", val)
	return p
}

func (p *htmlLegend) Slot(val any) HtmlLegend {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlLegend) SpellCheck(val any) HtmlLegend {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlLegend) Style(items ...*Ref[StyleItem]) HtmlLegend {
	p.setStyle(items...)
	return p
}

func (p *htmlLegend) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLegend {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlLegend) TabIndex(val any) HtmlLegend {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlLegend) Text(val any) HtmlLegend {
	p.setText(val)
	return p
}

func (p *htmlLegend) Title(val any) HtmlLegend {
	p.SetProperty("title", val)
	return p
}

func (p *htmlLegend) Translate(val any) HtmlLegend {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlLegend) VirtualKeyBoardPolicy(val any) HtmlLegend {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Li return a html <li> element
func Li() HtmlLi {
	return &htmlLi{htmlBaseElement: htmlBaseElement{tag: "li"}}
}

// HtmlLi represent a html <li> element
type HtmlLi interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlLi

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlLi

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlLi

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlLi

	// Id set element id attribute
	Id(val string) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlLi

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlLi

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlLi

	// Text set val as text conent for current element
	Text(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li#attr-value
	Value(val any) HtmlLi

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlLi
}

type htmlLi struct {
	htmlBaseElement
}

func (p *htmlLi) AccessKey(val any) HtmlLi {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlLi) AutoCapitalize(val any) HtmlLi {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlLi) AutoFocus(val any) HtmlLi {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlLi) Body(elems ...UI) HtmlLi {
	p.setBody(elems...)
	return p
}

func (p *htmlLi) Class(name string, items ...*Ref[StyleItem]) HtmlLi {
	p.setClass(name, items...)
	return p
}

func (p *htmlLi) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLi {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlLi) ContentEditAble(val any) HtmlLi {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlLi) DataWith(name string, val any) HtmlLi {
	p.dataWith(name, val)
	return p
}

func (p *htmlLi) Dir(val any) HtmlLi {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlLi) DraggAble(val any) HtmlLi {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlLi) EnterKeyHint(val any) HtmlLi {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlLi) Hidden(val any) HtmlLi {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlLi) Id(val string) HtmlLi {
	p.SetUIElementId(val)
	return p
}

func (p *htmlLi) Inert(val any) HtmlLi {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlLi) InputMode(val any) HtmlLi {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlLi) Is(val any) HtmlLi {
	p.SetProperty("is", val)
	return p
}

func (p *htmlLi) ItemId(val any) HtmlLi {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlLi) ItemProp(val any) HtmlLi {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlLi) ItemRef(val any) HtmlLi {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlLi) ItemScope(val any) HtmlLi {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlLi) ItemType(val any) HtmlLi {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlLi) Lang(val any) HtmlLi {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlLi) Nonce(val any) HtmlLi {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlLi) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlLi) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlLi) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlLi) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlLi) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlLi) OnBlur(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlLi) OnClick(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlLi) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlLi) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlLi) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlLi) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlLi) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlLi) OnCopy(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlLi) OnCut(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlLi) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlLi) OnDrag(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlLi) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlLi) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlLi) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlLi) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlLi) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlLi) OnDrop(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlLi) OnError(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlLi) OnFocus(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlLi) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlLi) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlLi) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlLi) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlLi) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlLi) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlLi) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlLi) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlLi) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlLi) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlLi) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlLi) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlLi) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlLi) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlLi) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlLi) OnPaste(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlLi) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlLi) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlLi) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlLi) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlLi) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlLi) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlLi) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlLi) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlLi) OnScroll(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlLi) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlLi) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlLi) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlLi) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlLi) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlLi) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlLi) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlLi) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlLi) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlLi) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlLi) OnWheel(handler func(event Event, options ...any), options ...any) HtmlLi {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlLi) Part(val any) HtmlLi {
	p.SetProperty("part", val)
	return p
}

func (p *htmlLi) Slot(val any) HtmlLi {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlLi) SpellCheck(val any) HtmlLi {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlLi) Style(items ...*Ref[StyleItem]) HtmlLi {
	p.setStyle(items...)
	return p
}

func (p *htmlLi) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLi {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlLi) TabIndex(val any) HtmlLi {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlLi) Text(val any) HtmlLi {
	p.setText(val)
	return p
}

func (p *htmlLi) Title(val any) HtmlLi {
	p.SetProperty("title", val)
	return p
}

func (p *htmlLi) Translate(val any) HtmlLi {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlLi) Value(val any) HtmlLi {
	p.SetProperty("value", val)
	return p
}

func (p *htmlLi) VirtualKeyBoardPolicy(val any) HtmlLi {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Link return a html <link> element
func Link() HtmlLink {
	return &htmlLink{htmlBaseElement: htmlBaseElement{tag: "link"}}
}

// HtmlLink represent a html <link> element
type HtmlLink interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as
	As(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-blocking
	Blocking(val any) HtmlLink

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlLink

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlLink

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-crossorigin
	CrossOrigin(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-fetchpriority
	FetchPriority(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-href
	Href(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-hreflang
	HrefLang(val any) HtmlLink

	// Id set element id attribute
	Id(val string) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesizes
	ImageSizes(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesrcset
	ImageSrcSet(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-integrity
	Integrity(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-media
	Media(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-prefetch
	Prefetch(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-referrerpolicy
	ReferrerPolicy(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-rel
	Rel(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-sizes
	Sizes(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlLink

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlLink

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlLink

	// Text set val as text conent for current element
	Text(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-type
	Type(val any) HtmlLink

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlLink
}

type htmlLink struct {
	htmlBaseElement
}

func (p *htmlLink) AccessKey(val any) HtmlLink {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlLink) As(val any) HtmlLink {
	p.SetProperty("as", val)
	return p
}

func (p *htmlLink) AutoCapitalize(val any) HtmlLink {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlLink) AutoFocus(val any) HtmlLink {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlLink) Blocking(val any) HtmlLink {
	p.SetProperty("blocking", val)
	return p
}

func (p *htmlLink) Body(elems ...UI) HtmlLink {
	p.setBody(elems...)
	return p
}

func (p *htmlLink) Class(name string, items ...*Ref[StyleItem]) HtmlLink {
	p.setClass(name, items...)
	return p
}

func (p *htmlLink) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlLink {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlLink) ContentEditAble(val any) HtmlLink {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlLink) CrossOrigin(val any) HtmlLink {
	p.SetProperty("crossorigin", val)
	return p
}

func (p *htmlLink) DataWith(name string, val any) HtmlLink {
	p.dataWith(name, val)
	return p
}

func (p *htmlLink) Dir(val any) HtmlLink {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlLink) DraggAble(val any) HtmlLink {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlLink) EnterKeyHint(val any) HtmlLink {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlLink) FetchPriority(val any) HtmlLink {
	p.SetProperty("fetchpriority", val)
	return p
}

func (p *htmlLink) Hidden(val any) HtmlLink {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlLink) Href(val any) HtmlLink {
	p.SetProperty("href", val)
	return p
}

func (p *htmlLink) HrefLang(val any) HtmlLink {
	p.SetProperty("hreflang", val)
	return p
}

func (p *htmlLink) Id(val string) HtmlLink {
	p.SetUIElementId(val)
	return p
}

func (p *htmlLink) ImageSizes(val any) HtmlLink {
	p.SetProperty("imagesizes", val)
	return p
}

func (p *htmlLink) ImageSrcSet(val any) HtmlLink {
	p.SetProperty("imagesrcset", val)
	return p
}

func (p *htmlLink) Inert(val any) HtmlLink {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlLink) InputMode(val any) HtmlLink {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlLink) Integrity(val any) HtmlLink {
	p.SetProperty("integrity", val)
	return p
}

func (p *htmlLink) Is(val any) HtmlLink {
	p.SetProperty("is", val)
	return p
}

func (p *htmlLink) ItemId(val any) HtmlLink {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlLink) ItemProp(val any) HtmlLink {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlLink) ItemRef(val any) HtmlLink {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlLink) ItemScope(val any) HtmlLink {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlLink) ItemType(val any) HtmlLink {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlLink) Lang(val any) HtmlLink {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlLink) Media(val any) HtmlLink {
	p.SetProperty("media", val)
	return p
}

func (p *htmlLink) Nonce(val any) HtmlLink {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlLink) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlLink) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlLink) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlLink) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlLink) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlLink) OnBlur(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlLink) OnClick(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlLink) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlLink) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlLink) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlLink) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlLink) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlLink) OnCopy(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlLink) OnCut(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlLink) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlLink) OnDrag(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlLink) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlLink) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlLink) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlLink) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlLink) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlLink) OnDrop(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlLink) OnError(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlLink) OnFocus(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlLink) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlLink) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlLink) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlLink) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlLink) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlLink) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlLink) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlLink) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlLink) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlLink) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlLink) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlLink) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlLink) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlLink) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlLink) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlLink) OnPaste(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlLink) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlLink) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlLink) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlLink) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlLink) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlLink) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlLink) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlLink) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlLink) OnScroll(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlLink) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlLink) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlLink) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlLink) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlLink) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlLink) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlLink) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlLink) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlLink) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlLink) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlLink) OnWheel(handler func(event Event, options ...any), options ...any) HtmlLink {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlLink) Part(val any) HtmlLink {
	p.SetProperty("part", val)
	return p
}

func (p *htmlLink) Prefetch(val any) HtmlLink {
	p.SetProperty("prefetch", val)
	return p
}

func (p *htmlLink) ReferrerPolicy(val any) HtmlLink {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlLink) Rel(val any) HtmlLink {
	p.SetProperty("rel", val)
	return p
}

func (p *htmlLink) Sizes(val any) HtmlLink {
	p.SetProperty("sizes", val)
	return p
}

func (p *htmlLink) Slot(val any) HtmlLink {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlLink) SpellCheck(val any) HtmlLink {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlLink) Style(items ...*Ref[StyleItem]) HtmlLink {
	p.setStyle(items...)
	return p
}

func (p *htmlLink) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlLink {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlLink) TabIndex(val any) HtmlLink {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlLink) Text(val any) HtmlLink {
	p.setText(val)
	return p
}

func (p *htmlLink) Title(val any) HtmlLink {
	p.SetProperty("title", val)
	return p
}

func (p *htmlLink) Translate(val any) HtmlLink {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlLink) Type(val any) HtmlLink {
	p.SetProperty("type", val)
	return p
}

func (p *htmlLink) VirtualKeyBoardPolicy(val any) HtmlLink {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Main return a html <main> element
func Main() HtmlMain {
	return &htmlMain{htmlBaseElement: htmlBaseElement{tag: "main"}}
}

// HtmlMain represent a html <main> element
type HtmlMain interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlMain

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlMain

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlMain

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlMain

	// Id set element id attribute
	Id(val string) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlMain

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlMain

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlMain

	// Text set val as text conent for current element
	Text(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlMain

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlMain
}

type htmlMain struct {
	htmlBaseElement
}

func (p *htmlMain) AccessKey(val any) HtmlMain {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlMain) AutoCapitalize(val any) HtmlMain {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlMain) AutoFocus(val any) HtmlMain {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlMain) Body(elems ...UI) HtmlMain {
	p.setBody(elems...)
	return p
}

func (p *htmlMain) Class(name string, items ...*Ref[StyleItem]) HtmlMain {
	p.setClass(name, items...)
	return p
}

func (p *htmlMain) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMain {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlMain) ContentEditAble(val any) HtmlMain {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlMain) DataWith(name string, val any) HtmlMain {
	p.dataWith(name, val)
	return p
}

func (p *htmlMain) Dir(val any) HtmlMain {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlMain) DraggAble(val any) HtmlMain {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlMain) EnterKeyHint(val any) HtmlMain {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlMain) Hidden(val any) HtmlMain {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlMain) Id(val string) HtmlMain {
	p.SetUIElementId(val)
	return p
}

func (p *htmlMain) Inert(val any) HtmlMain {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlMain) InputMode(val any) HtmlMain {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlMain) Is(val any) HtmlMain {
	p.SetProperty("is", val)
	return p
}

func (p *htmlMain) ItemId(val any) HtmlMain {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlMain) ItemProp(val any) HtmlMain {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlMain) ItemRef(val any) HtmlMain {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlMain) ItemScope(val any) HtmlMain {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlMain) ItemType(val any) HtmlMain {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlMain) Lang(val any) HtmlMain {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlMain) Nonce(val any) HtmlMain {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlMain) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlMain) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlMain) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlMain) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlMain) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlMain) OnBlur(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlMain) OnClick(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlMain) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlMain) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlMain) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlMain) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlMain) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlMain) OnCopy(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlMain) OnCut(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlMain) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlMain) OnDrag(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlMain) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlMain) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlMain) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlMain) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlMain) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlMain) OnDrop(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlMain) OnError(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlMain) OnFocus(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlMain) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlMain) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlMain) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlMain) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlMain) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlMain) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlMain) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlMain) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlMain) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlMain) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlMain) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlMain) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlMain) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlMain) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlMain) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlMain) OnPaste(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlMain) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlMain) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlMain) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlMain) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlMain) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlMain) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlMain) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlMain) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlMain) OnScroll(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlMain) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlMain) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlMain) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlMain) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlMain) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlMain) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlMain) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlMain) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlMain) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlMain) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlMain) OnWheel(handler func(event Event, options ...any), options ...any) HtmlMain {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlMain) Part(val any) HtmlMain {
	p.SetProperty("part", val)
	return p
}

func (p *htmlMain) Slot(val any) HtmlMain {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlMain) SpellCheck(val any) HtmlMain {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlMain) Style(items ...*Ref[StyleItem]) HtmlMain {
	p.setStyle(items...)
	return p
}

func (p *htmlMain) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMain {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlMain) TabIndex(val any) HtmlMain {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlMain) Text(val any) HtmlMain {
	p.setText(val)
	return p
}

func (p *htmlMain) Title(val any) HtmlMain {
	p.SetProperty("title", val)
	return p
}

func (p *htmlMain) Translate(val any) HtmlMain {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlMain) VirtualKeyBoardPolicy(val any) HtmlMain {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// HMap return a html <hmap> element
func HMap() HtmlHMap {
	return &htmlHMap{htmlBaseElement: htmlBaseElement{tag: "hmap"}}
}

// HtmlHMap represent a html <hmap> element
type HtmlHMap interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlHMap

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlHMap

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlHMap

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlHMap

	// Id set element id attribute
	Id(val string) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map#attr-name
	Name(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlHMap

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlHMap

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlHMap

	// Text set val as text conent for current element
	Text(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlHMap

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlHMap
}

type htmlHMap struct {
	htmlBaseElement
}

func (p *htmlHMap) AccessKey(val any) HtmlHMap {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlHMap) AutoCapitalize(val any) HtmlHMap {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlHMap) AutoFocus(val any) HtmlHMap {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlHMap) Body(elems ...UI) HtmlHMap {
	p.setBody(elems...)
	return p
}

func (p *htmlHMap) Class(name string, items ...*Ref[StyleItem]) HtmlHMap {
	p.setClass(name, items...)
	return p
}

func (p *htmlHMap) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlHMap {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlHMap) ContentEditAble(val any) HtmlHMap {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlHMap) DataWith(name string, val any) HtmlHMap {
	p.dataWith(name, val)
	return p
}

func (p *htmlHMap) Dir(val any) HtmlHMap {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlHMap) DraggAble(val any) HtmlHMap {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlHMap) EnterKeyHint(val any) HtmlHMap {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlHMap) Hidden(val any) HtmlHMap {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlHMap) Id(val string) HtmlHMap {
	p.SetUIElementId(val)
	return p
}

func (p *htmlHMap) Inert(val any) HtmlHMap {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlHMap) InputMode(val any) HtmlHMap {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlHMap) Is(val any) HtmlHMap {
	p.SetProperty("is", val)
	return p
}

func (p *htmlHMap) ItemId(val any) HtmlHMap {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlHMap) ItemProp(val any) HtmlHMap {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlHMap) ItemRef(val any) HtmlHMap {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlHMap) ItemScope(val any) HtmlHMap {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlHMap) ItemType(val any) HtmlHMap {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlHMap) Lang(val any) HtmlHMap {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlHMap) Name(val any) HtmlHMap {
	p.SetProperty("name", val)
	return p
}

func (p *htmlHMap) Nonce(val any) HtmlHMap {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlHMap) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlHMap) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlHMap) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlHMap) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlHMap) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlHMap) OnBlur(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlHMap) OnClick(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlHMap) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlHMap) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlHMap) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlHMap) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlHMap) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlHMap) OnCopy(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlHMap) OnCut(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlHMap) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlHMap) OnDrag(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlHMap) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlHMap) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlHMap) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlHMap) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlHMap) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlHMap) OnDrop(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlHMap) OnError(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlHMap) OnFocus(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlHMap) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlHMap) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlHMap) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlHMap) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlHMap) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlHMap) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlHMap) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlHMap) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlHMap) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlHMap) OnPaste(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlHMap) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlHMap) OnScroll(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlHMap) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlHMap) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlHMap) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlHMap) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlHMap) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlHMap) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlHMap) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlHMap) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlHMap) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlHMap) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlHMap) OnWheel(handler func(event Event, options ...any), options ...any) HtmlHMap {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlHMap) Part(val any) HtmlHMap {
	p.SetProperty("part", val)
	return p
}

func (p *htmlHMap) Slot(val any) HtmlHMap {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlHMap) SpellCheck(val any) HtmlHMap {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlHMap) Style(items ...*Ref[StyleItem]) HtmlHMap {
	p.setStyle(items...)
	return p
}

func (p *htmlHMap) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlHMap {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlHMap) TabIndex(val any) HtmlHMap {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlHMap) Text(val any) HtmlHMap {
	p.setText(val)
	return p
}

func (p *htmlHMap) Title(val any) HtmlHMap {
	p.SetProperty("title", val)
	return p
}

func (p *htmlHMap) Translate(val any) HtmlHMap {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlHMap) VirtualKeyBoardPolicy(val any) HtmlHMap {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Mark return a html <mark> element
func Mark() HtmlMark {
	return &htmlMark{htmlBaseElement: htmlBaseElement{tag: "mark"}}
}

// HtmlMark represent a html <mark> element
type HtmlMark interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlMark

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlMark

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlMark

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlMark

	// Id set element id attribute
	Id(val string) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlMark

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlMark

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlMark

	// Text set val as text conent for current element
	Text(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlMark

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlMark
}

type htmlMark struct {
	htmlBaseElement
}

func (p *htmlMark) AccessKey(val any) HtmlMark {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlMark) AutoCapitalize(val any) HtmlMark {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlMark) AutoFocus(val any) HtmlMark {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlMark) Body(elems ...UI) HtmlMark {
	p.setBody(elems...)
	return p
}

func (p *htmlMark) Class(name string, items ...*Ref[StyleItem]) HtmlMark {
	p.setClass(name, items...)
	return p
}

func (p *htmlMark) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMark {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlMark) ContentEditAble(val any) HtmlMark {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlMark) DataWith(name string, val any) HtmlMark {
	p.dataWith(name, val)
	return p
}

func (p *htmlMark) Dir(val any) HtmlMark {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlMark) DraggAble(val any) HtmlMark {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlMark) EnterKeyHint(val any) HtmlMark {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlMark) Hidden(val any) HtmlMark {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlMark) Id(val string) HtmlMark {
	p.SetUIElementId(val)
	return p
}

func (p *htmlMark) Inert(val any) HtmlMark {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlMark) InputMode(val any) HtmlMark {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlMark) Is(val any) HtmlMark {
	p.SetProperty("is", val)
	return p
}

func (p *htmlMark) ItemId(val any) HtmlMark {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlMark) ItemProp(val any) HtmlMark {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlMark) ItemRef(val any) HtmlMark {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlMark) ItemScope(val any) HtmlMark {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlMark) ItemType(val any) HtmlMark {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlMark) Lang(val any) HtmlMark {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlMark) Nonce(val any) HtmlMark {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlMark) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlMark) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlMark) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlMark) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlMark) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlMark) OnBlur(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlMark) OnClick(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlMark) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlMark) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlMark) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlMark) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlMark) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlMark) OnCopy(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlMark) OnCut(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlMark) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlMark) OnDrag(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlMark) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlMark) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlMark) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlMark) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlMark) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlMark) OnDrop(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlMark) OnError(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlMark) OnFocus(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlMark) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlMark) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlMark) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlMark) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlMark) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlMark) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlMark) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlMark) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlMark) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlMark) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlMark) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlMark) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlMark) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlMark) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlMark) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlMark) OnPaste(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlMark) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlMark) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlMark) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlMark) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlMark) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlMark) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlMark) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlMark) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlMark) OnScroll(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlMark) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlMark) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlMark) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlMark) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlMark) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlMark) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlMark) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlMark) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlMark) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlMark) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlMark) OnWheel(handler func(event Event, options ...any), options ...any) HtmlMark {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlMark) Part(val any) HtmlMark {
	p.SetProperty("part", val)
	return p
}

func (p *htmlMark) Slot(val any) HtmlMark {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlMark) SpellCheck(val any) HtmlMark {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlMark) Style(items ...*Ref[StyleItem]) HtmlMark {
	p.setStyle(items...)
	return p
}

func (p *htmlMark) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMark {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlMark) TabIndex(val any) HtmlMark {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlMark) Text(val any) HtmlMark {
	p.setText(val)
	return p
}

func (p *htmlMark) Title(val any) HtmlMark {
	p.SetProperty("title", val)
	return p
}

func (p *htmlMark) Translate(val any) HtmlMark {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlMark) VirtualKeyBoardPolicy(val any) HtmlMark {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Menu return a html <menu> element
func Menu() HtmlMenu {
	return &htmlMenu{htmlBaseElement: htmlBaseElement{tag: "menu"}}
}

// HtmlMenu represent a html <menu> element
type HtmlMenu interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlMenu

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlMenu

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlMenu

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlMenu

	// Id set element id attribute
	Id(val string) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlMenu

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlMenu

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlMenu

	// Text set val as text conent for current element
	Text(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlMenu

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlMenu
}

type htmlMenu struct {
	htmlBaseElement
}

func (p *htmlMenu) AccessKey(val any) HtmlMenu {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlMenu) AutoCapitalize(val any) HtmlMenu {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlMenu) AutoFocus(val any) HtmlMenu {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlMenu) Body(elems ...UI) HtmlMenu {
	p.setBody(elems...)
	return p
}

func (p *htmlMenu) Class(name string, items ...*Ref[StyleItem]) HtmlMenu {
	p.setClass(name, items...)
	return p
}

func (p *htmlMenu) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMenu {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlMenu) ContentEditAble(val any) HtmlMenu {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlMenu) DataWith(name string, val any) HtmlMenu {
	p.dataWith(name, val)
	return p
}

func (p *htmlMenu) Dir(val any) HtmlMenu {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlMenu) DraggAble(val any) HtmlMenu {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlMenu) EnterKeyHint(val any) HtmlMenu {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlMenu) Hidden(val any) HtmlMenu {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlMenu) Id(val string) HtmlMenu {
	p.SetUIElementId(val)
	return p
}

func (p *htmlMenu) Inert(val any) HtmlMenu {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlMenu) InputMode(val any) HtmlMenu {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlMenu) Is(val any) HtmlMenu {
	p.SetProperty("is", val)
	return p
}

func (p *htmlMenu) ItemId(val any) HtmlMenu {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlMenu) ItemProp(val any) HtmlMenu {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlMenu) ItemRef(val any) HtmlMenu {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlMenu) ItemScope(val any) HtmlMenu {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlMenu) ItemType(val any) HtmlMenu {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlMenu) Lang(val any) HtmlMenu {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlMenu) Nonce(val any) HtmlMenu {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlMenu) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlMenu) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlMenu) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlMenu) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlMenu) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlMenu) OnBlur(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlMenu) OnClick(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlMenu) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlMenu) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlMenu) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlMenu) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlMenu) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlMenu) OnCopy(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlMenu) OnCut(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlMenu) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlMenu) OnDrag(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlMenu) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlMenu) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlMenu) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlMenu) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlMenu) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlMenu) OnDrop(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlMenu) OnError(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlMenu) OnFocus(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlMenu) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlMenu) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlMenu) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlMenu) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlMenu) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlMenu) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlMenu) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlMenu) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlMenu) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlMenu) OnPaste(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlMenu) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlMenu) OnScroll(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlMenu) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlMenu) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlMenu) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlMenu) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlMenu) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlMenu) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlMenu) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlMenu) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlMenu) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlMenu) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlMenu) OnWheel(handler func(event Event, options ...any), options ...any) HtmlMenu {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlMenu) Part(val any) HtmlMenu {
	p.SetProperty("part", val)
	return p
}

func (p *htmlMenu) Slot(val any) HtmlMenu {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlMenu) SpellCheck(val any) HtmlMenu {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlMenu) Style(items ...*Ref[StyleItem]) HtmlMenu {
	p.setStyle(items...)
	return p
}

func (p *htmlMenu) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMenu {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlMenu) TabIndex(val any) HtmlMenu {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlMenu) Text(val any) HtmlMenu {
	p.setText(val)
	return p
}

func (p *htmlMenu) Title(val any) HtmlMenu {
	p.SetProperty("title", val)
	return p
}

func (p *htmlMenu) Translate(val any) HtmlMenu {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlMenu) VirtualKeyBoardPolicy(val any) HtmlMenu {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Meta return a html <meta> element
func Meta() HtmlMeta {
	return &htmlMeta{htmlBaseElement: htmlBaseElement{tag: "meta"}}
}

// HtmlMeta represent a html <meta> element
type HtmlMeta interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlMeta

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset
	Charset(val any) HtmlMeta

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlMeta

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content
	Content(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlMeta

	// Id set element id attribute
	Id(val string) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-name
	Name(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlMeta

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlMeta

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlMeta

	// Text set val as text conent for current element
	Text(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlMeta

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlMeta
}

type htmlMeta struct {
	htmlBaseElement
}

func (p *htmlMeta) AccessKey(val any) HtmlMeta {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlMeta) AutoCapitalize(val any) HtmlMeta {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlMeta) AutoFocus(val any) HtmlMeta {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlMeta) Body(elems ...UI) HtmlMeta {
	p.setBody(elems...)
	return p
}

func (p *htmlMeta) Charset(val any) HtmlMeta {
	p.SetProperty("charset", val)
	return p
}

func (p *htmlMeta) Class(name string, items ...*Ref[StyleItem]) HtmlMeta {
	p.setClass(name, items...)
	return p
}

func (p *htmlMeta) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMeta {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlMeta) Content(val any) HtmlMeta {
	p.SetProperty("content", val)
	return p
}

func (p *htmlMeta) ContentEditAble(val any) HtmlMeta {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlMeta) DataWith(name string, val any) HtmlMeta {
	p.dataWith(name, val)
	return p
}

func (p *htmlMeta) Dir(val any) HtmlMeta {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlMeta) DraggAble(val any) HtmlMeta {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlMeta) EnterKeyHint(val any) HtmlMeta {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlMeta) Hidden(val any) HtmlMeta {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlMeta) Id(val string) HtmlMeta {
	p.SetUIElementId(val)
	return p
}

func (p *htmlMeta) Inert(val any) HtmlMeta {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlMeta) InputMode(val any) HtmlMeta {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlMeta) Is(val any) HtmlMeta {
	p.SetProperty("is", val)
	return p
}

func (p *htmlMeta) ItemId(val any) HtmlMeta {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlMeta) ItemProp(val any) HtmlMeta {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlMeta) ItemRef(val any) HtmlMeta {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlMeta) ItemScope(val any) HtmlMeta {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlMeta) ItemType(val any) HtmlMeta {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlMeta) Lang(val any) HtmlMeta {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlMeta) Name(val any) HtmlMeta {
	p.SetProperty("name", val)
	return p
}

func (p *htmlMeta) Nonce(val any) HtmlMeta {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlMeta) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlMeta) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlMeta) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlMeta) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlMeta) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlMeta) OnBlur(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlMeta) OnClick(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlMeta) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlMeta) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlMeta) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlMeta) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlMeta) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlMeta) OnCopy(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlMeta) OnCut(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlMeta) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlMeta) OnDrag(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlMeta) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlMeta) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlMeta) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlMeta) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlMeta) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlMeta) OnDrop(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlMeta) OnError(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlMeta) OnFocus(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlMeta) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlMeta) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlMeta) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlMeta) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlMeta) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlMeta) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlMeta) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlMeta) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlMeta) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlMeta) OnPaste(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlMeta) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlMeta) OnScroll(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlMeta) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlMeta) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlMeta) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlMeta) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlMeta) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlMeta) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlMeta) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlMeta) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlMeta) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlMeta) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlMeta) OnWheel(handler func(event Event, options ...any), options ...any) HtmlMeta {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlMeta) Part(val any) HtmlMeta {
	p.SetProperty("part", val)
	return p
}

func (p *htmlMeta) Slot(val any) HtmlMeta {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlMeta) SpellCheck(val any) HtmlMeta {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlMeta) Style(items ...*Ref[StyleItem]) HtmlMeta {
	p.setStyle(items...)
	return p
}

func (p *htmlMeta) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMeta {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlMeta) TabIndex(val any) HtmlMeta {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlMeta) Text(val any) HtmlMeta {
	p.setText(val)
	return p
}

func (p *htmlMeta) Title(val any) HtmlMeta {
	p.SetProperty("title", val)
	return p
}

func (p *htmlMeta) Translate(val any) HtmlMeta {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlMeta) VirtualKeyBoardPolicy(val any) HtmlMeta {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Meter return a html <meter> element
func Meter() HtmlMeter {
	return &htmlMeter{htmlBaseElement: htmlBaseElement{tag: "meter"}}
}

// HtmlMeter represent a html <meter> element
type HtmlMeter interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlMeter

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlMeter

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlMeter

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-high
	High(val any) HtmlMeter

	// Id set element id attribute
	Id(val string) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-low
	Low(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-max
	Max(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-min
	Min(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-optimum
	Optimum(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlMeter

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlMeter

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlMeter

	// Text set val as text conent for current element
	Text(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-value
	Value(val any) HtmlMeter

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlMeter
}

type htmlMeter struct {
	htmlBaseElement
}

func (p *htmlMeter) AccessKey(val any) HtmlMeter {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlMeter) AutoCapitalize(val any) HtmlMeter {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlMeter) AutoFocus(val any) HtmlMeter {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlMeter) Body(elems ...UI) HtmlMeter {
	p.setBody(elems...)
	return p
}

func (p *htmlMeter) Class(name string, items ...*Ref[StyleItem]) HtmlMeter {
	p.setClass(name, items...)
	return p
}

func (p *htmlMeter) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlMeter {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlMeter) ContentEditAble(val any) HtmlMeter {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlMeter) DataWith(name string, val any) HtmlMeter {
	p.dataWith(name, val)
	return p
}

func (p *htmlMeter) Dir(val any) HtmlMeter {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlMeter) DraggAble(val any) HtmlMeter {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlMeter) EnterKeyHint(val any) HtmlMeter {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlMeter) Hidden(val any) HtmlMeter {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlMeter) High(val any) HtmlMeter {
	p.SetProperty("high", val)
	return p
}

func (p *htmlMeter) Id(val string) HtmlMeter {
	p.SetUIElementId(val)
	return p
}

func (p *htmlMeter) Inert(val any) HtmlMeter {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlMeter) InputMode(val any) HtmlMeter {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlMeter) Is(val any) HtmlMeter {
	p.SetProperty("is", val)
	return p
}

func (p *htmlMeter) ItemId(val any) HtmlMeter {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlMeter) ItemProp(val any) HtmlMeter {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlMeter) ItemRef(val any) HtmlMeter {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlMeter) ItemScope(val any) HtmlMeter {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlMeter) ItemType(val any) HtmlMeter {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlMeter) Lang(val any) HtmlMeter {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlMeter) Low(val any) HtmlMeter {
	p.SetProperty("low", val)
	return p
}

func (p *htmlMeter) Max(val any) HtmlMeter {
	p.SetProperty("max", val)
	return p
}

func (p *htmlMeter) Min(val any) HtmlMeter {
	p.SetProperty("min", val)
	return p
}

func (p *htmlMeter) Nonce(val any) HtmlMeter {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlMeter) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlMeter) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlMeter) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlMeter) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlMeter) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlMeter) OnBlur(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlMeter) OnClick(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlMeter) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlMeter) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlMeter) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlMeter) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlMeter) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlMeter) OnCopy(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlMeter) OnCut(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlMeter) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlMeter) OnDrag(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlMeter) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlMeter) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlMeter) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlMeter) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlMeter) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlMeter) OnDrop(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlMeter) OnError(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlMeter) OnFocus(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlMeter) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlMeter) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlMeter) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlMeter) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlMeter) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlMeter) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlMeter) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlMeter) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlMeter) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlMeter) OnPaste(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlMeter) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlMeter) OnScroll(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlMeter) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlMeter) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlMeter) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlMeter) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlMeter) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlMeter) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlMeter) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlMeter) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlMeter) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlMeter) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlMeter) OnWheel(handler func(event Event, options ...any), options ...any) HtmlMeter {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlMeter) Optimum(val any) HtmlMeter {
	p.SetProperty("optimum", val)
	return p
}

func (p *htmlMeter) Part(val any) HtmlMeter {
	p.SetProperty("part", val)
	return p
}

func (p *htmlMeter) Slot(val any) HtmlMeter {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlMeter) SpellCheck(val any) HtmlMeter {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlMeter) Style(items ...*Ref[StyleItem]) HtmlMeter {
	p.setStyle(items...)
	return p
}

func (p *htmlMeter) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlMeter {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlMeter) TabIndex(val any) HtmlMeter {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlMeter) Text(val any) HtmlMeter {
	p.setText(val)
	return p
}

func (p *htmlMeter) Title(val any) HtmlMeter {
	p.SetProperty("title", val)
	return p
}

func (p *htmlMeter) Translate(val any) HtmlMeter {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlMeter) Value(val any) HtmlMeter {
	p.SetProperty("value", val)
	return p
}

func (p *htmlMeter) VirtualKeyBoardPolicy(val any) HtmlMeter {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Nav return a html <nav> element
func Nav() HtmlNav {
	return &htmlNav{htmlBaseElement: htmlBaseElement{tag: "nav"}}
}

// HtmlNav represent a html <nav> element
type HtmlNav interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlNav

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlNav

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlNav

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlNav

	// Id set element id attribute
	Id(val string) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlNav

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlNav

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlNav

	// Text set val as text conent for current element
	Text(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlNav

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlNav
}

type htmlNav struct {
	htmlBaseElement
}

func (p *htmlNav) AccessKey(val any) HtmlNav {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlNav) AutoCapitalize(val any) HtmlNav {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlNav) AutoFocus(val any) HtmlNav {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlNav) Body(elems ...UI) HtmlNav {
	p.setBody(elems...)
	return p
}

func (p *htmlNav) Class(name string, items ...*Ref[StyleItem]) HtmlNav {
	p.setClass(name, items...)
	return p
}

func (p *htmlNav) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlNav {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlNav) ContentEditAble(val any) HtmlNav {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlNav) DataWith(name string, val any) HtmlNav {
	p.dataWith(name, val)
	return p
}

func (p *htmlNav) Dir(val any) HtmlNav {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlNav) DraggAble(val any) HtmlNav {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlNav) EnterKeyHint(val any) HtmlNav {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlNav) Hidden(val any) HtmlNav {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlNav) Id(val string) HtmlNav {
	p.SetUIElementId(val)
	return p
}

func (p *htmlNav) Inert(val any) HtmlNav {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlNav) InputMode(val any) HtmlNav {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlNav) Is(val any) HtmlNav {
	p.SetProperty("is", val)
	return p
}

func (p *htmlNav) ItemId(val any) HtmlNav {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlNav) ItemProp(val any) HtmlNav {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlNav) ItemRef(val any) HtmlNav {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlNav) ItemScope(val any) HtmlNav {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlNav) ItemType(val any) HtmlNav {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlNav) Lang(val any) HtmlNav {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlNav) Nonce(val any) HtmlNav {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlNav) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlNav) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlNav) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlNav) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlNav) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlNav) OnBlur(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlNav) OnClick(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlNav) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlNav) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlNav) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlNav) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlNav) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlNav) OnCopy(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlNav) OnCut(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlNav) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlNav) OnDrag(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlNav) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlNav) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlNav) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlNav) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlNav) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlNav) OnDrop(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlNav) OnError(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlNav) OnFocus(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlNav) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlNav) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlNav) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlNav) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlNav) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlNav) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlNav) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlNav) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlNav) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlNav) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlNav) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlNav) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlNav) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlNav) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlNav) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlNav) OnPaste(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlNav) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlNav) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlNav) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlNav) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlNav) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlNav) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlNav) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlNav) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlNav) OnScroll(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlNav) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlNav) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlNav) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlNav) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlNav) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlNav) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlNav) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlNav) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlNav) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlNav) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlNav) OnWheel(handler func(event Event, options ...any), options ...any) HtmlNav {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlNav) Part(val any) HtmlNav {
	p.SetProperty("part", val)
	return p
}

func (p *htmlNav) Slot(val any) HtmlNav {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlNav) SpellCheck(val any) HtmlNav {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlNav) Style(items ...*Ref[StyleItem]) HtmlNav {
	p.setStyle(items...)
	return p
}

func (p *htmlNav) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlNav {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlNav) TabIndex(val any) HtmlNav {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlNav) Text(val any) HtmlNav {
	p.setText(val)
	return p
}

func (p *htmlNav) Title(val any) HtmlNav {
	p.SetProperty("title", val)
	return p
}

func (p *htmlNav) Translate(val any) HtmlNav {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlNav) VirtualKeyBoardPolicy(val any) HtmlNav {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// NoScript return a html <noscript> element
func NoScript() HtmlNoScript {
	return &htmlNoScript{htmlBaseElement: htmlBaseElement{tag: "noscript"}}
}

// HtmlNoScript represent a html <noscript> element
type HtmlNoScript interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlNoScript

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlNoScript

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlNoScript

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlNoScript

	// Id set element id attribute
	Id(val string) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlNoScript

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlNoScript

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlNoScript

	// Text set val as text conent for current element
	Text(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlNoScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlNoScript
}

type htmlNoScript struct {
	htmlBaseElement
}

func (p *htmlNoScript) AccessKey(val any) HtmlNoScript {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlNoScript) AutoCapitalize(val any) HtmlNoScript {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlNoScript) AutoFocus(val any) HtmlNoScript {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlNoScript) Body(elems ...UI) HtmlNoScript {
	p.setBody(elems...)
	return p
}

func (p *htmlNoScript) Class(name string, items ...*Ref[StyleItem]) HtmlNoScript {
	p.setClass(name, items...)
	return p
}

func (p *htmlNoScript) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlNoScript {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlNoScript) ContentEditAble(val any) HtmlNoScript {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlNoScript) DataWith(name string, val any) HtmlNoScript {
	p.dataWith(name, val)
	return p
}

func (p *htmlNoScript) Dir(val any) HtmlNoScript {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlNoScript) DraggAble(val any) HtmlNoScript {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlNoScript) EnterKeyHint(val any) HtmlNoScript {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlNoScript) Hidden(val any) HtmlNoScript {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlNoScript) Id(val string) HtmlNoScript {
	p.SetUIElementId(val)
	return p
}

func (p *htmlNoScript) Inert(val any) HtmlNoScript {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlNoScript) InputMode(val any) HtmlNoScript {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlNoScript) Is(val any) HtmlNoScript {
	p.SetProperty("is", val)
	return p
}

func (p *htmlNoScript) ItemId(val any) HtmlNoScript {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlNoScript) ItemProp(val any) HtmlNoScript {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlNoScript) ItemRef(val any) HtmlNoScript {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlNoScript) ItemScope(val any) HtmlNoScript {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlNoScript) ItemType(val any) HtmlNoScript {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlNoScript) Lang(val any) HtmlNoScript {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlNoScript) Nonce(val any) HtmlNoScript {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlNoScript) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlNoScript) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlNoScript) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlNoScript) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlNoScript) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlNoScript) OnBlur(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlNoScript) OnClick(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlNoScript) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlNoScript) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlNoScript) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlNoScript) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlNoScript) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlNoScript) OnCopy(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlNoScript) OnCut(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlNoScript) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlNoScript) OnDrag(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlNoScript) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlNoScript) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlNoScript) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlNoScript) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlNoScript) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlNoScript) OnDrop(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlNoScript) OnError(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlNoScript) OnFocus(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlNoScript) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlNoScript) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlNoScript) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlNoScript) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlNoScript) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlNoScript) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlNoScript) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlNoScript) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlNoScript) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlNoScript) OnPaste(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlNoScript) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlNoScript) OnScroll(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlNoScript) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlNoScript) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlNoScript) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlNoScript) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlNoScript) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlNoScript) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlNoScript) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlNoScript) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlNoScript) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlNoScript) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlNoScript) OnWheel(handler func(event Event, options ...any), options ...any) HtmlNoScript {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlNoScript) Part(val any) HtmlNoScript {
	p.SetProperty("part", val)
	return p
}

func (p *htmlNoScript) Slot(val any) HtmlNoScript {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlNoScript) SpellCheck(val any) HtmlNoScript {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlNoScript) Style(items ...*Ref[StyleItem]) HtmlNoScript {
	p.setStyle(items...)
	return p
}

func (p *htmlNoScript) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlNoScript {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlNoScript) TabIndex(val any) HtmlNoScript {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlNoScript) Text(val any) HtmlNoScript {
	p.setText(val)
	return p
}

func (p *htmlNoScript) Title(val any) HtmlNoScript {
	p.SetProperty("title", val)
	return p
}

func (p *htmlNoScript) Translate(val any) HtmlNoScript {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlNoScript) VirtualKeyBoardPolicy(val any) HtmlNoScript {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Object return a html <object> element
func Object() HtmlObject {
	return &htmlObject{htmlBaseElement: htmlBaseElement{tag: "object"}}
}

// HtmlObject represent a html <object> element
type HtmlObject interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlObject

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlObject

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlObject

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-data
	Data(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-form
	Form(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-height
	Height(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlObject

	// Id set element id attribute
	Id(val string) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-name
	Name(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlObject

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlObject

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlObject

	// Text set val as text conent for current element
	Text(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-type
	Type(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-usemap
	UseMap(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlObject

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object#attr-width
	Width(val any) HtmlObject
}

type htmlObject struct {
	htmlBaseElement
}

func (p *htmlObject) AccessKey(val any) HtmlObject {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlObject) AutoCapitalize(val any) HtmlObject {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlObject) AutoFocus(val any) HtmlObject {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlObject) Body(elems ...UI) HtmlObject {
	p.setBody(elems...)
	return p
}

func (p *htmlObject) Class(name string, items ...*Ref[StyleItem]) HtmlObject {
	p.setClass(name, items...)
	return p
}

func (p *htmlObject) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlObject {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlObject) ContentEditAble(val any) HtmlObject {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlObject) Data(val any) HtmlObject {
	p.SetProperty("data", val)
	return p
}

func (p *htmlObject) DataWith(name string, val any) HtmlObject {
	p.dataWith(name, val)
	return p
}

func (p *htmlObject) Dir(val any) HtmlObject {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlObject) DraggAble(val any) HtmlObject {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlObject) EnterKeyHint(val any) HtmlObject {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlObject) Form(val any) HtmlObject {
	p.SetProperty("form", val)
	return p
}

func (p *htmlObject) Height(val any) HtmlObject {
	p.SetProperty("height", val)
	return p
}

func (p *htmlObject) Hidden(val any) HtmlObject {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlObject) Id(val string) HtmlObject {
	p.SetUIElementId(val)
	return p
}

func (p *htmlObject) Inert(val any) HtmlObject {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlObject) InputMode(val any) HtmlObject {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlObject) Is(val any) HtmlObject {
	p.SetProperty("is", val)
	return p
}

func (p *htmlObject) ItemId(val any) HtmlObject {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlObject) ItemProp(val any) HtmlObject {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlObject) ItemRef(val any) HtmlObject {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlObject) ItemScope(val any) HtmlObject {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlObject) ItemType(val any) HtmlObject {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlObject) Lang(val any) HtmlObject {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlObject) Name(val any) HtmlObject {
	p.SetProperty("name", val)
	return p
}

func (p *htmlObject) Nonce(val any) HtmlObject {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlObject) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlObject) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlObject) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlObject) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlObject) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlObject) OnBlur(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlObject) OnClick(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlObject) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlObject) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlObject) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlObject) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlObject) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlObject) OnCopy(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlObject) OnCut(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlObject) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlObject) OnDrag(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlObject) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlObject) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlObject) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlObject) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlObject) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlObject) OnDrop(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlObject) OnError(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlObject) OnFocus(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlObject) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlObject) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlObject) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlObject) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlObject) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlObject) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlObject) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlObject) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlObject) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlObject) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlObject) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlObject) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlObject) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlObject) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlObject) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlObject) OnPaste(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlObject) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlObject) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlObject) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlObject) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlObject) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlObject) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlObject) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlObject) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlObject) OnScroll(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlObject) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlObject) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlObject) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlObject) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlObject) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlObject) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlObject) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlObject) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlObject) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlObject) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlObject) OnWheel(handler func(event Event, options ...any), options ...any) HtmlObject {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlObject) Part(val any) HtmlObject {
	p.SetProperty("part", val)
	return p
}

func (p *htmlObject) Slot(val any) HtmlObject {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlObject) SpellCheck(val any) HtmlObject {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlObject) Style(items ...*Ref[StyleItem]) HtmlObject {
	p.setStyle(items...)
	return p
}

func (p *htmlObject) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlObject {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlObject) TabIndex(val any) HtmlObject {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlObject) Text(val any) HtmlObject {
	p.setText(val)
	return p
}

func (p *htmlObject) Title(val any) HtmlObject {
	p.SetProperty("title", val)
	return p
}

func (p *htmlObject) Translate(val any) HtmlObject {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlObject) Type(val any) HtmlObject {
	p.SetProperty("type", val)
	return p
}

func (p *htmlObject) UseMap(val any) HtmlObject {
	p.SetProperty("usemap", val)
	return p
}

func (p *htmlObject) VirtualKeyBoardPolicy(val any) HtmlObject {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlObject) Width(val any) HtmlObject {
	p.SetProperty("width", val)
	return p
}

// Ol return a html <ol> element
func Ol() HtmlOl {
	return &htmlOl{htmlBaseElement: htmlBaseElement{tag: "ol"}}
}

// HtmlOl represent a html <ol> element
type HtmlOl interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlOl

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlOl

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlOl

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlOl

	// Id set element id attribute
	Id(val string) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-reversed
	Reversed(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-start
	Start(val any) HtmlOl

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlOl

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlOl

	// Text set val as text conent for current element
	Text(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-type
	Type(val any) HtmlOl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlOl
}

type htmlOl struct {
	htmlBaseElement
}

func (p *htmlOl) AccessKey(val any) HtmlOl {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlOl) AutoCapitalize(val any) HtmlOl {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlOl) AutoFocus(val any) HtmlOl {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlOl) Body(elems ...UI) HtmlOl {
	p.setBody(elems...)
	return p
}

func (p *htmlOl) Class(name string, items ...*Ref[StyleItem]) HtmlOl {
	p.setClass(name, items...)
	return p
}

func (p *htmlOl) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOl {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlOl) ContentEditAble(val any) HtmlOl {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlOl) DataWith(name string, val any) HtmlOl {
	p.dataWith(name, val)
	return p
}

func (p *htmlOl) Dir(val any) HtmlOl {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlOl) DraggAble(val any) HtmlOl {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlOl) EnterKeyHint(val any) HtmlOl {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlOl) Hidden(val any) HtmlOl {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlOl) Id(val string) HtmlOl {
	p.SetUIElementId(val)
	return p
}

func (p *htmlOl) Inert(val any) HtmlOl {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlOl) InputMode(val any) HtmlOl {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlOl) Is(val any) HtmlOl {
	p.SetProperty("is", val)
	return p
}

func (p *htmlOl) ItemId(val any) HtmlOl {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlOl) ItemProp(val any) HtmlOl {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlOl) ItemRef(val any) HtmlOl {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlOl) ItemScope(val any) HtmlOl {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlOl) ItemType(val any) HtmlOl {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlOl) Lang(val any) HtmlOl {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlOl) Nonce(val any) HtmlOl {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlOl) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlOl) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlOl) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlOl) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlOl) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlOl) OnBlur(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlOl) OnClick(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlOl) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlOl) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlOl) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlOl) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlOl) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlOl) OnCopy(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlOl) OnCut(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlOl) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlOl) OnDrag(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlOl) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlOl) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlOl) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlOl) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlOl) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlOl) OnDrop(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlOl) OnError(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlOl) OnFocus(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlOl) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlOl) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlOl) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlOl) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlOl) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlOl) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlOl) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlOl) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlOl) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlOl) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlOl) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlOl) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlOl) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlOl) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlOl) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlOl) OnPaste(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlOl) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlOl) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlOl) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlOl) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlOl) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlOl) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlOl) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlOl) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlOl) OnScroll(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlOl) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlOl) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlOl) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlOl) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlOl) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlOl) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlOl) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlOl) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlOl) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlOl) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlOl) OnWheel(handler func(event Event, options ...any), options ...any) HtmlOl {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlOl) Part(val any) HtmlOl {
	p.SetProperty("part", val)
	return p
}

func (p *htmlOl) Reversed(val any) HtmlOl {
	p.SetProperty("reversed", val)
	return p
}

func (p *htmlOl) Slot(val any) HtmlOl {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlOl) SpellCheck(val any) HtmlOl {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlOl) Start(val any) HtmlOl {
	p.SetProperty("start", val)
	return p
}

func (p *htmlOl) Style(items ...*Ref[StyleItem]) HtmlOl {
	p.setStyle(items...)
	return p
}

func (p *htmlOl) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOl {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlOl) TabIndex(val any) HtmlOl {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlOl) Text(val any) HtmlOl {
	p.setText(val)
	return p
}

func (p *htmlOl) Title(val any) HtmlOl {
	p.SetProperty("title", val)
	return p
}

func (p *htmlOl) Translate(val any) HtmlOl {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlOl) Type(val any) HtmlOl {
	p.SetProperty("type", val)
	return p
}

func (p *htmlOl) VirtualKeyBoardPolicy(val any) HtmlOl {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// OptGroup return a html <optgroup> element
func OptGroup() HtmlOptGroup {
	return &htmlOptGroup{htmlBaseElement: htmlBaseElement{tag: "optgroup"}}
}

// HtmlOptGroup represent a html <optgroup> element
type HtmlOptGroup interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlOptGroup

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlOptGroup

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlOptGroup

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup#attr-disabled
	Disabled(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlOptGroup

	// Id set element id attribute
	Id(val string) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup#attr-label
	Label(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlOptGroup

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlOptGroup

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlOptGroup

	// Text set val as text conent for current element
	Text(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlOptGroup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlOptGroup
}

type htmlOptGroup struct {
	htmlBaseElement
}

func (p *htmlOptGroup) AccessKey(val any) HtmlOptGroup {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlOptGroup) AutoCapitalize(val any) HtmlOptGroup {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlOptGroup) AutoFocus(val any) HtmlOptGroup {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlOptGroup) Body(elems ...UI) HtmlOptGroup {
	p.setBody(elems...)
	return p
}

func (p *htmlOptGroup) Class(name string, items ...*Ref[StyleItem]) HtmlOptGroup {
	p.setClass(name, items...)
	return p
}

func (p *htmlOptGroup) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOptGroup {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlOptGroup) ContentEditAble(val any) HtmlOptGroup {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlOptGroup) DataWith(name string, val any) HtmlOptGroup {
	p.dataWith(name, val)
	return p
}

func (p *htmlOptGroup) Dir(val any) HtmlOptGroup {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlOptGroup) Disabled(val any) HtmlOptGroup {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlOptGroup) DraggAble(val any) HtmlOptGroup {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlOptGroup) EnterKeyHint(val any) HtmlOptGroup {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlOptGroup) Hidden(val any) HtmlOptGroup {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlOptGroup) Id(val string) HtmlOptGroup {
	p.SetUIElementId(val)
	return p
}

func (p *htmlOptGroup) Inert(val any) HtmlOptGroup {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlOptGroup) InputMode(val any) HtmlOptGroup {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlOptGroup) Is(val any) HtmlOptGroup {
	p.SetProperty("is", val)
	return p
}

func (p *htmlOptGroup) ItemId(val any) HtmlOptGroup {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlOptGroup) ItemProp(val any) HtmlOptGroup {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlOptGroup) ItemRef(val any) HtmlOptGroup {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlOptGroup) ItemScope(val any) HtmlOptGroup {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlOptGroup) ItemType(val any) HtmlOptGroup {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlOptGroup) Label(val any) HtmlOptGroup {
	p.SetProperty("label", val)
	return p
}

func (p *htmlOptGroup) Lang(val any) HtmlOptGroup {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlOptGroup) Nonce(val any) HtmlOptGroup {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlOptGroup) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlOptGroup) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlOptGroup) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlOptGroup) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlOptGroup) OnBlur(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlOptGroup) OnClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlOptGroup) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlOptGroup) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlOptGroup) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlOptGroup) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlOptGroup) OnCopy(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlOptGroup) OnCut(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDrag(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlOptGroup) OnDrop(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlOptGroup) OnError(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlOptGroup) OnFocus(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlOptGroup) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlOptGroup) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlOptGroup) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlOptGroup) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlOptGroup) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlOptGroup) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlOptGroup) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlOptGroup) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlOptGroup) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPaste(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlOptGroup) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlOptGroup) OnScroll(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlOptGroup) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlOptGroup) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlOptGroup) OnWheel(handler func(event Event, options ...any), options ...any) HtmlOptGroup {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlOptGroup) Part(val any) HtmlOptGroup {
	p.SetProperty("part", val)
	return p
}

func (p *htmlOptGroup) Slot(val any) HtmlOptGroup {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlOptGroup) SpellCheck(val any) HtmlOptGroup {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlOptGroup) Style(items ...*Ref[StyleItem]) HtmlOptGroup {
	p.setStyle(items...)
	return p
}

func (p *htmlOptGroup) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOptGroup {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlOptGroup) TabIndex(val any) HtmlOptGroup {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlOptGroup) Text(val any) HtmlOptGroup {
	p.setText(val)
	return p
}

func (p *htmlOptGroup) Title(val any) HtmlOptGroup {
	p.SetProperty("title", val)
	return p
}

func (p *htmlOptGroup) Translate(val any) HtmlOptGroup {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlOptGroup) VirtualKeyBoardPolicy(val any) HtmlOptGroup {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Option return a html <option> element
func Option() HtmlOption {
	return &htmlOption{htmlBaseElement: htmlBaseElement{tag: "option"}}
}

// HtmlOption represent a html <option> element
type HtmlOption interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlOption

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlOption

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlOption

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-disabled
	Disabled(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlOption

	// Id set element id attribute
	Id(val string) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-label
	Label(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-selected
	Selected(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlOption

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlOption

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlOption

	// Text set val as text conent for current element
	Text(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value
	Value(val any) HtmlOption

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlOption
}

type htmlOption struct {
	htmlBaseElement
}

func (p *htmlOption) AccessKey(val any) HtmlOption {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlOption) AutoCapitalize(val any) HtmlOption {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlOption) AutoFocus(val any) HtmlOption {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlOption) Body(elems ...UI) HtmlOption {
	p.setBody(elems...)
	return p
}

func (p *htmlOption) Class(name string, items ...*Ref[StyleItem]) HtmlOption {
	p.setClass(name, items...)
	return p
}

func (p *htmlOption) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOption {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlOption) ContentEditAble(val any) HtmlOption {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlOption) DataWith(name string, val any) HtmlOption {
	p.dataWith(name, val)
	return p
}

func (p *htmlOption) Dir(val any) HtmlOption {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlOption) Disabled(val any) HtmlOption {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlOption) DraggAble(val any) HtmlOption {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlOption) EnterKeyHint(val any) HtmlOption {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlOption) Hidden(val any) HtmlOption {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlOption) Id(val string) HtmlOption {
	p.SetUIElementId(val)
	return p
}

func (p *htmlOption) Inert(val any) HtmlOption {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlOption) InputMode(val any) HtmlOption {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlOption) Is(val any) HtmlOption {
	p.SetProperty("is", val)
	return p
}

func (p *htmlOption) ItemId(val any) HtmlOption {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlOption) ItemProp(val any) HtmlOption {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlOption) ItemRef(val any) HtmlOption {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlOption) ItemScope(val any) HtmlOption {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlOption) ItemType(val any) HtmlOption {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlOption) Label(val any) HtmlOption {
	p.SetProperty("label", val)
	return p
}

func (p *htmlOption) Lang(val any) HtmlOption {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlOption) Nonce(val any) HtmlOption {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlOption) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlOption) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlOption) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlOption) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlOption) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlOption) OnBlur(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlOption) OnClick(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlOption) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlOption) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlOption) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlOption) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlOption) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlOption) OnCopy(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlOption) OnCut(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlOption) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlOption) OnDrag(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlOption) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlOption) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlOption) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlOption) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlOption) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlOption) OnDrop(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlOption) OnError(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlOption) OnFocus(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlOption) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlOption) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlOption) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlOption) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlOption) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlOption) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlOption) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlOption) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlOption) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlOption) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlOption) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlOption) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlOption) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlOption) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlOption) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlOption) OnPaste(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlOption) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlOption) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlOption) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlOption) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlOption) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlOption) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlOption) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlOption) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlOption) OnScroll(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlOption) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlOption) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlOption) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlOption) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlOption) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlOption) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlOption) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlOption) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlOption) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlOption) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlOption) OnWheel(handler func(event Event, options ...any), options ...any) HtmlOption {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlOption) Part(val any) HtmlOption {
	p.SetProperty("part", val)
	return p
}

func (p *htmlOption) Selected(val any) HtmlOption {
	p.SetProperty("selected", val)
	return p
}

func (p *htmlOption) Slot(val any) HtmlOption {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlOption) SpellCheck(val any) HtmlOption {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlOption) Style(items ...*Ref[StyleItem]) HtmlOption {
	p.setStyle(items...)
	return p
}

func (p *htmlOption) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOption {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlOption) TabIndex(val any) HtmlOption {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlOption) Text(val any) HtmlOption {
	p.setText(val)
	return p
}

func (p *htmlOption) Title(val any) HtmlOption {
	p.SetProperty("title", val)
	return p
}

func (p *htmlOption) Translate(val any) HtmlOption {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlOption) Value(val any) HtmlOption {
	p.SetProperty("value", val)
	return p
}

func (p *htmlOption) VirtualKeyBoardPolicy(val any) HtmlOption {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Output return a html <output> element
func Output() HtmlOutput {
	return &htmlOutput{htmlBaseElement: htmlBaseElement{tag: "output"}}
}

// HtmlOutput represent a html <output> element
type HtmlOutput interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlOutput

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlOutput

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlOutput

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output#attr-for
	For(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output#attr-form
	Form(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlOutput

	// Id set element id attribute
	Id(val string) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output#attr-name
	Name(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlOutput

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlOutput

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlOutput

	// Text set val as text conent for current element
	Text(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlOutput

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlOutput
}

type htmlOutput struct {
	htmlBaseElement
}

func (p *htmlOutput) AccessKey(val any) HtmlOutput {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlOutput) AutoCapitalize(val any) HtmlOutput {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlOutput) AutoFocus(val any) HtmlOutput {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlOutput) Body(elems ...UI) HtmlOutput {
	p.setBody(elems...)
	return p
}

func (p *htmlOutput) Class(name string, items ...*Ref[StyleItem]) HtmlOutput {
	p.setClass(name, items...)
	return p
}

func (p *htmlOutput) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlOutput {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlOutput) ContentEditAble(val any) HtmlOutput {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlOutput) DataWith(name string, val any) HtmlOutput {
	p.dataWith(name, val)
	return p
}

func (p *htmlOutput) Dir(val any) HtmlOutput {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlOutput) DraggAble(val any) HtmlOutput {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlOutput) EnterKeyHint(val any) HtmlOutput {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlOutput) For(val any) HtmlOutput {
	p.SetProperty("for", val)
	return p
}

func (p *htmlOutput) Form(val any) HtmlOutput {
	p.SetProperty("form", val)
	return p
}

func (p *htmlOutput) Hidden(val any) HtmlOutput {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlOutput) Id(val string) HtmlOutput {
	p.SetUIElementId(val)
	return p
}

func (p *htmlOutput) Inert(val any) HtmlOutput {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlOutput) InputMode(val any) HtmlOutput {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlOutput) Is(val any) HtmlOutput {
	p.SetProperty("is", val)
	return p
}

func (p *htmlOutput) ItemId(val any) HtmlOutput {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlOutput) ItemProp(val any) HtmlOutput {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlOutput) ItemRef(val any) HtmlOutput {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlOutput) ItemScope(val any) HtmlOutput {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlOutput) ItemType(val any) HtmlOutput {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlOutput) Lang(val any) HtmlOutput {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlOutput) Name(val any) HtmlOutput {
	p.SetProperty("name", val)
	return p
}

func (p *htmlOutput) Nonce(val any) HtmlOutput {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlOutput) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlOutput) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlOutput) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlOutput) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlOutput) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlOutput) OnBlur(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlOutput) OnClick(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlOutput) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlOutput) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlOutput) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlOutput) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlOutput) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlOutput) OnCopy(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlOutput) OnCut(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlOutput) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlOutput) OnDrag(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlOutput) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlOutput) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlOutput) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlOutput) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlOutput) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlOutput) OnDrop(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlOutput) OnError(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlOutput) OnFocus(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlOutput) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlOutput) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlOutput) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlOutput) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlOutput) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlOutput) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlOutput) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlOutput) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlOutput) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlOutput) OnPaste(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlOutput) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlOutput) OnScroll(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlOutput) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlOutput) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlOutput) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlOutput) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlOutput) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlOutput) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlOutput) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlOutput) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlOutput) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlOutput) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlOutput) OnWheel(handler func(event Event, options ...any), options ...any) HtmlOutput {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlOutput) Part(val any) HtmlOutput {
	p.SetProperty("part", val)
	return p
}

func (p *htmlOutput) Slot(val any) HtmlOutput {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlOutput) SpellCheck(val any) HtmlOutput {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlOutput) Style(items ...*Ref[StyleItem]) HtmlOutput {
	p.setStyle(items...)
	return p
}

func (p *htmlOutput) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlOutput {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlOutput) TabIndex(val any) HtmlOutput {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlOutput) Text(val any) HtmlOutput {
	p.setText(val)
	return p
}

func (p *htmlOutput) Title(val any) HtmlOutput {
	p.SetProperty("title", val)
	return p
}

func (p *htmlOutput) Translate(val any) HtmlOutput {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlOutput) VirtualKeyBoardPolicy(val any) HtmlOutput {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// P return a html <p> element
func P() HtmlP {
	return &htmlP{htmlBaseElement: htmlBaseElement{tag: "p"}}
}

// HtmlP represent a html <p> element
type HtmlP interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlP

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlP

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlP

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlP

	// Id set element id attribute
	Id(val string) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlP

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlP

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlP

	// Text set val as text conent for current element
	Text(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlP

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlP
}

type htmlP struct {
	htmlBaseElement
}

func (p *htmlP) AccessKey(val any) HtmlP {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlP) AutoCapitalize(val any) HtmlP {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlP) AutoFocus(val any) HtmlP {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlP) Body(elems ...UI) HtmlP {
	p.setBody(elems...)
	return p
}

func (p *htmlP) Class(name string, items ...*Ref[StyleItem]) HtmlP {
	p.setClass(name, items...)
	return p
}

func (p *htmlP) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlP {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlP) ContentEditAble(val any) HtmlP {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlP) DataWith(name string, val any) HtmlP {
	p.dataWith(name, val)
	return p
}

func (p *htmlP) Dir(val any) HtmlP {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlP) DraggAble(val any) HtmlP {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlP) EnterKeyHint(val any) HtmlP {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlP) Hidden(val any) HtmlP {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlP) Id(val string) HtmlP {
	p.SetUIElementId(val)
	return p
}

func (p *htmlP) Inert(val any) HtmlP {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlP) InputMode(val any) HtmlP {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlP) Is(val any) HtmlP {
	p.SetProperty("is", val)
	return p
}

func (p *htmlP) ItemId(val any) HtmlP {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlP) ItemProp(val any) HtmlP {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlP) ItemRef(val any) HtmlP {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlP) ItemScope(val any) HtmlP {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlP) ItemType(val any) HtmlP {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlP) Lang(val any) HtmlP {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlP) Nonce(val any) HtmlP {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlP) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlP) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlP) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlP) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlP) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlP) OnBlur(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlP) OnClick(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlP) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlP) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlP) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlP) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlP) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlP) OnCopy(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlP) OnCut(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlP) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlP) OnDrag(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlP) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlP) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlP) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlP) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlP) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlP) OnDrop(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlP) OnError(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlP) OnFocus(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlP) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlP) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlP) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlP) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlP) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlP) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlP) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlP) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlP) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlP) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlP) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlP) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlP) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlP) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlP) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlP) OnPaste(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlP) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlP) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlP) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlP) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlP) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlP) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlP) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlP) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlP) OnScroll(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlP) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlP) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlP) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlP) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlP) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlP) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlP) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlP) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlP) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlP) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlP) OnWheel(handler func(event Event, options ...any), options ...any) HtmlP {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlP) Part(val any) HtmlP {
	p.SetProperty("part", val)
	return p
}

func (p *htmlP) Slot(val any) HtmlP {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlP) SpellCheck(val any) HtmlP {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlP) Style(items ...*Ref[StyleItem]) HtmlP {
	p.setStyle(items...)
	return p
}

func (p *htmlP) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlP {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlP) TabIndex(val any) HtmlP {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlP) Text(val any) HtmlP {
	p.setText(val)
	return p
}

func (p *htmlP) Title(val any) HtmlP {
	p.SetProperty("title", val)
	return p
}

func (p *htmlP) Translate(val any) HtmlP {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlP) VirtualKeyBoardPolicy(val any) HtmlP {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Picture return a html <picture> element
func Picture() HtmlPicture {
	return &htmlPicture{htmlBaseElement: htmlBaseElement{tag: "picture"}}
}

// HtmlPicture represent a html <picture> element
type HtmlPicture interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlPicture

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlPicture

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlPicture

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlPicture

	// Id set element id attribute
	Id(val string) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlPicture

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlPicture

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlPicture

	// Text set val as text conent for current element
	Text(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlPicture

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlPicture
}

type htmlPicture struct {
	htmlBaseElement
}

func (p *htmlPicture) AccessKey(val any) HtmlPicture {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlPicture) AutoCapitalize(val any) HtmlPicture {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlPicture) AutoFocus(val any) HtmlPicture {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlPicture) Body(elems ...UI) HtmlPicture {
	p.setBody(elems...)
	return p
}

func (p *htmlPicture) Class(name string, items ...*Ref[StyleItem]) HtmlPicture {
	p.setClass(name, items...)
	return p
}

func (p *htmlPicture) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlPicture {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlPicture) ContentEditAble(val any) HtmlPicture {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlPicture) DataWith(name string, val any) HtmlPicture {
	p.dataWith(name, val)
	return p
}

func (p *htmlPicture) Dir(val any) HtmlPicture {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlPicture) DraggAble(val any) HtmlPicture {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlPicture) EnterKeyHint(val any) HtmlPicture {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlPicture) Hidden(val any) HtmlPicture {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlPicture) Id(val string) HtmlPicture {
	p.SetUIElementId(val)
	return p
}

func (p *htmlPicture) Inert(val any) HtmlPicture {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlPicture) InputMode(val any) HtmlPicture {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlPicture) Is(val any) HtmlPicture {
	p.SetProperty("is", val)
	return p
}

func (p *htmlPicture) ItemId(val any) HtmlPicture {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlPicture) ItemProp(val any) HtmlPicture {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlPicture) ItemRef(val any) HtmlPicture {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlPicture) ItemScope(val any) HtmlPicture {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlPicture) ItemType(val any) HtmlPicture {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlPicture) Lang(val any) HtmlPicture {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlPicture) Nonce(val any) HtmlPicture {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlPicture) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlPicture) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlPicture) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlPicture) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlPicture) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlPicture) OnBlur(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlPicture) OnClick(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlPicture) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlPicture) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlPicture) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlPicture) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlPicture) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlPicture) OnCopy(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlPicture) OnCut(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlPicture) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlPicture) OnDrag(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlPicture) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlPicture) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlPicture) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlPicture) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlPicture) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlPicture) OnDrop(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlPicture) OnError(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlPicture) OnFocus(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlPicture) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlPicture) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlPicture) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlPicture) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlPicture) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlPicture) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlPicture) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlPicture) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlPicture) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlPicture) OnPaste(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlPicture) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlPicture) OnScroll(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlPicture) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlPicture) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlPicture) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlPicture) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlPicture) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlPicture) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlPicture) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlPicture) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlPicture) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlPicture) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlPicture) OnWheel(handler func(event Event, options ...any), options ...any) HtmlPicture {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlPicture) Part(val any) HtmlPicture {
	p.SetProperty("part", val)
	return p
}

func (p *htmlPicture) Slot(val any) HtmlPicture {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlPicture) SpellCheck(val any) HtmlPicture {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlPicture) Style(items ...*Ref[StyleItem]) HtmlPicture {
	p.setStyle(items...)
	return p
}

func (p *htmlPicture) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlPicture {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlPicture) TabIndex(val any) HtmlPicture {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlPicture) Text(val any) HtmlPicture {
	p.setText(val)
	return p
}

func (p *htmlPicture) Title(val any) HtmlPicture {
	p.SetProperty("title", val)
	return p
}

func (p *htmlPicture) Translate(val any) HtmlPicture {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlPicture) VirtualKeyBoardPolicy(val any) HtmlPicture {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Pre return a html <pre> element
func Pre() HtmlPre {
	return &htmlPre{htmlBaseElement: htmlBaseElement{tag: "pre"}}
}

// HtmlPre represent a html <pre> element
type HtmlPre interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlPre

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlPre

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlPre

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlPre

	// Id set element id attribute
	Id(val string) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlPre

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlPre

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlPre

	// Text set val as text conent for current element
	Text(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlPre

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlPre
}

type htmlPre struct {
	htmlBaseElement
}

func (p *htmlPre) AccessKey(val any) HtmlPre {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlPre) AutoCapitalize(val any) HtmlPre {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlPre) AutoFocus(val any) HtmlPre {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlPre) Body(elems ...UI) HtmlPre {
	p.setBody(elems...)
	return p
}

func (p *htmlPre) Class(name string, items ...*Ref[StyleItem]) HtmlPre {
	p.setClass(name, items...)
	return p
}

func (p *htmlPre) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlPre {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlPre) ContentEditAble(val any) HtmlPre {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlPre) DataWith(name string, val any) HtmlPre {
	p.dataWith(name, val)
	return p
}

func (p *htmlPre) Dir(val any) HtmlPre {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlPre) DraggAble(val any) HtmlPre {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlPre) EnterKeyHint(val any) HtmlPre {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlPre) Hidden(val any) HtmlPre {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlPre) Id(val string) HtmlPre {
	p.SetUIElementId(val)
	return p
}

func (p *htmlPre) Inert(val any) HtmlPre {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlPre) InputMode(val any) HtmlPre {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlPre) Is(val any) HtmlPre {
	p.SetProperty("is", val)
	return p
}

func (p *htmlPre) ItemId(val any) HtmlPre {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlPre) ItemProp(val any) HtmlPre {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlPre) ItemRef(val any) HtmlPre {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlPre) ItemScope(val any) HtmlPre {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlPre) ItemType(val any) HtmlPre {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlPre) Lang(val any) HtmlPre {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlPre) Nonce(val any) HtmlPre {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlPre) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlPre) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlPre) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlPre) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlPre) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlPre) OnBlur(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlPre) OnClick(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlPre) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlPre) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlPre) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlPre) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlPre) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlPre) OnCopy(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlPre) OnCut(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlPre) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlPre) OnDrag(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlPre) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlPre) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlPre) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlPre) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlPre) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlPre) OnDrop(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlPre) OnError(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlPre) OnFocus(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlPre) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlPre) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlPre) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlPre) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlPre) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlPre) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlPre) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlPre) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlPre) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlPre) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlPre) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlPre) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlPre) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlPre) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlPre) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlPre) OnPaste(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlPre) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlPre) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlPre) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlPre) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlPre) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlPre) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlPre) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlPre) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlPre) OnScroll(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlPre) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlPre) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlPre) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlPre) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlPre) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlPre) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlPre) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlPre) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlPre) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlPre) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlPre) OnWheel(handler func(event Event, options ...any), options ...any) HtmlPre {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlPre) Part(val any) HtmlPre {
	p.SetProperty("part", val)
	return p
}

func (p *htmlPre) Slot(val any) HtmlPre {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlPre) SpellCheck(val any) HtmlPre {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlPre) Style(items ...*Ref[StyleItem]) HtmlPre {
	p.setStyle(items...)
	return p
}

func (p *htmlPre) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlPre {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlPre) TabIndex(val any) HtmlPre {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlPre) Text(val any) HtmlPre {
	p.setText(val)
	return p
}

func (p *htmlPre) Title(val any) HtmlPre {
	p.SetProperty("title", val)
	return p
}

func (p *htmlPre) Translate(val any) HtmlPre {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlPre) VirtualKeyBoardPolicy(val any) HtmlPre {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Progress return a html <progress> element
func Progress() HtmlProgress {
	return &htmlProgress{htmlBaseElement: htmlBaseElement{tag: "progress"}}
}

// HtmlProgress represent a html <progress> element
type HtmlProgress interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlProgress

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlProgress

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlProgress

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlProgress

	// Id set element id attribute
	Id(val string) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-max
	Max(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlProgress

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlProgress

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlProgress

	// Text set val as text conent for current element
	Text(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-value
	Value(val any) HtmlProgress

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlProgress
}

type htmlProgress struct {
	htmlBaseElement
}

func (p *htmlProgress) AccessKey(val any) HtmlProgress {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlProgress) AutoCapitalize(val any) HtmlProgress {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlProgress) AutoFocus(val any) HtmlProgress {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlProgress) Body(elems ...UI) HtmlProgress {
	p.setBody(elems...)
	return p
}

func (p *htmlProgress) Class(name string, items ...*Ref[StyleItem]) HtmlProgress {
	p.setClass(name, items...)
	return p
}

func (p *htmlProgress) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlProgress {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlProgress) ContentEditAble(val any) HtmlProgress {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlProgress) DataWith(name string, val any) HtmlProgress {
	p.dataWith(name, val)
	return p
}

func (p *htmlProgress) Dir(val any) HtmlProgress {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlProgress) DraggAble(val any) HtmlProgress {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlProgress) EnterKeyHint(val any) HtmlProgress {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlProgress) Hidden(val any) HtmlProgress {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlProgress) Id(val string) HtmlProgress {
	p.SetUIElementId(val)
	return p
}

func (p *htmlProgress) Inert(val any) HtmlProgress {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlProgress) InputMode(val any) HtmlProgress {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlProgress) Is(val any) HtmlProgress {
	p.SetProperty("is", val)
	return p
}

func (p *htmlProgress) ItemId(val any) HtmlProgress {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlProgress) ItemProp(val any) HtmlProgress {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlProgress) ItemRef(val any) HtmlProgress {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlProgress) ItemScope(val any) HtmlProgress {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlProgress) ItemType(val any) HtmlProgress {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlProgress) Lang(val any) HtmlProgress {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlProgress) Max(val any) HtmlProgress {
	p.SetProperty("max", val)
	return p
}

func (p *htmlProgress) Nonce(val any) HtmlProgress {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlProgress) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlProgress) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlProgress) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlProgress) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlProgress) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlProgress) OnBlur(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlProgress) OnClick(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlProgress) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlProgress) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlProgress) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlProgress) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlProgress) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlProgress) OnCopy(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlProgress) OnCut(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlProgress) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlProgress) OnDrag(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlProgress) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlProgress) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlProgress) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlProgress) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlProgress) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlProgress) OnDrop(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlProgress) OnError(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlProgress) OnFocus(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlProgress) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlProgress) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlProgress) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlProgress) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlProgress) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlProgress) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlProgress) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlProgress) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlProgress) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlProgress) OnPaste(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlProgress) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlProgress) OnScroll(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlProgress) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlProgress) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlProgress) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlProgress) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlProgress) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlProgress) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlProgress) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlProgress) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlProgress) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlProgress) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlProgress) OnWheel(handler func(event Event, options ...any), options ...any) HtmlProgress {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlProgress) Part(val any) HtmlProgress {
	p.SetProperty("part", val)
	return p
}

func (p *htmlProgress) Slot(val any) HtmlProgress {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlProgress) SpellCheck(val any) HtmlProgress {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlProgress) Style(items ...*Ref[StyleItem]) HtmlProgress {
	p.setStyle(items...)
	return p
}

func (p *htmlProgress) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlProgress {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlProgress) TabIndex(val any) HtmlProgress {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlProgress) Text(val any) HtmlProgress {
	p.setText(val)
	return p
}

func (p *htmlProgress) Title(val any) HtmlProgress {
	p.SetProperty("title", val)
	return p
}

func (p *htmlProgress) Translate(val any) HtmlProgress {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlProgress) Value(val any) HtmlProgress {
	p.SetProperty("value", val)
	return p
}

func (p *htmlProgress) VirtualKeyBoardPolicy(val any) HtmlProgress {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Q return a html <q> element
func Q() HtmlQ {
	return &htmlQ{htmlBaseElement: htmlBaseElement{tag: "q"}}
}

// HtmlQ represent a html <q> element
type HtmlQ interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlQ

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q#attr-cite
	Cite(val any) HtmlQ

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlQ

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlQ

	// Id set element id attribute
	Id(val string) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlQ

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlQ

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlQ

	// Text set val as text conent for current element
	Text(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlQ

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlQ
}

type htmlQ struct {
	htmlBaseElement
}

func (p *htmlQ) AccessKey(val any) HtmlQ {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlQ) AutoCapitalize(val any) HtmlQ {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlQ) AutoFocus(val any) HtmlQ {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlQ) Body(elems ...UI) HtmlQ {
	p.setBody(elems...)
	return p
}

func (p *htmlQ) Cite(val any) HtmlQ {
	p.SetProperty("cite", val)
	return p
}

func (p *htmlQ) Class(name string, items ...*Ref[StyleItem]) HtmlQ {
	p.setClass(name, items...)
	return p
}

func (p *htmlQ) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlQ {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlQ) ContentEditAble(val any) HtmlQ {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlQ) DataWith(name string, val any) HtmlQ {
	p.dataWith(name, val)
	return p
}

func (p *htmlQ) Dir(val any) HtmlQ {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlQ) DraggAble(val any) HtmlQ {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlQ) EnterKeyHint(val any) HtmlQ {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlQ) Hidden(val any) HtmlQ {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlQ) Id(val string) HtmlQ {
	p.SetUIElementId(val)
	return p
}

func (p *htmlQ) Inert(val any) HtmlQ {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlQ) InputMode(val any) HtmlQ {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlQ) Is(val any) HtmlQ {
	p.SetProperty("is", val)
	return p
}

func (p *htmlQ) ItemId(val any) HtmlQ {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlQ) ItemProp(val any) HtmlQ {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlQ) ItemRef(val any) HtmlQ {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlQ) ItemScope(val any) HtmlQ {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlQ) ItemType(val any) HtmlQ {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlQ) Lang(val any) HtmlQ {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlQ) Nonce(val any) HtmlQ {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlQ) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlQ) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlQ) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlQ) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlQ) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlQ) OnBlur(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlQ) OnClick(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlQ) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlQ) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlQ) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlQ) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlQ) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlQ) OnCopy(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlQ) OnCut(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlQ) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlQ) OnDrag(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlQ) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlQ) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlQ) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlQ) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlQ) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlQ) OnDrop(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlQ) OnError(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlQ) OnFocus(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlQ) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlQ) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlQ) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlQ) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlQ) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlQ) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlQ) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlQ) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlQ) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlQ) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlQ) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlQ) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlQ) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlQ) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlQ) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlQ) OnPaste(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlQ) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlQ) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlQ) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlQ) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlQ) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlQ) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlQ) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlQ) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlQ) OnScroll(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlQ) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlQ) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlQ) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlQ) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlQ) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlQ) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlQ) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlQ) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlQ) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlQ) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlQ) OnWheel(handler func(event Event, options ...any), options ...any) HtmlQ {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlQ) Part(val any) HtmlQ {
	p.SetProperty("part", val)
	return p
}

func (p *htmlQ) Slot(val any) HtmlQ {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlQ) SpellCheck(val any) HtmlQ {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlQ) Style(items ...*Ref[StyleItem]) HtmlQ {
	p.setStyle(items...)
	return p
}

func (p *htmlQ) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlQ {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlQ) TabIndex(val any) HtmlQ {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlQ) Text(val any) HtmlQ {
	p.setText(val)
	return p
}

func (p *htmlQ) Title(val any) HtmlQ {
	p.SetProperty("title", val)
	return p
}

func (p *htmlQ) Translate(val any) HtmlQ {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlQ) VirtualKeyBoardPolicy(val any) HtmlQ {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Rp return a html <rp> element
func Rp() HtmlRp {
	return &htmlRp{htmlBaseElement: htmlBaseElement{tag: "rp"}}
}

// HtmlRp represent a html <rp> element
type HtmlRp interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlRp

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlRp

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlRp

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlRp

	// Id set element id attribute
	Id(val string) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlRp

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlRp

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlRp

	// Text set val as text conent for current element
	Text(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlRp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlRp
}

type htmlRp struct {
	htmlBaseElement
}

func (p *htmlRp) AccessKey(val any) HtmlRp {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlRp) AutoCapitalize(val any) HtmlRp {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlRp) AutoFocus(val any) HtmlRp {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlRp) Body(elems ...UI) HtmlRp {
	p.setBody(elems...)
	return p
}

func (p *htmlRp) Class(name string, items ...*Ref[StyleItem]) HtmlRp {
	p.setClass(name, items...)
	return p
}

func (p *htmlRp) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRp {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlRp) ContentEditAble(val any) HtmlRp {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlRp) DataWith(name string, val any) HtmlRp {
	p.dataWith(name, val)
	return p
}

func (p *htmlRp) Dir(val any) HtmlRp {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlRp) DraggAble(val any) HtmlRp {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlRp) EnterKeyHint(val any) HtmlRp {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlRp) Hidden(val any) HtmlRp {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlRp) Id(val string) HtmlRp {
	p.SetUIElementId(val)
	return p
}

func (p *htmlRp) Inert(val any) HtmlRp {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlRp) InputMode(val any) HtmlRp {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlRp) Is(val any) HtmlRp {
	p.SetProperty("is", val)
	return p
}

func (p *htmlRp) ItemId(val any) HtmlRp {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlRp) ItemProp(val any) HtmlRp {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlRp) ItemRef(val any) HtmlRp {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlRp) ItemScope(val any) HtmlRp {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlRp) ItemType(val any) HtmlRp {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlRp) Lang(val any) HtmlRp {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlRp) Nonce(val any) HtmlRp {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlRp) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlRp) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlRp) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlRp) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlRp) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlRp) OnBlur(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlRp) OnClick(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlRp) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlRp) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlRp) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlRp) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlRp) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlRp) OnCopy(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlRp) OnCut(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlRp) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlRp) OnDrag(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlRp) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlRp) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlRp) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlRp) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlRp) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlRp) OnDrop(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlRp) OnError(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlRp) OnFocus(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlRp) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlRp) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlRp) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlRp) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlRp) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlRp) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlRp) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlRp) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlRp) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlRp) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlRp) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlRp) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlRp) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlRp) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlRp) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlRp) OnPaste(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlRp) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlRp) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlRp) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlRp) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlRp) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlRp) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlRp) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlRp) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlRp) OnScroll(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlRp) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlRp) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlRp) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlRp) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlRp) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlRp) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlRp) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlRp) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlRp) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlRp) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlRp) OnWheel(handler func(event Event, options ...any), options ...any) HtmlRp {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlRp) Part(val any) HtmlRp {
	p.SetProperty("part", val)
	return p
}

func (p *htmlRp) Slot(val any) HtmlRp {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlRp) SpellCheck(val any) HtmlRp {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlRp) Style(items ...*Ref[StyleItem]) HtmlRp {
	p.setStyle(items...)
	return p
}

func (p *htmlRp) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRp {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlRp) TabIndex(val any) HtmlRp {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlRp) Text(val any) HtmlRp {
	p.setText(val)
	return p
}

func (p *htmlRp) Title(val any) HtmlRp {
	p.SetProperty("title", val)
	return p
}

func (p *htmlRp) Translate(val any) HtmlRp {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlRp) VirtualKeyBoardPolicy(val any) HtmlRp {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Rt return a html <rt> element
func Rt() HtmlRt {
	return &htmlRt{htmlBaseElement: htmlBaseElement{tag: "rt"}}
}

// HtmlRt represent a html <rt> element
type HtmlRt interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlRt

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlRt

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlRt

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlRt

	// Id set element id attribute
	Id(val string) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlRt

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlRt

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlRt

	// Text set val as text conent for current element
	Text(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlRt

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlRt
}

type htmlRt struct {
	htmlBaseElement
}

func (p *htmlRt) AccessKey(val any) HtmlRt {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlRt) AutoCapitalize(val any) HtmlRt {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlRt) AutoFocus(val any) HtmlRt {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlRt) Body(elems ...UI) HtmlRt {
	p.setBody(elems...)
	return p
}

func (p *htmlRt) Class(name string, items ...*Ref[StyleItem]) HtmlRt {
	p.setClass(name, items...)
	return p
}

func (p *htmlRt) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRt {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlRt) ContentEditAble(val any) HtmlRt {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlRt) DataWith(name string, val any) HtmlRt {
	p.dataWith(name, val)
	return p
}

func (p *htmlRt) Dir(val any) HtmlRt {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlRt) DraggAble(val any) HtmlRt {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlRt) EnterKeyHint(val any) HtmlRt {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlRt) Hidden(val any) HtmlRt {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlRt) Id(val string) HtmlRt {
	p.SetUIElementId(val)
	return p
}

func (p *htmlRt) Inert(val any) HtmlRt {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlRt) InputMode(val any) HtmlRt {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlRt) Is(val any) HtmlRt {
	p.SetProperty("is", val)
	return p
}

func (p *htmlRt) ItemId(val any) HtmlRt {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlRt) ItemProp(val any) HtmlRt {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlRt) ItemRef(val any) HtmlRt {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlRt) ItemScope(val any) HtmlRt {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlRt) ItemType(val any) HtmlRt {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlRt) Lang(val any) HtmlRt {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlRt) Nonce(val any) HtmlRt {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlRt) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlRt) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlRt) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlRt) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlRt) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlRt) OnBlur(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlRt) OnClick(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlRt) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlRt) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlRt) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlRt) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlRt) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlRt) OnCopy(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlRt) OnCut(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlRt) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlRt) OnDrag(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlRt) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlRt) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlRt) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlRt) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlRt) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlRt) OnDrop(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlRt) OnError(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlRt) OnFocus(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlRt) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlRt) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlRt) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlRt) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlRt) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlRt) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlRt) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlRt) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlRt) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlRt) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlRt) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlRt) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlRt) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlRt) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlRt) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlRt) OnPaste(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlRt) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlRt) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlRt) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlRt) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlRt) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlRt) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlRt) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlRt) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlRt) OnScroll(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlRt) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlRt) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlRt) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlRt) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlRt) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlRt) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlRt) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlRt) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlRt) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlRt) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlRt) OnWheel(handler func(event Event, options ...any), options ...any) HtmlRt {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlRt) Part(val any) HtmlRt {
	p.SetProperty("part", val)
	return p
}

func (p *htmlRt) Slot(val any) HtmlRt {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlRt) SpellCheck(val any) HtmlRt {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlRt) Style(items ...*Ref[StyleItem]) HtmlRt {
	p.setStyle(items...)
	return p
}

func (p *htmlRt) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRt {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlRt) TabIndex(val any) HtmlRt {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlRt) Text(val any) HtmlRt {
	p.setText(val)
	return p
}

func (p *htmlRt) Title(val any) HtmlRt {
	p.SetProperty("title", val)
	return p
}

func (p *htmlRt) Translate(val any) HtmlRt {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlRt) VirtualKeyBoardPolicy(val any) HtmlRt {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Ruby return a html <ruby> element
func Ruby() HtmlRuby {
	return &htmlRuby{htmlBaseElement: htmlBaseElement{tag: "ruby"}}
}

// HtmlRuby represent a html <ruby> element
type HtmlRuby interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlRuby

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlRuby

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlRuby

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlRuby

	// Id set element id attribute
	Id(val string) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlRuby

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlRuby

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlRuby

	// Text set val as text conent for current element
	Text(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlRuby

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlRuby
}

type htmlRuby struct {
	htmlBaseElement
}

func (p *htmlRuby) AccessKey(val any) HtmlRuby {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlRuby) AutoCapitalize(val any) HtmlRuby {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlRuby) AutoFocus(val any) HtmlRuby {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlRuby) Body(elems ...UI) HtmlRuby {
	p.setBody(elems...)
	return p
}

func (p *htmlRuby) Class(name string, items ...*Ref[StyleItem]) HtmlRuby {
	p.setClass(name, items...)
	return p
}

func (p *htmlRuby) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlRuby {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlRuby) ContentEditAble(val any) HtmlRuby {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlRuby) DataWith(name string, val any) HtmlRuby {
	p.dataWith(name, val)
	return p
}

func (p *htmlRuby) Dir(val any) HtmlRuby {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlRuby) DraggAble(val any) HtmlRuby {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlRuby) EnterKeyHint(val any) HtmlRuby {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlRuby) Hidden(val any) HtmlRuby {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlRuby) Id(val string) HtmlRuby {
	p.SetUIElementId(val)
	return p
}

func (p *htmlRuby) Inert(val any) HtmlRuby {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlRuby) InputMode(val any) HtmlRuby {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlRuby) Is(val any) HtmlRuby {
	p.SetProperty("is", val)
	return p
}

func (p *htmlRuby) ItemId(val any) HtmlRuby {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlRuby) ItemProp(val any) HtmlRuby {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlRuby) ItemRef(val any) HtmlRuby {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlRuby) ItemScope(val any) HtmlRuby {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlRuby) ItemType(val any) HtmlRuby {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlRuby) Lang(val any) HtmlRuby {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlRuby) Nonce(val any) HtmlRuby {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlRuby) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlRuby) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlRuby) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlRuby) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlRuby) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlRuby) OnBlur(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlRuby) OnClick(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlRuby) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlRuby) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlRuby) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlRuby) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlRuby) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlRuby) OnCopy(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlRuby) OnCut(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlRuby) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlRuby) OnDrag(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlRuby) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlRuby) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlRuby) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlRuby) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlRuby) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlRuby) OnDrop(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlRuby) OnError(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlRuby) OnFocus(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlRuby) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlRuby) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlRuby) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlRuby) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlRuby) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlRuby) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlRuby) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlRuby) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlRuby) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlRuby) OnPaste(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlRuby) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlRuby) OnScroll(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlRuby) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlRuby) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlRuby) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlRuby) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlRuby) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlRuby) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlRuby) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlRuby) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlRuby) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlRuby) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlRuby) OnWheel(handler func(event Event, options ...any), options ...any) HtmlRuby {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlRuby) Part(val any) HtmlRuby {
	p.SetProperty("part", val)
	return p
}

func (p *htmlRuby) Slot(val any) HtmlRuby {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlRuby) SpellCheck(val any) HtmlRuby {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlRuby) Style(items ...*Ref[StyleItem]) HtmlRuby {
	p.setStyle(items...)
	return p
}

func (p *htmlRuby) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlRuby {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlRuby) TabIndex(val any) HtmlRuby {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlRuby) Text(val any) HtmlRuby {
	p.setText(val)
	return p
}

func (p *htmlRuby) Title(val any) HtmlRuby {
	p.SetProperty("title", val)
	return p
}

func (p *htmlRuby) Translate(val any) HtmlRuby {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlRuby) VirtualKeyBoardPolicy(val any) HtmlRuby {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// S return a html <s> element
func S() HtmlS {
	return &htmlS{htmlBaseElement: htmlBaseElement{tag: "s"}}
}

// HtmlS represent a html <s> element
type HtmlS interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlS

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlS

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlS

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlS

	// Id set element id attribute
	Id(val string) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlS

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlS

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlS

	// Text set val as text conent for current element
	Text(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlS

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlS
}

type htmlS struct {
	htmlBaseElement
}

func (p *htmlS) AccessKey(val any) HtmlS {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlS) AutoCapitalize(val any) HtmlS {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlS) AutoFocus(val any) HtmlS {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlS) Body(elems ...UI) HtmlS {
	p.setBody(elems...)
	return p
}

func (p *htmlS) Class(name string, items ...*Ref[StyleItem]) HtmlS {
	p.setClass(name, items...)
	return p
}

func (p *htmlS) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlS {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlS) ContentEditAble(val any) HtmlS {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlS) DataWith(name string, val any) HtmlS {
	p.dataWith(name, val)
	return p
}

func (p *htmlS) Dir(val any) HtmlS {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlS) DraggAble(val any) HtmlS {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlS) EnterKeyHint(val any) HtmlS {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlS) Hidden(val any) HtmlS {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlS) Id(val string) HtmlS {
	p.SetUIElementId(val)
	return p
}

func (p *htmlS) Inert(val any) HtmlS {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlS) InputMode(val any) HtmlS {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlS) Is(val any) HtmlS {
	p.SetProperty("is", val)
	return p
}

func (p *htmlS) ItemId(val any) HtmlS {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlS) ItemProp(val any) HtmlS {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlS) ItemRef(val any) HtmlS {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlS) ItemScope(val any) HtmlS {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlS) ItemType(val any) HtmlS {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlS) Lang(val any) HtmlS {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlS) Nonce(val any) HtmlS {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlS) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlS) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlS) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlS) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlS) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlS) OnBlur(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlS) OnClick(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlS) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlS) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlS) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlS) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlS) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlS) OnCopy(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlS) OnCut(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlS) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlS) OnDrag(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlS) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlS) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlS) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlS) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlS) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlS) OnDrop(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlS) OnError(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlS) OnFocus(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlS) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlS) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlS) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlS) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlS) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlS) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlS) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlS) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlS) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlS) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlS) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlS) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlS) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlS) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlS) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlS) OnPaste(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlS) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlS) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlS) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlS) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlS) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlS) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlS) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlS) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlS) OnScroll(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlS) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlS) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlS) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlS) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlS) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlS) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlS) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlS) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlS) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlS) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlS) OnWheel(handler func(event Event, options ...any), options ...any) HtmlS {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlS) Part(val any) HtmlS {
	p.SetProperty("part", val)
	return p
}

func (p *htmlS) Slot(val any) HtmlS {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlS) SpellCheck(val any) HtmlS {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlS) Style(items ...*Ref[StyleItem]) HtmlS {
	p.setStyle(items...)
	return p
}

func (p *htmlS) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlS {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlS) TabIndex(val any) HtmlS {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlS) Text(val any) HtmlS {
	p.setText(val)
	return p
}

func (p *htmlS) Title(val any) HtmlS {
	p.SetProperty("title", val)
	return p
}

func (p *htmlS) Translate(val any) HtmlS {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlS) VirtualKeyBoardPolicy(val any) HtmlS {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Samp return a html <samp> element
func Samp() HtmlSamp {
	return &htmlSamp{htmlBaseElement: htmlBaseElement{tag: "samp"}}
}

// HtmlSamp represent a html <samp> element
type HtmlSamp interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSamp

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSamp

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSamp

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSamp

	// Id set element id attribute
	Id(val string) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSamp

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSamp

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSamp

	// Text set val as text conent for current element
	Text(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSamp

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSamp
}

type htmlSamp struct {
	htmlBaseElement
}

func (p *htmlSamp) AccessKey(val any) HtmlSamp {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSamp) AutoCapitalize(val any) HtmlSamp {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSamp) AutoFocus(val any) HtmlSamp {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSamp) Body(elems ...UI) HtmlSamp {
	p.setBody(elems...)
	return p
}

func (p *htmlSamp) Class(name string, items ...*Ref[StyleItem]) HtmlSamp {
	p.setClass(name, items...)
	return p
}

func (p *htmlSamp) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSamp {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSamp) ContentEditAble(val any) HtmlSamp {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSamp) DataWith(name string, val any) HtmlSamp {
	p.dataWith(name, val)
	return p
}

func (p *htmlSamp) Dir(val any) HtmlSamp {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSamp) DraggAble(val any) HtmlSamp {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSamp) EnterKeyHint(val any) HtmlSamp {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSamp) Hidden(val any) HtmlSamp {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSamp) Id(val string) HtmlSamp {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSamp) Inert(val any) HtmlSamp {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSamp) InputMode(val any) HtmlSamp {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSamp) Is(val any) HtmlSamp {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSamp) ItemId(val any) HtmlSamp {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSamp) ItemProp(val any) HtmlSamp {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSamp) ItemRef(val any) HtmlSamp {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSamp) ItemScope(val any) HtmlSamp {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSamp) ItemType(val any) HtmlSamp {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSamp) Lang(val any) HtmlSamp {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSamp) Nonce(val any) HtmlSamp {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSamp) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSamp) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSamp) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSamp) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSamp) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSamp) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSamp) OnClick(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSamp) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSamp) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSamp) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSamp) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSamp) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSamp) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSamp) OnCut(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSamp) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSamp) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSamp) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSamp) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSamp) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSamp) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSamp) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSamp) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSamp) OnError(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSamp) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSamp) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSamp) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSamp) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSamp) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSamp) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSamp) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSamp) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSamp) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSamp) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSamp) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSamp) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSamp) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSamp) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSamp) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSamp) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSamp) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSamp) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSamp) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSamp) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSamp) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSamp) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSamp) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSamp) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSamp {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSamp) Part(val any) HtmlSamp {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSamp) Slot(val any) HtmlSamp {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSamp) SpellCheck(val any) HtmlSamp {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSamp) Style(items ...*Ref[StyleItem]) HtmlSamp {
	p.setStyle(items...)
	return p
}

func (p *htmlSamp) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSamp {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSamp) TabIndex(val any) HtmlSamp {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSamp) Text(val any) HtmlSamp {
	p.setText(val)
	return p
}

func (p *htmlSamp) Title(val any) HtmlSamp {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSamp) Translate(val any) HtmlSamp {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSamp) VirtualKeyBoardPolicy(val any) HtmlSamp {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Script return a html <script> element
func Script() HtmlScript {
	return &htmlScript{htmlBaseElement: htmlBaseElement{tag: "script"}}
}

// HtmlScript represent a html <script> element
type HtmlScript interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async
	Async(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-blocking
	Blocking(val any) HtmlScript

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlScript

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlScript

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-crossorigin
	CrossOrigin(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer
	Defer(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-fetchpriority
	FetchPriority(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlScript

	// Id set element id attribute
	Id(val string) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-integrity
	Integrity(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule
	NoModule(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-referrerpolicy
	ReferrerPolicy(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-src
	Src(val any) HtmlScript

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlScript

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlScript

	// Text set val as text conent for current element
	Text(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-type
	Type(val any) HtmlScript

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlScript
}

type htmlScript struct {
	htmlBaseElement
}

func (p *htmlScript) AccessKey(val any) HtmlScript {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlScript) Async(val any) HtmlScript {
	p.SetProperty("async", val)
	return p
}

func (p *htmlScript) AutoCapitalize(val any) HtmlScript {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlScript) AutoFocus(val any) HtmlScript {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlScript) Blocking(val any) HtmlScript {
	p.SetProperty("blocking", val)
	return p
}

func (p *htmlScript) Body(elems ...UI) HtmlScript {
	p.setBody(elems...)
	return p
}

func (p *htmlScript) Class(name string, items ...*Ref[StyleItem]) HtmlScript {
	p.setClass(name, items...)
	return p
}

func (p *htmlScript) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlScript {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlScript) ContentEditAble(val any) HtmlScript {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlScript) CrossOrigin(val any) HtmlScript {
	p.SetProperty("crossorigin", val)
	return p
}

func (p *htmlScript) DataWith(name string, val any) HtmlScript {
	p.dataWith(name, val)
	return p
}

func (p *htmlScript) Defer(val any) HtmlScript {
	p.SetProperty("defer", val)
	return p
}

func (p *htmlScript) Dir(val any) HtmlScript {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlScript) DraggAble(val any) HtmlScript {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlScript) EnterKeyHint(val any) HtmlScript {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlScript) FetchPriority(val any) HtmlScript {
	p.SetProperty("fetchpriority", val)
	return p
}

func (p *htmlScript) Hidden(val any) HtmlScript {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlScript) Id(val string) HtmlScript {
	p.SetUIElementId(val)
	return p
}

func (p *htmlScript) Inert(val any) HtmlScript {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlScript) InputMode(val any) HtmlScript {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlScript) Integrity(val any) HtmlScript {
	p.SetProperty("integrity", val)
	return p
}

func (p *htmlScript) Is(val any) HtmlScript {
	p.SetProperty("is", val)
	return p
}

func (p *htmlScript) ItemId(val any) HtmlScript {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlScript) ItemProp(val any) HtmlScript {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlScript) ItemRef(val any) HtmlScript {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlScript) ItemScope(val any) HtmlScript {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlScript) ItemType(val any) HtmlScript {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlScript) Lang(val any) HtmlScript {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlScript) NoModule(val any) HtmlScript {
	p.SetProperty("nomodule", val)
	return p
}

func (p *htmlScript) Nonce(val any) HtmlScript {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlScript) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlScript) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlScript) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlScript) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlScript) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlScript) OnBlur(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlScript) OnClick(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlScript) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlScript) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlScript) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlScript) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlScript) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlScript) OnCopy(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlScript) OnCut(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlScript) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlScript) OnDrag(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlScript) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlScript) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlScript) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlScript) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlScript) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlScript) OnDrop(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlScript) OnError(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlScript) OnFocus(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlScript) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlScript) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlScript) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlScript) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlScript) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlScript) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlScript) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlScript) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlScript) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlScript) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlScript) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlScript) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlScript) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlScript) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlScript) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlScript) OnPaste(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlScript) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlScript) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlScript) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlScript) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlScript) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlScript) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlScript) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlScript) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlScript) OnScroll(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlScript) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlScript) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlScript) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlScript) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlScript) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlScript) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlScript) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlScript) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlScript) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlScript) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlScript) OnWheel(handler func(event Event, options ...any), options ...any) HtmlScript {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlScript) Part(val any) HtmlScript {
	p.SetProperty("part", val)
	return p
}

func (p *htmlScript) ReferrerPolicy(val any) HtmlScript {
	p.SetProperty("referrerpolicy", val)
	return p
}

func (p *htmlScript) Slot(val any) HtmlScript {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlScript) SpellCheck(val any) HtmlScript {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlScript) Src(val any) HtmlScript {
	p.SetProperty("src", val)
	return p
}

func (p *htmlScript) Style(items ...*Ref[StyleItem]) HtmlScript {
	p.setStyle(items...)
	return p
}

func (p *htmlScript) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlScript {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlScript) TabIndex(val any) HtmlScript {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlScript) Text(val any) HtmlScript {
	p.setText(val)
	return p
}

func (p *htmlScript) Title(val any) HtmlScript {
	p.SetProperty("title", val)
	return p
}

func (p *htmlScript) Translate(val any) HtmlScript {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlScript) Type(val any) HtmlScript {
	p.SetProperty("type", val)
	return p
}

func (p *htmlScript) VirtualKeyBoardPolicy(val any) HtmlScript {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Section return a html <section> element
func Section() HtmlSection {
	return &htmlSection{htmlBaseElement: htmlBaseElement{tag: "section"}}
}

// HtmlSection represent a html <section> element
type HtmlSection interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSection

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSection

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSection

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSection

	// Id set element id attribute
	Id(val string) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSection

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSection

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSection

	// Text set val as text conent for current element
	Text(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSection

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSection
}

type htmlSection struct {
	htmlBaseElement
}

func (p *htmlSection) AccessKey(val any) HtmlSection {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSection) AutoCapitalize(val any) HtmlSection {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSection) AutoFocus(val any) HtmlSection {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSection) Body(elems ...UI) HtmlSection {
	p.setBody(elems...)
	return p
}

func (p *htmlSection) Class(name string, items ...*Ref[StyleItem]) HtmlSection {
	p.setClass(name, items...)
	return p
}

func (p *htmlSection) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSection {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSection) ContentEditAble(val any) HtmlSection {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSection) DataWith(name string, val any) HtmlSection {
	p.dataWith(name, val)
	return p
}

func (p *htmlSection) Dir(val any) HtmlSection {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSection) DraggAble(val any) HtmlSection {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSection) EnterKeyHint(val any) HtmlSection {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSection) Hidden(val any) HtmlSection {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSection) Id(val string) HtmlSection {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSection) Inert(val any) HtmlSection {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSection) InputMode(val any) HtmlSection {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSection) Is(val any) HtmlSection {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSection) ItemId(val any) HtmlSection {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSection) ItemProp(val any) HtmlSection {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSection) ItemRef(val any) HtmlSection {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSection) ItemScope(val any) HtmlSection {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSection) ItemType(val any) HtmlSection {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSection) Lang(val any) HtmlSection {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSection) Nonce(val any) HtmlSection {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSection) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSection) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSection) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSection) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSection) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSection) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSection) OnClick(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSection) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSection) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSection) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSection) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSection) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSection) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSection) OnCut(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSection) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSection) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSection) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSection) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSection) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSection) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSection) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSection) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSection) OnError(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSection) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSection) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSection) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSection) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSection) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSection) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSection) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSection) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSection) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSection) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSection) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSection) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSection) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSection) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSection) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSection) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSection) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSection) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSection) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSection) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSection) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSection) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSection) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSection) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSection) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSection) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSection) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSection) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSection) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSection) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSection) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSection) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSection) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSection) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSection) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSection) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSection) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSection {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSection) Part(val any) HtmlSection {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSection) Slot(val any) HtmlSection {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSection) SpellCheck(val any) HtmlSection {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSection) Style(items ...*Ref[StyleItem]) HtmlSection {
	p.setStyle(items...)
	return p
}

func (p *htmlSection) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSection {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSection) TabIndex(val any) HtmlSection {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSection) Text(val any) HtmlSection {
	p.setText(val)
	return p
}

func (p *htmlSection) Title(val any) HtmlSection {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSection) Translate(val any) HtmlSection {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSection) VirtualKeyBoardPolicy(val any) HtmlSection {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Select return a html <select> element
func Select() HtmlSelect {
	return &htmlSelect{htmlBaseElement: htmlBaseElement{tag: "select"}}
}

// HtmlSelect represent a html <select> element
type HtmlSelect interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-autocomplete
	AutoComplete(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSelect

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSelect

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSelect

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-disabled
	Disabled(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-form
	Form(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSelect

	// Id set element id attribute
	Id(val string) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple
	Multiple(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-name
	Name(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event
	OnChange(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event
	OnInput(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-required
	Required(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-size
	Size(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSelect

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSelect

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSelect

	// Text set val as text conent for current element
	Text(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSelect

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSelect
}

type htmlSelect struct {
	htmlBaseElement
}

func (p *htmlSelect) AccessKey(val any) HtmlSelect {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSelect) AutoCapitalize(val any) HtmlSelect {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSelect) AutoComplete(val any) HtmlSelect {
	p.SetProperty("autocomplete", val)
	return p
}

func (p *htmlSelect) AutoFocus(val any) HtmlSelect {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSelect) Body(elems ...UI) HtmlSelect {
	p.setBody(elems...)
	return p
}

func (p *htmlSelect) Class(name string, items ...*Ref[StyleItem]) HtmlSelect {
	p.setClass(name, items...)
	return p
}

func (p *htmlSelect) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSelect {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSelect) ContentEditAble(val any) HtmlSelect {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSelect) DataWith(name string, val any) HtmlSelect {
	p.dataWith(name, val)
	return p
}

func (p *htmlSelect) Dir(val any) HtmlSelect {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSelect) Disabled(val any) HtmlSelect {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlSelect) DraggAble(val any) HtmlSelect {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSelect) EnterKeyHint(val any) HtmlSelect {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSelect) Form(val any) HtmlSelect {
	p.SetProperty("form", val)
	return p
}

func (p *htmlSelect) Hidden(val any) HtmlSelect {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSelect) Id(val string) HtmlSelect {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSelect) Inert(val any) HtmlSelect {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSelect) InputMode(val any) HtmlSelect {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSelect) Is(val any) HtmlSelect {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSelect) ItemId(val any) HtmlSelect {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSelect) ItemProp(val any) HtmlSelect {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSelect) ItemRef(val any) HtmlSelect {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSelect) ItemScope(val any) HtmlSelect {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSelect) ItemType(val any) HtmlSelect {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSelect) Lang(val any) HtmlSelect {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSelect) Multiple(val any) HtmlSelect {
	p.SetProperty("multiple", val)
	return p
}

func (p *htmlSelect) Name(val any) HtmlSelect {
	p.SetProperty("name", val)
	return p
}

func (p *htmlSelect) Nonce(val any) HtmlSelect {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSelect) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSelect) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSelect) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSelect) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSelect) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSelect) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSelect) OnChange(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("change", handler, options...)
	return p
}

func (p *htmlSelect) OnClick(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSelect) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSelect) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSelect) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSelect) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSelect) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSelect) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSelect) OnCut(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSelect) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSelect) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSelect) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSelect) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSelect) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSelect) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSelect) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSelect) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSelect) OnError(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSelect) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSelect) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSelect) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSelect) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSelect) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSelect) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSelect) OnInput(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("input", handler, options...)
	return p
}

func (p *htmlSelect) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSelect) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSelect) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSelect) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSelect) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSelect) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSelect) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSelect) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSelect) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSelect) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSelect) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSelect) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSelect) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSelect) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSelect) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSelect) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSelect) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSelect) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSelect {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSelect) Part(val any) HtmlSelect {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSelect) Required(val any) HtmlSelect {
	p.SetProperty("required", val)
	return p
}

func (p *htmlSelect) Size(val any) HtmlSelect {
	p.SetProperty("size", val)
	return p
}

func (p *htmlSelect) Slot(val any) HtmlSelect {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSelect) SpellCheck(val any) HtmlSelect {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSelect) Style(items ...*Ref[StyleItem]) HtmlSelect {
	p.setStyle(items...)
	return p
}

func (p *htmlSelect) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSelect {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSelect) TabIndex(val any) HtmlSelect {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSelect) Text(val any) HtmlSelect {
	p.setText(val)
	return p
}

func (p *htmlSelect) Title(val any) HtmlSelect {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSelect) Translate(val any) HtmlSelect {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSelect) VirtualKeyBoardPolicy(val any) HtmlSelect {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Slot return a html <slot> element
func Slot() HtmlSlot {
	return &htmlSlot{htmlBaseElement: htmlBaseElement{tag: "slot"}}
}

// HtmlSlot represent a html <slot> element
type HtmlSlot interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSlot

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSlot

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSlot

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSlot

	// Id set element id attribute
	Id(val string) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot#attr-name
	Name(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSlot

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSlot

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSlot

	// Text set val as text conent for current element
	Text(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSlot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSlot
}

type htmlSlot struct {
	htmlBaseElement
}

func (p *htmlSlot) AccessKey(val any) HtmlSlot {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSlot) AutoCapitalize(val any) HtmlSlot {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSlot) AutoFocus(val any) HtmlSlot {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSlot) Body(elems ...UI) HtmlSlot {
	p.setBody(elems...)
	return p
}

func (p *htmlSlot) Class(name string, items ...*Ref[StyleItem]) HtmlSlot {
	p.setClass(name, items...)
	return p
}

func (p *htmlSlot) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSlot {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSlot) ContentEditAble(val any) HtmlSlot {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSlot) DataWith(name string, val any) HtmlSlot {
	p.dataWith(name, val)
	return p
}

func (p *htmlSlot) Dir(val any) HtmlSlot {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSlot) DraggAble(val any) HtmlSlot {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSlot) EnterKeyHint(val any) HtmlSlot {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSlot) Hidden(val any) HtmlSlot {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSlot) Id(val string) HtmlSlot {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSlot) Inert(val any) HtmlSlot {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSlot) InputMode(val any) HtmlSlot {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSlot) Is(val any) HtmlSlot {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSlot) ItemId(val any) HtmlSlot {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSlot) ItemProp(val any) HtmlSlot {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSlot) ItemRef(val any) HtmlSlot {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSlot) ItemScope(val any) HtmlSlot {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSlot) ItemType(val any) HtmlSlot {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSlot) Lang(val any) HtmlSlot {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSlot) Name(val any) HtmlSlot {
	p.SetProperty("name", val)
	return p
}

func (p *htmlSlot) Nonce(val any) HtmlSlot {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSlot) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSlot) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSlot) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSlot) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSlot) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSlot) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSlot) OnClick(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSlot) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSlot) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSlot) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSlot) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSlot) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSlot) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSlot) OnCut(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSlot) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSlot) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSlot) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSlot) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSlot) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSlot) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSlot) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSlot) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSlot) OnError(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSlot) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSlot) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSlot) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSlot) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSlot) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSlot) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSlot) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSlot) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSlot) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSlot) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSlot) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSlot) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSlot) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSlot) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSlot) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSlot) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSlot) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSlot) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSlot) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSlot) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSlot) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSlot) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSlot) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSlot) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSlot {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSlot) Part(val any) HtmlSlot {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSlot) Slot(val any) HtmlSlot {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSlot) SpellCheck(val any) HtmlSlot {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSlot) Style(items ...*Ref[StyleItem]) HtmlSlot {
	p.setStyle(items...)
	return p
}

func (p *htmlSlot) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSlot {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSlot) TabIndex(val any) HtmlSlot {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSlot) Text(val any) HtmlSlot {
	p.setText(val)
	return p
}

func (p *htmlSlot) Title(val any) HtmlSlot {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSlot) Translate(val any) HtmlSlot {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSlot) VirtualKeyBoardPolicy(val any) HtmlSlot {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Small return a html <small> element
func Small() HtmlSmall {
	return &htmlSmall{htmlBaseElement: htmlBaseElement{tag: "small"}}
}

// HtmlSmall represent a html <small> element
type HtmlSmall interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSmall

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSmall

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSmall

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSmall

	// Id set element id attribute
	Id(val string) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSmall

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSmall

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSmall

	// Text set val as text conent for current element
	Text(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSmall

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSmall
}

type htmlSmall struct {
	htmlBaseElement
}

func (p *htmlSmall) AccessKey(val any) HtmlSmall {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSmall) AutoCapitalize(val any) HtmlSmall {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSmall) AutoFocus(val any) HtmlSmall {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSmall) Body(elems ...UI) HtmlSmall {
	p.setBody(elems...)
	return p
}

func (p *htmlSmall) Class(name string, items ...*Ref[StyleItem]) HtmlSmall {
	p.setClass(name, items...)
	return p
}

func (p *htmlSmall) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSmall {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSmall) ContentEditAble(val any) HtmlSmall {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSmall) DataWith(name string, val any) HtmlSmall {
	p.dataWith(name, val)
	return p
}

func (p *htmlSmall) Dir(val any) HtmlSmall {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSmall) DraggAble(val any) HtmlSmall {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSmall) EnterKeyHint(val any) HtmlSmall {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSmall) Hidden(val any) HtmlSmall {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSmall) Id(val string) HtmlSmall {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSmall) Inert(val any) HtmlSmall {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSmall) InputMode(val any) HtmlSmall {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSmall) Is(val any) HtmlSmall {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSmall) ItemId(val any) HtmlSmall {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSmall) ItemProp(val any) HtmlSmall {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSmall) ItemRef(val any) HtmlSmall {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSmall) ItemScope(val any) HtmlSmall {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSmall) ItemType(val any) HtmlSmall {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSmall) Lang(val any) HtmlSmall {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSmall) Nonce(val any) HtmlSmall {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSmall) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSmall) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSmall) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSmall) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSmall) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSmall) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSmall) OnClick(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSmall) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSmall) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSmall) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSmall) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSmall) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSmall) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSmall) OnCut(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSmall) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSmall) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSmall) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSmall) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSmall) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSmall) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSmall) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSmall) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSmall) OnError(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSmall) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSmall) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSmall) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSmall) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSmall) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSmall) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSmall) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSmall) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSmall) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSmall) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSmall) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSmall) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSmall) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSmall) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSmall) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSmall) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSmall) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSmall) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSmall) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSmall) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSmall) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSmall) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSmall) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSmall) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSmall {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSmall) Part(val any) HtmlSmall {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSmall) Slot(val any) HtmlSmall {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSmall) SpellCheck(val any) HtmlSmall {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSmall) Style(items ...*Ref[StyleItem]) HtmlSmall {
	p.setStyle(items...)
	return p
}

func (p *htmlSmall) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSmall {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSmall) TabIndex(val any) HtmlSmall {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSmall) Text(val any) HtmlSmall {
	p.setText(val)
	return p
}

func (p *htmlSmall) Title(val any) HtmlSmall {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSmall) Translate(val any) HtmlSmall {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSmall) VirtualKeyBoardPolicy(val any) HtmlSmall {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Source return a html <source> element
func Source() HtmlSource {
	return &htmlSource{htmlBaseElement: htmlBaseElement{tag: "source"}}
}

// HtmlSource represent a html <source> element
type HtmlSource interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSource

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSource

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSource

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-height
	Height(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSource

	// Id set element id attribute
	Id(val string) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-media
	Media(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-sizes
	Sizes(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-src
	Src(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-srcset
	SrcSet(val any) HtmlSource

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSource

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSource

	// Text set val as text conent for current element
	Text(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-type
	Type(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSource

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-width
	Width(val any) HtmlSource
}

type htmlSource struct {
	htmlBaseElement
}

func (p *htmlSource) AccessKey(val any) HtmlSource {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSource) AutoCapitalize(val any) HtmlSource {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSource) AutoFocus(val any) HtmlSource {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSource) Body(elems ...UI) HtmlSource {
	p.setBody(elems...)
	return p
}

func (p *htmlSource) Class(name string, items ...*Ref[StyleItem]) HtmlSource {
	p.setClass(name, items...)
	return p
}

func (p *htmlSource) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSource {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSource) ContentEditAble(val any) HtmlSource {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSource) DataWith(name string, val any) HtmlSource {
	p.dataWith(name, val)
	return p
}

func (p *htmlSource) Dir(val any) HtmlSource {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSource) DraggAble(val any) HtmlSource {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSource) EnterKeyHint(val any) HtmlSource {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSource) Height(val any) HtmlSource {
	p.SetProperty("height", val)
	return p
}

func (p *htmlSource) Hidden(val any) HtmlSource {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSource) Id(val string) HtmlSource {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSource) Inert(val any) HtmlSource {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSource) InputMode(val any) HtmlSource {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSource) Is(val any) HtmlSource {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSource) ItemId(val any) HtmlSource {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSource) ItemProp(val any) HtmlSource {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSource) ItemRef(val any) HtmlSource {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSource) ItemScope(val any) HtmlSource {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSource) ItemType(val any) HtmlSource {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSource) Lang(val any) HtmlSource {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSource) Media(val any) HtmlSource {
	p.SetProperty("media", val)
	return p
}

func (p *htmlSource) Nonce(val any) HtmlSource {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSource) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSource) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSource) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSource) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSource) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSource) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSource) OnClick(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSource) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSource) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSource) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSource) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSource) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSource) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSource) OnCut(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSource) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSource) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSource) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSource) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSource) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSource) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSource) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSource) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSource) OnError(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSource) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSource) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSource) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSource) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSource) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSource) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSource) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSource) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSource) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSource) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSource) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSource) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSource) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSource) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSource) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSource) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSource) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSource) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSource) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSource) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSource) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSource) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSource) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSource) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSource) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSource) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSource) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSource) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSource) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSource) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSource) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSource) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSource) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSource) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSource) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSource) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSource) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSource {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSource) Part(val any) HtmlSource {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSource) Sizes(val any) HtmlSource {
	p.SetProperty("sizes", val)
	return p
}

func (p *htmlSource) Slot(val any) HtmlSource {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSource) SpellCheck(val any) HtmlSource {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSource) Src(val any) HtmlSource {
	p.SetProperty("src", val)
	return p
}

func (p *htmlSource) SrcSet(val any) HtmlSource {
	p.SetProperty("srcset", val)
	return p
}

func (p *htmlSource) Style(items ...*Ref[StyleItem]) HtmlSource {
	p.setStyle(items...)
	return p
}

func (p *htmlSource) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSource {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSource) TabIndex(val any) HtmlSource {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSource) Text(val any) HtmlSource {
	p.setText(val)
	return p
}

func (p *htmlSource) Title(val any) HtmlSource {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSource) Translate(val any) HtmlSource {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSource) Type(val any) HtmlSource {
	p.SetProperty("type", val)
	return p
}

func (p *htmlSource) VirtualKeyBoardPolicy(val any) HtmlSource {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlSource) Width(val any) HtmlSource {
	p.SetProperty("width", val)
	return p
}

// Span return a html <span> element
func Span() HtmlSpan {
	return &htmlSpan{htmlBaseElement: htmlBaseElement{tag: "span"}}
}

// HtmlSpan represent a html <span> element
type HtmlSpan interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSpan

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSpan

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSpan

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSpan

	// Id set element id attribute
	Id(val string) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSpan

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSpan

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSpan

	// Text set val as text conent for current element
	Text(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSpan

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSpan
}

type htmlSpan struct {
	htmlBaseElement
}

func (p *htmlSpan) AccessKey(val any) HtmlSpan {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSpan) AutoCapitalize(val any) HtmlSpan {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSpan) AutoFocus(val any) HtmlSpan {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSpan) Body(elems ...UI) HtmlSpan {
	p.setBody(elems...)
	return p
}

func (p *htmlSpan) Class(name string, items ...*Ref[StyleItem]) HtmlSpan {
	p.setClass(name, items...)
	return p
}

func (p *htmlSpan) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSpan {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSpan) ContentEditAble(val any) HtmlSpan {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSpan) DataWith(name string, val any) HtmlSpan {
	p.dataWith(name, val)
	return p
}

func (p *htmlSpan) Dir(val any) HtmlSpan {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSpan) DraggAble(val any) HtmlSpan {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSpan) EnterKeyHint(val any) HtmlSpan {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSpan) Hidden(val any) HtmlSpan {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSpan) Id(val string) HtmlSpan {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSpan) Inert(val any) HtmlSpan {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSpan) InputMode(val any) HtmlSpan {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSpan) Is(val any) HtmlSpan {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSpan) ItemId(val any) HtmlSpan {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSpan) ItemProp(val any) HtmlSpan {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSpan) ItemRef(val any) HtmlSpan {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSpan) ItemScope(val any) HtmlSpan {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSpan) ItemType(val any) HtmlSpan {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSpan) Lang(val any) HtmlSpan {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSpan) Nonce(val any) HtmlSpan {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSpan) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSpan) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSpan) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSpan) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSpan) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSpan) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSpan) OnClick(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSpan) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSpan) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSpan) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSpan) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSpan) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSpan) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSpan) OnCut(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSpan) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSpan) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSpan) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSpan) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSpan) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSpan) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSpan) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSpan) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSpan) OnError(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSpan) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSpan) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSpan) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSpan) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSpan) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSpan) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSpan) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSpan) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSpan) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSpan) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSpan) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSpan) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSpan) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSpan) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSpan) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSpan) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSpan) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSpan) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSpan) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSpan) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSpan) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSpan) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSpan) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSpan) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSpan {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSpan) Part(val any) HtmlSpan {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSpan) Slot(val any) HtmlSpan {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSpan) SpellCheck(val any) HtmlSpan {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSpan) Style(items ...*Ref[StyleItem]) HtmlSpan {
	p.setStyle(items...)
	return p
}

func (p *htmlSpan) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSpan {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSpan) TabIndex(val any) HtmlSpan {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSpan) Text(val any) HtmlSpan {
	p.setText(val)
	return p
}

func (p *htmlSpan) Title(val any) HtmlSpan {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSpan) Translate(val any) HtmlSpan {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSpan) VirtualKeyBoardPolicy(val any) HtmlSpan {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Strong return a html <strong> element
func Strong() HtmlStrong {
	return &htmlStrong{htmlBaseElement: htmlBaseElement{tag: "strong"}}
}

// HtmlStrong represent a html <strong> element
type HtmlStrong interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlStrong

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlStrong

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlStrong

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlStrong

	// Id set element id attribute
	Id(val string) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlStrong

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlStrong

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlStrong

	// Text set val as text conent for current element
	Text(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlStrong

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlStrong
}

type htmlStrong struct {
	htmlBaseElement
}

func (p *htmlStrong) AccessKey(val any) HtmlStrong {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlStrong) AutoCapitalize(val any) HtmlStrong {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlStrong) AutoFocus(val any) HtmlStrong {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlStrong) Body(elems ...UI) HtmlStrong {
	p.setBody(elems...)
	return p
}

func (p *htmlStrong) Class(name string, items ...*Ref[StyleItem]) HtmlStrong {
	p.setClass(name, items...)
	return p
}

func (p *htmlStrong) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlStrong {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlStrong) ContentEditAble(val any) HtmlStrong {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlStrong) DataWith(name string, val any) HtmlStrong {
	p.dataWith(name, val)
	return p
}

func (p *htmlStrong) Dir(val any) HtmlStrong {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlStrong) DraggAble(val any) HtmlStrong {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlStrong) EnterKeyHint(val any) HtmlStrong {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlStrong) Hidden(val any) HtmlStrong {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlStrong) Id(val string) HtmlStrong {
	p.SetUIElementId(val)
	return p
}

func (p *htmlStrong) Inert(val any) HtmlStrong {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlStrong) InputMode(val any) HtmlStrong {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlStrong) Is(val any) HtmlStrong {
	p.SetProperty("is", val)
	return p
}

func (p *htmlStrong) ItemId(val any) HtmlStrong {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlStrong) ItemProp(val any) HtmlStrong {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlStrong) ItemRef(val any) HtmlStrong {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlStrong) ItemScope(val any) HtmlStrong {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlStrong) ItemType(val any) HtmlStrong {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlStrong) Lang(val any) HtmlStrong {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlStrong) Nonce(val any) HtmlStrong {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlStrong) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlStrong) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlStrong) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlStrong) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlStrong) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlStrong) OnBlur(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlStrong) OnClick(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlStrong) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlStrong) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlStrong) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlStrong) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlStrong) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlStrong) OnCopy(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlStrong) OnCut(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlStrong) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlStrong) OnDrag(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlStrong) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlStrong) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlStrong) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlStrong) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlStrong) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlStrong) OnDrop(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlStrong) OnError(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlStrong) OnFocus(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlStrong) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlStrong) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlStrong) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlStrong) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlStrong) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlStrong) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlStrong) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlStrong) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlStrong) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlStrong) OnPaste(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlStrong) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlStrong) OnScroll(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlStrong) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlStrong) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlStrong) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlStrong) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlStrong) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlStrong) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlStrong) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlStrong) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlStrong) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlStrong) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlStrong) OnWheel(handler func(event Event, options ...any), options ...any) HtmlStrong {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlStrong) Part(val any) HtmlStrong {
	p.SetProperty("part", val)
	return p
}

func (p *htmlStrong) Slot(val any) HtmlStrong {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlStrong) SpellCheck(val any) HtmlStrong {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlStrong) Style(items ...*Ref[StyleItem]) HtmlStrong {
	p.setStyle(items...)
	return p
}

func (p *htmlStrong) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlStrong {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlStrong) TabIndex(val any) HtmlStrong {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlStrong) Text(val any) HtmlStrong {
	p.setText(val)
	return p
}

func (p *htmlStrong) Title(val any) HtmlStrong {
	p.SetProperty("title", val)
	return p
}

func (p *htmlStrong) Translate(val any) HtmlStrong {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlStrong) VirtualKeyBoardPolicy(val any) HtmlStrong {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Style return a html <style> element
func Style() HtmlStyle {
	return &htmlStyle{htmlBaseElement: htmlBaseElement{tag: "style"}}
}

// HtmlStyle represent a html <style> element
type HtmlStyle interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-blocking
	Blocking(val any) HtmlStyle

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlStyle

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlStyle

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlStyle

	// Id set element id attribute
	Id(val string) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-media
	Media(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlStyle

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlStyle

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlStyle

	// Text set val as text conent for current element
	Text(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlStyle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlStyle
}

type htmlStyle struct {
	htmlBaseElement
}

func (p *htmlStyle) AccessKey(val any) HtmlStyle {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlStyle) AutoCapitalize(val any) HtmlStyle {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlStyle) AutoFocus(val any) HtmlStyle {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlStyle) Blocking(val any) HtmlStyle {
	p.SetProperty("blocking", val)
	return p
}

func (p *htmlStyle) Body(elems ...UI) HtmlStyle {
	p.setBody(elems...)
	return p
}

func (p *htmlStyle) Class(name string, items ...*Ref[StyleItem]) HtmlStyle {
	p.setClass(name, items...)
	return p
}

func (p *htmlStyle) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlStyle {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlStyle) ContentEditAble(val any) HtmlStyle {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlStyle) DataWith(name string, val any) HtmlStyle {
	p.dataWith(name, val)
	return p
}

func (p *htmlStyle) Dir(val any) HtmlStyle {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlStyle) DraggAble(val any) HtmlStyle {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlStyle) EnterKeyHint(val any) HtmlStyle {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlStyle) Hidden(val any) HtmlStyle {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlStyle) Id(val string) HtmlStyle {
	p.SetUIElementId(val)
	return p
}

func (p *htmlStyle) Inert(val any) HtmlStyle {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlStyle) InputMode(val any) HtmlStyle {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlStyle) Is(val any) HtmlStyle {
	p.SetProperty("is", val)
	return p
}

func (p *htmlStyle) ItemId(val any) HtmlStyle {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlStyle) ItemProp(val any) HtmlStyle {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlStyle) ItemRef(val any) HtmlStyle {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlStyle) ItemScope(val any) HtmlStyle {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlStyle) ItemType(val any) HtmlStyle {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlStyle) Lang(val any) HtmlStyle {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlStyle) Media(val any) HtmlStyle {
	p.SetProperty("media", val)
	return p
}

func (p *htmlStyle) Nonce(val any) HtmlStyle {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlStyle) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlStyle) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlStyle) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlStyle) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlStyle) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlStyle) OnBlur(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlStyle) OnClick(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlStyle) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlStyle) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlStyle) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlStyle) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlStyle) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlStyle) OnCopy(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlStyle) OnCut(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlStyle) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlStyle) OnDrag(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlStyle) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlStyle) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlStyle) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlStyle) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlStyle) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlStyle) OnDrop(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlStyle) OnError(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlStyle) OnFocus(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlStyle) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlStyle) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlStyle) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlStyle) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlStyle) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlStyle) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlStyle) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlStyle) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlStyle) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlStyle) OnPaste(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlStyle) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlStyle) OnScroll(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlStyle) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlStyle) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlStyle) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlStyle) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlStyle) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlStyle) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlStyle) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlStyle) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlStyle) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlStyle) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlStyle) OnWheel(handler func(event Event, options ...any), options ...any) HtmlStyle {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlStyle) Part(val any) HtmlStyle {
	p.SetProperty("part", val)
	return p
}

func (p *htmlStyle) Slot(val any) HtmlStyle {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlStyle) SpellCheck(val any) HtmlStyle {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlStyle) Style(items ...*Ref[StyleItem]) HtmlStyle {
	p.setStyle(items...)
	return p
}

func (p *htmlStyle) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlStyle {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlStyle) TabIndex(val any) HtmlStyle {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlStyle) Text(val any) HtmlStyle {
	p.setText(val)
	return p
}

func (p *htmlStyle) Title(val any) HtmlStyle {
	p.SetProperty("title", val)
	return p
}

func (p *htmlStyle) Translate(val any) HtmlStyle {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlStyle) VirtualKeyBoardPolicy(val any) HtmlStyle {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Sub return a html <sub> element
func Sub() HtmlSub {
	return &htmlSub{htmlBaseElement: htmlBaseElement{tag: "sub"}}
}

// HtmlSub represent a html <sub> element
type HtmlSub interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSub

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSub

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSub

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSub

	// Id set element id attribute
	Id(val string) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSub

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSub

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSub

	// Text set val as text conent for current element
	Text(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSub

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSub
}

type htmlSub struct {
	htmlBaseElement
}

func (p *htmlSub) AccessKey(val any) HtmlSub {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSub) AutoCapitalize(val any) HtmlSub {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSub) AutoFocus(val any) HtmlSub {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSub) Body(elems ...UI) HtmlSub {
	p.setBody(elems...)
	return p
}

func (p *htmlSub) Class(name string, items ...*Ref[StyleItem]) HtmlSub {
	p.setClass(name, items...)
	return p
}

func (p *htmlSub) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSub {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSub) ContentEditAble(val any) HtmlSub {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSub) DataWith(name string, val any) HtmlSub {
	p.dataWith(name, val)
	return p
}

func (p *htmlSub) Dir(val any) HtmlSub {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSub) DraggAble(val any) HtmlSub {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSub) EnterKeyHint(val any) HtmlSub {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSub) Hidden(val any) HtmlSub {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSub) Id(val string) HtmlSub {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSub) Inert(val any) HtmlSub {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSub) InputMode(val any) HtmlSub {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSub) Is(val any) HtmlSub {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSub) ItemId(val any) HtmlSub {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSub) ItemProp(val any) HtmlSub {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSub) ItemRef(val any) HtmlSub {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSub) ItemScope(val any) HtmlSub {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSub) ItemType(val any) HtmlSub {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSub) Lang(val any) HtmlSub {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSub) Nonce(val any) HtmlSub {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSub) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSub) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSub) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSub) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSub) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSub) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSub) OnClick(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSub) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSub) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSub) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSub) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSub) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSub) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSub) OnCut(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSub) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSub) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSub) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSub) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSub) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSub) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSub) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSub) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSub) OnError(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSub) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSub) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSub) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSub) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSub) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSub) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSub) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSub) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSub) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSub) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSub) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSub) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSub) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSub) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSub) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSub) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSub) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSub) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSub) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSub) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSub) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSub) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSub) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSub) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSub) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSub) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSub) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSub) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSub) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSub) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSub) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSub) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSub) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSub) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSub) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSub) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSub) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSub {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSub) Part(val any) HtmlSub {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSub) Slot(val any) HtmlSub {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSub) SpellCheck(val any) HtmlSub {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSub) Style(items ...*Ref[StyleItem]) HtmlSub {
	p.setStyle(items...)
	return p
}

func (p *htmlSub) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSub {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSub) TabIndex(val any) HtmlSub {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSub) Text(val any) HtmlSub {
	p.setText(val)
	return p
}

func (p *htmlSub) Title(val any) HtmlSub {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSub) Translate(val any) HtmlSub {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSub) VirtualKeyBoardPolicy(val any) HtmlSub {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Summary return a html <summary> element
func Summary() HtmlSummary {
	return &htmlSummary{htmlBaseElement: htmlBaseElement{tag: "summary"}}
}

// HtmlSummary represent a html <summary> element
type HtmlSummary interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSummary

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSummary

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSummary

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSummary

	// Id set element id attribute
	Id(val string) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSummary

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSummary

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSummary

	// Text set val as text conent for current element
	Text(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSummary

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSummary
}

type htmlSummary struct {
	htmlBaseElement
}

func (p *htmlSummary) AccessKey(val any) HtmlSummary {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSummary) AutoCapitalize(val any) HtmlSummary {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSummary) AutoFocus(val any) HtmlSummary {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSummary) Body(elems ...UI) HtmlSummary {
	p.setBody(elems...)
	return p
}

func (p *htmlSummary) Class(name string, items ...*Ref[StyleItem]) HtmlSummary {
	p.setClass(name, items...)
	return p
}

func (p *htmlSummary) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSummary {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSummary) ContentEditAble(val any) HtmlSummary {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSummary) DataWith(name string, val any) HtmlSummary {
	p.dataWith(name, val)
	return p
}

func (p *htmlSummary) Dir(val any) HtmlSummary {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSummary) DraggAble(val any) HtmlSummary {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSummary) EnterKeyHint(val any) HtmlSummary {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSummary) Hidden(val any) HtmlSummary {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSummary) Id(val string) HtmlSummary {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSummary) Inert(val any) HtmlSummary {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSummary) InputMode(val any) HtmlSummary {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSummary) Is(val any) HtmlSummary {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSummary) ItemId(val any) HtmlSummary {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSummary) ItemProp(val any) HtmlSummary {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSummary) ItemRef(val any) HtmlSummary {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSummary) ItemScope(val any) HtmlSummary {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSummary) ItemType(val any) HtmlSummary {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSummary) Lang(val any) HtmlSummary {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSummary) Nonce(val any) HtmlSummary {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSummary) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSummary) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSummary) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSummary) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSummary) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSummary) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSummary) OnClick(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSummary) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSummary) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSummary) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSummary) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSummary) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSummary) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSummary) OnCut(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSummary) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSummary) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSummary) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSummary) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSummary) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSummary) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSummary) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSummary) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSummary) OnError(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSummary) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSummary) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSummary) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSummary) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSummary) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSummary) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSummary) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSummary) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSummary) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSummary) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSummary) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSummary) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSummary) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSummary) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSummary) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSummary) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSummary) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSummary) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSummary) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSummary) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSummary) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSummary) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSummary) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSummary) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSummary {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSummary) Part(val any) HtmlSummary {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSummary) Slot(val any) HtmlSummary {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSummary) SpellCheck(val any) HtmlSummary {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSummary) Style(items ...*Ref[StyleItem]) HtmlSummary {
	p.setStyle(items...)
	return p
}

func (p *htmlSummary) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSummary {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSummary) TabIndex(val any) HtmlSummary {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSummary) Text(val any) HtmlSummary {
	p.setText(val)
	return p
}

func (p *htmlSummary) Title(val any) HtmlSummary {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSummary) Translate(val any) HtmlSummary {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSummary) VirtualKeyBoardPolicy(val any) HtmlSummary {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Sup return a html <sup> element
func Sup() HtmlSup {
	return &htmlSup{htmlBaseElement: htmlBaseElement{tag: "sup"}}
}

// HtmlSup represent a html <sup> element
type HtmlSup interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlSup

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlSup

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlSup

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlSup

	// Id set element id attribute
	Id(val string) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlSup

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlSup

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlSup

	// Text set val as text conent for current element
	Text(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlSup

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlSup
}

type htmlSup struct {
	htmlBaseElement
}

func (p *htmlSup) AccessKey(val any) HtmlSup {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlSup) AutoCapitalize(val any) HtmlSup {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlSup) AutoFocus(val any) HtmlSup {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlSup) Body(elems ...UI) HtmlSup {
	p.setBody(elems...)
	return p
}

func (p *htmlSup) Class(name string, items ...*Ref[StyleItem]) HtmlSup {
	p.setClass(name, items...)
	return p
}

func (p *htmlSup) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlSup {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlSup) ContentEditAble(val any) HtmlSup {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlSup) DataWith(name string, val any) HtmlSup {
	p.dataWith(name, val)
	return p
}

func (p *htmlSup) Dir(val any) HtmlSup {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlSup) DraggAble(val any) HtmlSup {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlSup) EnterKeyHint(val any) HtmlSup {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlSup) Hidden(val any) HtmlSup {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlSup) Id(val string) HtmlSup {
	p.SetUIElementId(val)
	return p
}

func (p *htmlSup) Inert(val any) HtmlSup {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlSup) InputMode(val any) HtmlSup {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlSup) Is(val any) HtmlSup {
	p.SetProperty("is", val)
	return p
}

func (p *htmlSup) ItemId(val any) HtmlSup {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlSup) ItemProp(val any) HtmlSup {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlSup) ItemRef(val any) HtmlSup {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlSup) ItemScope(val any) HtmlSup {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlSup) ItemType(val any) HtmlSup {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlSup) Lang(val any) HtmlSup {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlSup) Nonce(val any) HtmlSup {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlSup) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlSup) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlSup) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlSup) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlSup) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlSup) OnBlur(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlSup) OnClick(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlSup) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlSup) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlSup) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlSup) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlSup) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlSup) OnCopy(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlSup) OnCut(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlSup) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlSup) OnDrag(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlSup) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlSup) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlSup) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlSup) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlSup) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlSup) OnDrop(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlSup) OnError(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlSup) OnFocus(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlSup) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlSup) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlSup) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlSup) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlSup) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlSup) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlSup) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlSup) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlSup) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlSup) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlSup) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlSup) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlSup) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlSup) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlSup) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlSup) OnPaste(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlSup) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlSup) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlSup) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlSup) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlSup) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlSup) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlSup) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlSup) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlSup) OnScroll(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlSup) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlSup) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlSup) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlSup) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlSup) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlSup) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlSup) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlSup) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlSup) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlSup) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlSup) OnWheel(handler func(event Event, options ...any), options ...any) HtmlSup {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlSup) Part(val any) HtmlSup {
	p.SetProperty("part", val)
	return p
}

func (p *htmlSup) Slot(val any) HtmlSup {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlSup) SpellCheck(val any) HtmlSup {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlSup) Style(items ...*Ref[StyleItem]) HtmlSup {
	p.setStyle(items...)
	return p
}

func (p *htmlSup) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlSup {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlSup) TabIndex(val any) HtmlSup {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlSup) Text(val any) HtmlSup {
	p.setText(val)
	return p
}

func (p *htmlSup) Title(val any) HtmlSup {
	p.SetProperty("title", val)
	return p
}

func (p *htmlSup) Translate(val any) HtmlSup {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlSup) VirtualKeyBoardPolicy(val any) HtmlSup {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Table return a html <table> element
func Table() HtmlTable {
	return &htmlTable{htmlBaseElement: htmlBaseElement{tag: "table"}}
}

// HtmlTable represent a html <table> element
type HtmlTable interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTable

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTable

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTable

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTable

	// Id set element id attribute
	Id(val string) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTable

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTable

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTable

	// Text set val as text conent for current element
	Text(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTable

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTable
}

type htmlTable struct {
	htmlBaseElement
}

func (p *htmlTable) AccessKey(val any) HtmlTable {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTable) AutoCapitalize(val any) HtmlTable {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTable) AutoFocus(val any) HtmlTable {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTable) Body(elems ...UI) HtmlTable {
	p.setBody(elems...)
	return p
}

func (p *htmlTable) Class(name string, items ...*Ref[StyleItem]) HtmlTable {
	p.setClass(name, items...)
	return p
}

func (p *htmlTable) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTable {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTable) ContentEditAble(val any) HtmlTable {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTable) DataWith(name string, val any) HtmlTable {
	p.dataWith(name, val)
	return p
}

func (p *htmlTable) Dir(val any) HtmlTable {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTable) DraggAble(val any) HtmlTable {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTable) EnterKeyHint(val any) HtmlTable {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTable) Hidden(val any) HtmlTable {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTable) Id(val string) HtmlTable {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTable) Inert(val any) HtmlTable {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTable) InputMode(val any) HtmlTable {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTable) Is(val any) HtmlTable {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTable) ItemId(val any) HtmlTable {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTable) ItemProp(val any) HtmlTable {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTable) ItemRef(val any) HtmlTable {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTable) ItemScope(val any) HtmlTable {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTable) ItemType(val any) HtmlTable {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTable) Lang(val any) HtmlTable {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTable) Nonce(val any) HtmlTable {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTable) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTable) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTable) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTable) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTable) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTable) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTable) OnClick(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTable) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTable) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTable) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTable) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTable) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTable) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTable) OnCut(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTable) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTable) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTable) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTable) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTable) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTable) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTable) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTable) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTable) OnError(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTable) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTable) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTable) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTable) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTable) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTable) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTable) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTable) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTable) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTable) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTable) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTable) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTable) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTable) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTable) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTable) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTable) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTable) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTable) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTable) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTable) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTable) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTable) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTable) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTable) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTable) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTable) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTable) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTable) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTable) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTable) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTable) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTable) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTable) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTable) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTable) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTable) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTable {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTable) Part(val any) HtmlTable {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTable) Slot(val any) HtmlTable {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTable) SpellCheck(val any) HtmlTable {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTable) Style(items ...*Ref[StyleItem]) HtmlTable {
	p.setStyle(items...)
	return p
}

func (p *htmlTable) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTable {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTable) TabIndex(val any) HtmlTable {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTable) Text(val any) HtmlTable {
	p.setText(val)
	return p
}

func (p *htmlTable) Title(val any) HtmlTable {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTable) Translate(val any) HtmlTable {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTable) VirtualKeyBoardPolicy(val any) HtmlTable {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// TBody return a html <tbody> element
func TBody() HtmlTBody {
	return &htmlTBody{htmlBaseElement: htmlBaseElement{tag: "tbody"}}
}

// HtmlTBody represent a html <tbody> element
type HtmlTBody interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTBody

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTBody

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTBody

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTBody

	// Id set element id attribute
	Id(val string) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTBody

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTBody

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTBody

	// Text set val as text conent for current element
	Text(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTBody

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTBody
}

type htmlTBody struct {
	htmlBaseElement
}

func (p *htmlTBody) AccessKey(val any) HtmlTBody {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTBody) AutoCapitalize(val any) HtmlTBody {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTBody) AutoFocus(val any) HtmlTBody {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTBody) Body(elems ...UI) HtmlTBody {
	p.setBody(elems...)
	return p
}

func (p *htmlTBody) Class(name string, items ...*Ref[StyleItem]) HtmlTBody {
	p.setClass(name, items...)
	return p
}

func (p *htmlTBody) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTBody {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTBody) ContentEditAble(val any) HtmlTBody {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTBody) DataWith(name string, val any) HtmlTBody {
	p.dataWith(name, val)
	return p
}

func (p *htmlTBody) Dir(val any) HtmlTBody {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTBody) DraggAble(val any) HtmlTBody {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTBody) EnterKeyHint(val any) HtmlTBody {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTBody) Hidden(val any) HtmlTBody {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTBody) Id(val string) HtmlTBody {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTBody) Inert(val any) HtmlTBody {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTBody) InputMode(val any) HtmlTBody {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTBody) Is(val any) HtmlTBody {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTBody) ItemId(val any) HtmlTBody {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTBody) ItemProp(val any) HtmlTBody {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTBody) ItemRef(val any) HtmlTBody {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTBody) ItemScope(val any) HtmlTBody {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTBody) ItemType(val any) HtmlTBody {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTBody) Lang(val any) HtmlTBody {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTBody) Nonce(val any) HtmlTBody {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTBody) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTBody) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTBody) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTBody) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTBody) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTBody) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTBody) OnClick(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTBody) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTBody) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTBody) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTBody) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTBody) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTBody) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTBody) OnCut(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTBody) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTBody) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTBody) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTBody) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTBody) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTBody) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTBody) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTBody) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTBody) OnError(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTBody) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTBody) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTBody) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTBody) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTBody) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTBody) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTBody) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTBody) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTBody) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTBody) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTBody) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTBody) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTBody) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTBody) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTBody) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTBody) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTBody) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTBody) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTBody) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTBody) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTBody) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTBody) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTBody) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTBody) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTBody {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTBody) Part(val any) HtmlTBody {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTBody) Slot(val any) HtmlTBody {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTBody) SpellCheck(val any) HtmlTBody {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTBody) Style(items ...*Ref[StyleItem]) HtmlTBody {
	p.setStyle(items...)
	return p
}

func (p *htmlTBody) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTBody {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTBody) TabIndex(val any) HtmlTBody {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTBody) Text(val any) HtmlTBody {
	p.setText(val)
	return p
}

func (p *htmlTBody) Title(val any) HtmlTBody {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTBody) Translate(val any) HtmlTBody {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTBody) VirtualKeyBoardPolicy(val any) HtmlTBody {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Td return a html <td> element
func Td() HtmlTd {
	return &htmlTd{htmlBaseElement: htmlBaseElement{tag: "td"}}
}

// HtmlTd represent a html <td> element
type HtmlTd interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTd

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTd

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTd

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan
	ColSpan(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-headers
	Headers(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTd

	// Id set element id attribute
	Id(val string) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-rowspan
	RowSpan(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTd

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTd

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTd

	// Text set val as text conent for current element
	Text(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTd

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTd
}

type htmlTd struct {
	htmlBaseElement
}

func (p *htmlTd) AccessKey(val any) HtmlTd {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTd) AutoCapitalize(val any) HtmlTd {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTd) AutoFocus(val any) HtmlTd {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTd) Body(elems ...UI) HtmlTd {
	p.setBody(elems...)
	return p
}

func (p *htmlTd) Class(name string, items ...*Ref[StyleItem]) HtmlTd {
	p.setClass(name, items...)
	return p
}

func (p *htmlTd) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTd {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTd) ColSpan(val any) HtmlTd {
	p.SetProperty("colspan", val)
	return p
}

func (p *htmlTd) ContentEditAble(val any) HtmlTd {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTd) DataWith(name string, val any) HtmlTd {
	p.dataWith(name, val)
	return p
}

func (p *htmlTd) Dir(val any) HtmlTd {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTd) DraggAble(val any) HtmlTd {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTd) EnterKeyHint(val any) HtmlTd {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTd) Headers(val any) HtmlTd {
	p.SetProperty("headers", val)
	return p
}

func (p *htmlTd) Hidden(val any) HtmlTd {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTd) Id(val string) HtmlTd {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTd) Inert(val any) HtmlTd {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTd) InputMode(val any) HtmlTd {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTd) Is(val any) HtmlTd {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTd) ItemId(val any) HtmlTd {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTd) ItemProp(val any) HtmlTd {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTd) ItemRef(val any) HtmlTd {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTd) ItemScope(val any) HtmlTd {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTd) ItemType(val any) HtmlTd {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTd) Lang(val any) HtmlTd {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTd) Nonce(val any) HtmlTd {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTd) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTd) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTd) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTd) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTd) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTd) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTd) OnClick(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTd) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTd) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTd) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTd) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTd) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTd) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTd) OnCut(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTd) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTd) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTd) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTd) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTd) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTd) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTd) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTd) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTd) OnError(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTd) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTd) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTd) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTd) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTd) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTd) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTd) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTd) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTd) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTd) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTd) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTd) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTd) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTd) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTd) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTd) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTd) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTd) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTd) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTd) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTd) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTd) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTd) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTd) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTd) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTd) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTd) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTd) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTd) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTd) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTd) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTd) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTd) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTd) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTd) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTd) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTd) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTd {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTd) Part(val any) HtmlTd {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTd) RowSpan(val any) HtmlTd {
	p.SetProperty("rowspan", val)
	return p
}

func (p *htmlTd) Slot(val any) HtmlTd {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTd) SpellCheck(val any) HtmlTd {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTd) Style(items ...*Ref[StyleItem]) HtmlTd {
	p.setStyle(items...)
	return p
}

func (p *htmlTd) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTd {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTd) TabIndex(val any) HtmlTd {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTd) Text(val any) HtmlTd {
	p.setText(val)
	return p
}

func (p *htmlTd) Title(val any) HtmlTd {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTd) Translate(val any) HtmlTd {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTd) VirtualKeyBoardPolicy(val any) HtmlTd {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Template return a html <template> element
func Template() HtmlTemplate {
	return &htmlTemplate{htmlBaseElement: htmlBaseElement{tag: "template"}}
}

// HtmlTemplate represent a html <template> element
type HtmlTemplate interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTemplate

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTemplate

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTemplate

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTemplate

	// Id set element id attribute
	Id(val string) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTemplate

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTemplate

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTemplate

	// Text set val as text conent for current element
	Text(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTemplate

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTemplate
}

type htmlTemplate struct {
	htmlBaseElement
}

func (p *htmlTemplate) AccessKey(val any) HtmlTemplate {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTemplate) AutoCapitalize(val any) HtmlTemplate {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTemplate) AutoFocus(val any) HtmlTemplate {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTemplate) Body(elems ...UI) HtmlTemplate {
	p.setBody(elems...)
	return p
}

func (p *htmlTemplate) Class(name string, items ...*Ref[StyleItem]) HtmlTemplate {
	p.setClass(name, items...)
	return p
}

func (p *htmlTemplate) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTemplate {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTemplate) ContentEditAble(val any) HtmlTemplate {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTemplate) DataWith(name string, val any) HtmlTemplate {
	p.dataWith(name, val)
	return p
}

func (p *htmlTemplate) Dir(val any) HtmlTemplate {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTemplate) DraggAble(val any) HtmlTemplate {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTemplate) EnterKeyHint(val any) HtmlTemplate {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTemplate) Hidden(val any) HtmlTemplate {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTemplate) Id(val string) HtmlTemplate {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTemplate) Inert(val any) HtmlTemplate {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTemplate) InputMode(val any) HtmlTemplate {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTemplate) Is(val any) HtmlTemplate {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTemplate) ItemId(val any) HtmlTemplate {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTemplate) ItemProp(val any) HtmlTemplate {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTemplate) ItemRef(val any) HtmlTemplate {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTemplate) ItemScope(val any) HtmlTemplate {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTemplate) ItemType(val any) HtmlTemplate {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTemplate) Lang(val any) HtmlTemplate {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTemplate) Nonce(val any) HtmlTemplate {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTemplate) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTemplate) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTemplate) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTemplate) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTemplate) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTemplate) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTemplate) OnClick(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTemplate) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTemplate) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTemplate) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTemplate) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTemplate) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTemplate) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTemplate) OnCut(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTemplate) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTemplate) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTemplate) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTemplate) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTemplate) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTemplate) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTemplate) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTemplate) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTemplate) OnError(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTemplate) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTemplate) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTemplate) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTemplate) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTemplate) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTemplate) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTemplate) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTemplate) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTemplate) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTemplate) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTemplate) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTemplate) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTemplate) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTemplate) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTemplate) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTemplate) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTemplate) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTemplate) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTemplate) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTemplate) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTemplate) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTemplate) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTemplate) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTemplate) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTemplate {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTemplate) Part(val any) HtmlTemplate {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTemplate) Slot(val any) HtmlTemplate {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTemplate) SpellCheck(val any) HtmlTemplate {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTemplate) Style(items ...*Ref[StyleItem]) HtmlTemplate {
	p.setStyle(items...)
	return p
}

func (p *htmlTemplate) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTemplate {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTemplate) TabIndex(val any) HtmlTemplate {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTemplate) Text(val any) HtmlTemplate {
	p.setText(val)
	return p
}

func (p *htmlTemplate) Title(val any) HtmlTemplate {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTemplate) Translate(val any) HtmlTemplate {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTemplate) VirtualKeyBoardPolicy(val any) HtmlTemplate {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Textarea return a html <textarea> element
func Textarea() HtmlTextarea {
	return &htmlTextarea{htmlBaseElement: htmlBaseElement{tag: "textarea"}}
}

// HtmlTextarea represent a html <textarea> element
type HtmlTextarea interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocomplete
	AutoComplete(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocorrect
	AutoCorrect(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTextarea

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTextarea

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTextarea

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols
	Cols(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-disabled
	Disabled(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-form
	Form(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTextarea

	// Id set element id attribute
	Id(val string) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength
	MaxLength(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength
	MinLength(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name
	Name(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event
	OnBeforeInput(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event
	OnChange(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event
	OnInput(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder
	Placeholder(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-readonly
	Readonly(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-required
	Required(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows
	Rows(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTextarea

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTextarea

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTextarea

	// Text set val as text conent for current element
	Text(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-value
	// val type should be string or *Ref[string]
	Value(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTextarea

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap
	Wrap(val any) HtmlTextarea
}

type htmlTextarea struct {
	htmlBaseElement
}

func (p *htmlTextarea) AccessKey(val any) HtmlTextarea {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTextarea) AutoCapitalize(val any) HtmlTextarea {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTextarea) AutoComplete(val any) HtmlTextarea {
	p.SetProperty("autocomplete", val)
	return p
}

func (p *htmlTextarea) AutoCorrect(val any) HtmlTextarea {
	p.SetProperty("autocorrect", val)
	return p
}

func (p *htmlTextarea) AutoFocus(val any) HtmlTextarea {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTextarea) Body(elems ...UI) HtmlTextarea {
	p.setBody(elems...)
	return p
}

func (p *htmlTextarea) Class(name string, items ...*Ref[StyleItem]) HtmlTextarea {
	p.setClass(name, items...)
	return p
}

func (p *htmlTextarea) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTextarea {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTextarea) Cols(val any) HtmlTextarea {
	p.SetProperty("cols", val)
	return p
}

func (p *htmlTextarea) ContentEditAble(val any) HtmlTextarea {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTextarea) DataWith(name string, val any) HtmlTextarea {
	p.dataWith(name, val)
	return p
}

func (p *htmlTextarea) Dir(val any) HtmlTextarea {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTextarea) Disabled(val any) HtmlTextarea {
	p.SetProperty("disabled", val)
	return p
}

func (p *htmlTextarea) DraggAble(val any) HtmlTextarea {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTextarea) EnterKeyHint(val any) HtmlTextarea {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTextarea) Form(val any) HtmlTextarea {
	p.SetProperty("form", val)
	return p
}

func (p *htmlTextarea) Hidden(val any) HtmlTextarea {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTextarea) Id(val string) HtmlTextarea {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTextarea) Inert(val any) HtmlTextarea {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTextarea) InputMode(val any) HtmlTextarea {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTextarea) Is(val any) HtmlTextarea {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTextarea) ItemId(val any) HtmlTextarea {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTextarea) ItemProp(val any) HtmlTextarea {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTextarea) ItemRef(val any) HtmlTextarea {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTextarea) ItemScope(val any) HtmlTextarea {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTextarea) ItemType(val any) HtmlTextarea {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTextarea) Lang(val any) HtmlTextarea {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTextarea) MaxLength(val any) HtmlTextarea {
	p.SetProperty("maxlength", val)
	return p
}

func (p *htmlTextarea) MinLength(val any) HtmlTextarea {
	p.SetProperty("minlength", val)
	return p
}

func (p *htmlTextarea) Name(val any) HtmlTextarea {
	p.SetProperty("name", val)
	return p
}

func (p *htmlTextarea) Nonce(val any) HtmlTextarea {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTextarea) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTextarea) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTextarea) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTextarea) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTextarea) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTextarea) OnBeforeInput(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("beforeinput", handler, options...)
	return p
}

func (p *htmlTextarea) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTextarea) OnChange(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("change", handler, options...)
	return p
}

func (p *htmlTextarea) OnClick(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTextarea) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTextarea) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTextarea) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTextarea) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTextarea) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTextarea) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTextarea) OnCut(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTextarea) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTextarea) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTextarea) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTextarea) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTextarea) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTextarea) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTextarea) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTextarea) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTextarea) OnError(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTextarea) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTextarea) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTextarea) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTextarea) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTextarea) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTextarea) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTextarea) OnInput(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("input", handler, options...)
	return p
}

func (p *htmlTextarea) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTextarea) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTextarea) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTextarea) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTextarea) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTextarea) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTextarea) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTextarea) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTextarea) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTextarea) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTextarea) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTextarea) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTextarea) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTextarea) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTextarea) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTextarea) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTextarea) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTextarea) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTextarea {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTextarea) Part(val any) HtmlTextarea {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTextarea) Placeholder(val any) HtmlTextarea {
	p.SetProperty("placeholder", val)
	return p
}

func (p *htmlTextarea) Readonly(val any) HtmlTextarea {
	p.SetProperty("readonly", val)
	return p
}

func (p *htmlTextarea) Required(val any) HtmlTextarea {
	p.SetProperty("required", val)
	return p
}

func (p *htmlTextarea) Rows(val any) HtmlTextarea {
	p.SetProperty("rows", val)
	return p
}

func (p *htmlTextarea) Slot(val any) HtmlTextarea {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTextarea) SpellCheck(val any) HtmlTextarea {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTextarea) Style(items ...*Ref[StyleItem]) HtmlTextarea {
	p.setStyle(items...)
	return p
}

func (p *htmlTextarea) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTextarea {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTextarea) TabIndex(val any) HtmlTextarea {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTextarea) Text(val any) HtmlTextarea {
	p.setText(val)
	return p
}

func (p *htmlTextarea) Title(val any) HtmlTextarea {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTextarea) Translate(val any) HtmlTextarea {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTextarea) Value(val any) HtmlTextarea {
	p.bindInputValue(val)
	return p
}

func (p *htmlTextarea) VirtualKeyBoardPolicy(val any) HtmlTextarea {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlTextarea) Wrap(val any) HtmlTextarea {
	p.SetProperty("wrap", val)
	return p
}

// TFoot return a html <tfoot> element
func TFoot() HtmlTFoot {
	return &htmlTFoot{htmlBaseElement: htmlBaseElement{tag: "tfoot"}}
}

// HtmlTFoot represent a html <tfoot> element
type HtmlTFoot interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTFoot

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTFoot

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTFoot

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTFoot

	// Id set element id attribute
	Id(val string) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTFoot

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTFoot

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTFoot

	// Text set val as text conent for current element
	Text(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTFoot

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTFoot
}

type htmlTFoot struct {
	htmlBaseElement
}

func (p *htmlTFoot) AccessKey(val any) HtmlTFoot {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTFoot) AutoCapitalize(val any) HtmlTFoot {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTFoot) AutoFocus(val any) HtmlTFoot {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTFoot) Body(elems ...UI) HtmlTFoot {
	p.setBody(elems...)
	return p
}

func (p *htmlTFoot) Class(name string, items ...*Ref[StyleItem]) HtmlTFoot {
	p.setClass(name, items...)
	return p
}

func (p *htmlTFoot) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTFoot {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTFoot) ContentEditAble(val any) HtmlTFoot {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTFoot) DataWith(name string, val any) HtmlTFoot {
	p.dataWith(name, val)
	return p
}

func (p *htmlTFoot) Dir(val any) HtmlTFoot {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTFoot) DraggAble(val any) HtmlTFoot {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTFoot) EnterKeyHint(val any) HtmlTFoot {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTFoot) Hidden(val any) HtmlTFoot {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTFoot) Id(val string) HtmlTFoot {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTFoot) Inert(val any) HtmlTFoot {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTFoot) InputMode(val any) HtmlTFoot {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTFoot) Is(val any) HtmlTFoot {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTFoot) ItemId(val any) HtmlTFoot {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTFoot) ItemProp(val any) HtmlTFoot {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTFoot) ItemRef(val any) HtmlTFoot {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTFoot) ItemScope(val any) HtmlTFoot {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTFoot) ItemType(val any) HtmlTFoot {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTFoot) Lang(val any) HtmlTFoot {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTFoot) Nonce(val any) HtmlTFoot {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTFoot) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTFoot) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTFoot) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTFoot) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTFoot) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTFoot) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTFoot) OnClick(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTFoot) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTFoot) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTFoot) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTFoot) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTFoot) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTFoot) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTFoot) OnCut(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTFoot) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTFoot) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTFoot) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTFoot) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTFoot) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTFoot) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTFoot) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTFoot) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTFoot) OnError(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTFoot) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTFoot) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTFoot) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTFoot) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTFoot) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTFoot) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTFoot) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTFoot) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTFoot) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTFoot) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTFoot) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTFoot) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTFoot) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTFoot) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTFoot) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTFoot) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTFoot) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTFoot) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTFoot) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTFoot) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTFoot) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTFoot) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTFoot) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTFoot) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTFoot {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTFoot) Part(val any) HtmlTFoot {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTFoot) Slot(val any) HtmlTFoot {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTFoot) SpellCheck(val any) HtmlTFoot {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTFoot) Style(items ...*Ref[StyleItem]) HtmlTFoot {
	p.setStyle(items...)
	return p
}

func (p *htmlTFoot) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTFoot {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTFoot) TabIndex(val any) HtmlTFoot {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTFoot) Text(val any) HtmlTFoot {
	p.setText(val)
	return p
}

func (p *htmlTFoot) Title(val any) HtmlTFoot {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTFoot) Translate(val any) HtmlTFoot {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTFoot) VirtualKeyBoardPolicy(val any) HtmlTFoot {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Th return a html <th> element
func Th() HtmlTh {
	return &htmlTh{htmlBaseElement: htmlBaseElement{tag: "th"}}
}

// HtmlTh represent a html <th> element
type HtmlTh interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-abbr
	Abbr(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTh

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTh

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTh

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-colspan
	ColSpan(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-headers
	Headers(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTh

	// Id set element id attribute
	Id(val string) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-rowspan
	RowSpan(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope
	Scope(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTh

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTh

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTh

	// Text set val as text conent for current element
	Text(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTh

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTh
}

type htmlTh struct {
	htmlBaseElement
}

func (p *htmlTh) Abbr(val any) HtmlTh {
	p.SetProperty("abbr", val)
	return p
}

func (p *htmlTh) AccessKey(val any) HtmlTh {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTh) AutoCapitalize(val any) HtmlTh {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTh) AutoFocus(val any) HtmlTh {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTh) Body(elems ...UI) HtmlTh {
	p.setBody(elems...)
	return p
}

func (p *htmlTh) Class(name string, items ...*Ref[StyleItem]) HtmlTh {
	p.setClass(name, items...)
	return p
}

func (p *htmlTh) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTh {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTh) ColSpan(val any) HtmlTh {
	p.SetProperty("colspan", val)
	return p
}

func (p *htmlTh) ContentEditAble(val any) HtmlTh {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTh) DataWith(name string, val any) HtmlTh {
	p.dataWith(name, val)
	return p
}

func (p *htmlTh) Dir(val any) HtmlTh {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTh) DraggAble(val any) HtmlTh {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTh) EnterKeyHint(val any) HtmlTh {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTh) Headers(val any) HtmlTh {
	p.SetProperty("headers", val)
	return p
}

func (p *htmlTh) Hidden(val any) HtmlTh {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTh) Id(val string) HtmlTh {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTh) Inert(val any) HtmlTh {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTh) InputMode(val any) HtmlTh {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTh) Is(val any) HtmlTh {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTh) ItemId(val any) HtmlTh {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTh) ItemProp(val any) HtmlTh {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTh) ItemRef(val any) HtmlTh {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTh) ItemScope(val any) HtmlTh {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTh) ItemType(val any) HtmlTh {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTh) Lang(val any) HtmlTh {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTh) Nonce(val any) HtmlTh {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTh) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTh) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTh) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTh) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTh) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTh) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTh) OnClick(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTh) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTh) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTh) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTh) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTh) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTh) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTh) OnCut(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTh) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTh) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTh) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTh) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTh) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTh) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTh) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTh) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTh) OnError(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTh) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTh) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTh) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTh) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTh) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTh) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTh) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTh) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTh) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTh) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTh) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTh) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTh) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTh) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTh) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTh) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTh) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTh) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTh) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTh) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTh) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTh) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTh) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTh) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTh) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTh) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTh) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTh) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTh) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTh) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTh) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTh) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTh) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTh) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTh) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTh) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTh) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTh {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTh) Part(val any) HtmlTh {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTh) RowSpan(val any) HtmlTh {
	p.SetProperty("rowspan", val)
	return p
}

func (p *htmlTh) Scope(val any) HtmlTh {
	p.SetProperty("scope", val)
	return p
}

func (p *htmlTh) Slot(val any) HtmlTh {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTh) SpellCheck(val any) HtmlTh {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTh) Style(items ...*Ref[StyleItem]) HtmlTh {
	p.setStyle(items...)
	return p
}

func (p *htmlTh) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTh {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTh) TabIndex(val any) HtmlTh {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTh) Text(val any) HtmlTh {
	p.setText(val)
	return p
}

func (p *htmlTh) Title(val any) HtmlTh {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTh) Translate(val any) HtmlTh {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTh) VirtualKeyBoardPolicy(val any) HtmlTh {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// THead return a html <thead> element
func THead() HtmlTHead {
	return &htmlTHead{htmlBaseElement: htmlBaseElement{tag: "thead"}}
}

// HtmlTHead represent a html <thead> element
type HtmlTHead interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTHead

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTHead

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTHead

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTHead

	// Id set element id attribute
	Id(val string) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTHead

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTHead

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTHead

	// Text set val as text conent for current element
	Text(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTHead

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTHead
}

type htmlTHead struct {
	htmlBaseElement
}

func (p *htmlTHead) AccessKey(val any) HtmlTHead {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTHead) AutoCapitalize(val any) HtmlTHead {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTHead) AutoFocus(val any) HtmlTHead {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTHead) Body(elems ...UI) HtmlTHead {
	p.setBody(elems...)
	return p
}

func (p *htmlTHead) Class(name string, items ...*Ref[StyleItem]) HtmlTHead {
	p.setClass(name, items...)
	return p
}

func (p *htmlTHead) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTHead {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTHead) ContentEditAble(val any) HtmlTHead {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTHead) DataWith(name string, val any) HtmlTHead {
	p.dataWith(name, val)
	return p
}

func (p *htmlTHead) Dir(val any) HtmlTHead {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTHead) DraggAble(val any) HtmlTHead {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTHead) EnterKeyHint(val any) HtmlTHead {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTHead) Hidden(val any) HtmlTHead {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTHead) Id(val string) HtmlTHead {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTHead) Inert(val any) HtmlTHead {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTHead) InputMode(val any) HtmlTHead {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTHead) Is(val any) HtmlTHead {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTHead) ItemId(val any) HtmlTHead {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTHead) ItemProp(val any) HtmlTHead {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTHead) ItemRef(val any) HtmlTHead {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTHead) ItemScope(val any) HtmlTHead {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTHead) ItemType(val any) HtmlTHead {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTHead) Lang(val any) HtmlTHead {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTHead) Nonce(val any) HtmlTHead {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTHead) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTHead) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTHead) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTHead) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTHead) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTHead) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTHead) OnClick(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTHead) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTHead) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTHead) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTHead) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTHead) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTHead) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTHead) OnCut(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTHead) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTHead) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTHead) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTHead) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTHead) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTHead) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTHead) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTHead) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTHead) OnError(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTHead) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTHead) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTHead) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTHead) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTHead) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTHead) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTHead) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTHead) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTHead) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTHead) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTHead) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTHead) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTHead) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTHead) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTHead) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTHead) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTHead) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTHead) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTHead) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTHead) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTHead) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTHead) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTHead) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTHead) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTHead {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTHead) Part(val any) HtmlTHead {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTHead) Slot(val any) HtmlTHead {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTHead) SpellCheck(val any) HtmlTHead {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTHead) Style(items ...*Ref[StyleItem]) HtmlTHead {
	p.setStyle(items...)
	return p
}

func (p *htmlTHead) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTHead {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTHead) TabIndex(val any) HtmlTHead {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTHead) Text(val any) HtmlTHead {
	p.setText(val)
	return p
}

func (p *htmlTHead) Title(val any) HtmlTHead {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTHead) Translate(val any) HtmlTHead {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTHead) VirtualKeyBoardPolicy(val any) HtmlTHead {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Time return a html <time> element
func Time() HtmlTime {
	return &htmlTime{htmlBaseElement: htmlBaseElement{tag: "time"}}
}

// HtmlTime represent a html <time> element
type HtmlTime interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTime

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTime

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTime

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#attr-datetime
	Datetime(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTime

	// Id set element id attribute
	Id(val string) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTime

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTime

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTime

	// Text set val as text conent for current element
	Text(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTime

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTime
}

type htmlTime struct {
	htmlBaseElement
}

func (p *htmlTime) AccessKey(val any) HtmlTime {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTime) AutoCapitalize(val any) HtmlTime {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTime) AutoFocus(val any) HtmlTime {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTime) Body(elems ...UI) HtmlTime {
	p.setBody(elems...)
	return p
}

func (p *htmlTime) Class(name string, items ...*Ref[StyleItem]) HtmlTime {
	p.setClass(name, items...)
	return p
}

func (p *htmlTime) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTime {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTime) ContentEditAble(val any) HtmlTime {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTime) DataWith(name string, val any) HtmlTime {
	p.dataWith(name, val)
	return p
}

func (p *htmlTime) Datetime(val any) HtmlTime {
	p.SetProperty("datetime", val)
	return p
}

func (p *htmlTime) Dir(val any) HtmlTime {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTime) DraggAble(val any) HtmlTime {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTime) EnterKeyHint(val any) HtmlTime {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTime) Hidden(val any) HtmlTime {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTime) Id(val string) HtmlTime {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTime) Inert(val any) HtmlTime {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTime) InputMode(val any) HtmlTime {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTime) Is(val any) HtmlTime {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTime) ItemId(val any) HtmlTime {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTime) ItemProp(val any) HtmlTime {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTime) ItemRef(val any) HtmlTime {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTime) ItemScope(val any) HtmlTime {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTime) ItemType(val any) HtmlTime {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTime) Lang(val any) HtmlTime {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTime) Nonce(val any) HtmlTime {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTime) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTime) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTime) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTime) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTime) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTime) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTime) OnClick(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTime) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTime) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTime) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTime) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTime) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTime) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTime) OnCut(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTime) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTime) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTime) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTime) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTime) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTime) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTime) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTime) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTime) OnError(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTime) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTime) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTime) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTime) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTime) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTime) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTime) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTime) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTime) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTime) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTime) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTime) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTime) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTime) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTime) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTime) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTime) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTime) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTime) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTime) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTime) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTime) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTime) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTime) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTime) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTime) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTime) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTime) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTime) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTime) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTime) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTime) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTime) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTime) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTime) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTime) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTime) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTime {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTime) Part(val any) HtmlTime {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTime) Slot(val any) HtmlTime {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTime) SpellCheck(val any) HtmlTime {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTime) Style(items ...*Ref[StyleItem]) HtmlTime {
	p.setStyle(items...)
	return p
}

func (p *htmlTime) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTime {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTime) TabIndex(val any) HtmlTime {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTime) Text(val any) HtmlTime {
	p.setText(val)
	return p
}

func (p *htmlTime) Title(val any) HtmlTime {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTime) Translate(val any) HtmlTime {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTime) VirtualKeyBoardPolicy(val any) HtmlTime {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Title return a html <title> element
func Title() HtmlTitle {
	return &htmlTitle{htmlBaseElement: htmlBaseElement{tag: "title"}}
}

// HtmlTitle represent a html <title> element
type HtmlTitle interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTitle

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTitle

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTitle

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTitle

	// Id set element id attribute
	Id(val string) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTitle

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTitle

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTitle

	// Text set val as text conent for current element
	Text(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTitle

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTitle
}

type htmlTitle struct {
	htmlBaseElement
}

func (p *htmlTitle) AccessKey(val any) HtmlTitle {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTitle) AutoCapitalize(val any) HtmlTitle {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTitle) AutoFocus(val any) HtmlTitle {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTitle) Body(elems ...UI) HtmlTitle {
	p.setBody(elems...)
	return p
}

func (p *htmlTitle) Class(name string, items ...*Ref[StyleItem]) HtmlTitle {
	p.setClass(name, items...)
	return p
}

func (p *htmlTitle) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTitle {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTitle) ContentEditAble(val any) HtmlTitle {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTitle) DataWith(name string, val any) HtmlTitle {
	p.dataWith(name, val)
	return p
}

func (p *htmlTitle) Dir(val any) HtmlTitle {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTitle) DraggAble(val any) HtmlTitle {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTitle) EnterKeyHint(val any) HtmlTitle {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTitle) Hidden(val any) HtmlTitle {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTitle) Id(val string) HtmlTitle {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTitle) Inert(val any) HtmlTitle {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTitle) InputMode(val any) HtmlTitle {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTitle) Is(val any) HtmlTitle {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTitle) ItemId(val any) HtmlTitle {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTitle) ItemProp(val any) HtmlTitle {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTitle) ItemRef(val any) HtmlTitle {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTitle) ItemScope(val any) HtmlTitle {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTitle) ItemType(val any) HtmlTitle {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTitle) Lang(val any) HtmlTitle {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTitle) Nonce(val any) HtmlTitle {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTitle) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTitle) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTitle) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTitle) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTitle) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTitle) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTitle) OnClick(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTitle) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTitle) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTitle) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTitle) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTitle) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTitle) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTitle) OnCut(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTitle) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTitle) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTitle) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTitle) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTitle) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTitle) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTitle) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTitle) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTitle) OnError(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTitle) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTitle) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTitle) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTitle) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTitle) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTitle) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTitle) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTitle) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTitle) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTitle) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTitle) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTitle) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTitle) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTitle) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTitle) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTitle) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTitle) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTitle) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTitle) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTitle) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTitle) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTitle) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTitle) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTitle) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTitle {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTitle) Part(val any) HtmlTitle {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTitle) Slot(val any) HtmlTitle {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTitle) SpellCheck(val any) HtmlTitle {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTitle) Style(items ...*Ref[StyleItem]) HtmlTitle {
	p.setStyle(items...)
	return p
}

func (p *htmlTitle) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTitle {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTitle) TabIndex(val any) HtmlTitle {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTitle) Text(val any) HtmlTitle {
	p.setText(val)
	return p
}

func (p *htmlTitle) Title(val any) HtmlTitle {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTitle) Translate(val any) HtmlTitle {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTitle) VirtualKeyBoardPolicy(val any) HtmlTitle {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// tr return a html <tr> element
func tr() Htmltr {
	return &htmltr{htmlBaseElement: htmlBaseElement{tag: "tr"}}
}

// Htmltr represent a html <tr> element
type Htmltr interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) Htmltr

	// Body add elems as sub content for current element
	Body(elems ...UI) Htmltr

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) Htmltr

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) Htmltr

	// Id set element id attribute
	Id(val string) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) Htmltr

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) Htmltr

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) Htmltr

	// Text set val as text conent for current element
	Text(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) Htmltr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) Htmltr
}

type htmltr struct {
	htmlBaseElement
}

func (p *htmltr) AccessKey(val any) Htmltr {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmltr) AutoCapitalize(val any) Htmltr {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmltr) AutoFocus(val any) Htmltr {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmltr) Body(elems ...UI) Htmltr {
	p.setBody(elems...)
	return p
}

func (p *htmltr) Class(name string, items ...*Ref[StyleItem]) Htmltr {
	p.setClass(name, items...)
	return p
}

func (p *htmltr) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) Htmltr {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmltr) ContentEditAble(val any) Htmltr {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmltr) DataWith(name string, val any) Htmltr {
	p.dataWith(name, val)
	return p
}

func (p *htmltr) Dir(val any) Htmltr {
	p.SetProperty("dir", val)
	return p
}

func (p *htmltr) DraggAble(val any) Htmltr {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmltr) EnterKeyHint(val any) Htmltr {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmltr) Hidden(val any) Htmltr {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmltr) Id(val string) Htmltr {
	p.SetUIElementId(val)
	return p
}

func (p *htmltr) Inert(val any) Htmltr {
	p.SetProperty("inert", val)
	return p
}

func (p *htmltr) InputMode(val any) Htmltr {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmltr) Is(val any) Htmltr {
	p.SetProperty("is", val)
	return p
}

func (p *htmltr) ItemId(val any) Htmltr {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmltr) ItemProp(val any) Htmltr {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmltr) ItemRef(val any) Htmltr {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmltr) ItemScope(val any) Htmltr {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmltr) ItemType(val any) Htmltr {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmltr) Lang(val any) Htmltr {
	p.SetProperty("lang", val)
	return p
}

func (p *htmltr) Nonce(val any) Htmltr {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmltr) OnAnimationCancel(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmltr) OnAnimationEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmltr) OnAnimationIteration(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmltr) OnAnimationStart(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmltr) OnAuxClick(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmltr) OnBlur(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmltr) OnClick(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmltr) OnCompositionEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmltr) OnCompositionStart(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmltr) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmltr) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmltr) OnContextMenu(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmltr) OnCopy(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmltr) OnCut(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmltr) OnDblClick(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmltr) OnDrag(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmltr) OnDragEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmltr) OnDragEnter(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmltr) OnDragLeave(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmltr) OnDragOver(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmltr) OnDragStart(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmltr) OnDrop(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmltr) OnError(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmltr) OnFocus(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmltr) OnFocusIn(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmltr) OnFocusOut(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmltr) OnFullScreenChange(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmltr) OnFullScreenError(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmltr) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmltr) OnKeyDown(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmltr) OnKeyUp(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmltr) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmltr) OnMouseDown(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmltr) OnMouseEnter(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmltr) OnMouseLeave(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmltr) OnMouseMove(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmltr) OnMouseOut(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmltr) OnMouseOver(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmltr) OnMouseUp(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmltr) OnPaste(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmltr) OnPointerCancel(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmltr) OnPointerDown(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmltr) OnPointerEnter(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmltr) OnPointerLeave(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmltr) OnPointerMove(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmltr) OnPointerOut(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmltr) OnPointerOver(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmltr) OnPointerUp(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmltr) OnScroll(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmltr) OnScrollEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmltr) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmltr) OnTouchCancel(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmltr) OnTouchEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmltr) OnTouchMove(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmltr) OnTouchStart(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmltr) OnTransitionCancel(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmltr) OnTransitionEnd(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmltr) OnTransitionRun(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmltr) OnTransitionStart(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmltr) OnWheel(handler func(event Event, options ...any), options ...any) Htmltr {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmltr) Part(val any) Htmltr {
	p.SetProperty("part", val)
	return p
}

func (p *htmltr) Slot(val any) Htmltr {
	p.SetProperty("slot", val)
	return p
}

func (p *htmltr) SpellCheck(val any) Htmltr {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmltr) Style(items ...*Ref[StyleItem]) Htmltr {
	p.setStyle(items...)
	return p
}

func (p *htmltr) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) Htmltr {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmltr) TabIndex(val any) Htmltr {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmltr) Text(val any) Htmltr {
	p.setText(val)
	return p
}

func (p *htmltr) Title(val any) Htmltr {
	p.SetProperty("title", val)
	return p
}

func (p *htmltr) Translate(val any) Htmltr {
	p.SetProperty("translate", val)
	return p
}

func (p *htmltr) VirtualKeyBoardPolicy(val any) Htmltr {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Track return a html <track> element
func Track() HtmlTrack {
	return &htmlTrack{htmlBaseElement: htmlBaseElement{tag: "track"}}
}

// HtmlTrack represent a html <track> element
type HtmlTrack interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlTrack

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlTrack

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlTrack

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#attr-default
	Default(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#attr-hkind
	HKind(val any) HtmlTrack

	// Id set element id attribute
	Id(val string) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#attr-label
	Label(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#attr-src
	Src(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#attr-srclang
	SrcLang(val any) HtmlTrack

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlTrack

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlTrack

	// Text set val as text conent for current element
	Text(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlTrack

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlTrack
}

type htmlTrack struct {
	htmlBaseElement
}

func (p *htmlTrack) AccessKey(val any) HtmlTrack {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlTrack) AutoCapitalize(val any) HtmlTrack {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlTrack) AutoFocus(val any) HtmlTrack {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlTrack) Body(elems ...UI) HtmlTrack {
	p.setBody(elems...)
	return p
}

func (p *htmlTrack) Class(name string, items ...*Ref[StyleItem]) HtmlTrack {
	p.setClass(name, items...)
	return p
}

func (p *htmlTrack) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlTrack {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlTrack) ContentEditAble(val any) HtmlTrack {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlTrack) DataWith(name string, val any) HtmlTrack {
	p.dataWith(name, val)
	return p
}

func (p *htmlTrack) Default(val any) HtmlTrack {
	p.SetProperty("default", val)
	return p
}

func (p *htmlTrack) Dir(val any) HtmlTrack {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlTrack) DraggAble(val any) HtmlTrack {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlTrack) EnterKeyHint(val any) HtmlTrack {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlTrack) Hidden(val any) HtmlTrack {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlTrack) HKind(val any) HtmlTrack {
	p.SetProperty("hkind", val)
	return p
}

func (p *htmlTrack) Id(val string) HtmlTrack {
	p.SetUIElementId(val)
	return p
}

func (p *htmlTrack) Inert(val any) HtmlTrack {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlTrack) InputMode(val any) HtmlTrack {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlTrack) Is(val any) HtmlTrack {
	p.SetProperty("is", val)
	return p
}

func (p *htmlTrack) ItemId(val any) HtmlTrack {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlTrack) ItemProp(val any) HtmlTrack {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlTrack) ItemRef(val any) HtmlTrack {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlTrack) ItemScope(val any) HtmlTrack {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlTrack) ItemType(val any) HtmlTrack {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlTrack) Label(val any) HtmlTrack {
	p.SetProperty("label", val)
	return p
}

func (p *htmlTrack) Lang(val any) HtmlTrack {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlTrack) Nonce(val any) HtmlTrack {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlTrack) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlTrack) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlTrack) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlTrack) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlTrack) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlTrack) OnBlur(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlTrack) OnClick(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlTrack) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlTrack) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlTrack) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlTrack) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlTrack) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlTrack) OnCopy(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlTrack) OnCut(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlTrack) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlTrack) OnDrag(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlTrack) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlTrack) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlTrack) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlTrack) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlTrack) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlTrack) OnDrop(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlTrack) OnError(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlTrack) OnFocus(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlTrack) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlTrack) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlTrack) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlTrack) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlTrack) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlTrack) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlTrack) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlTrack) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlTrack) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlTrack) OnPaste(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlTrack) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlTrack) OnScroll(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlTrack) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlTrack) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlTrack) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlTrack) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlTrack) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlTrack) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlTrack) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlTrack) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlTrack) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlTrack) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlTrack) OnWheel(handler func(event Event, options ...any), options ...any) HtmlTrack {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlTrack) Part(val any) HtmlTrack {
	p.SetProperty("part", val)
	return p
}

func (p *htmlTrack) Slot(val any) HtmlTrack {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlTrack) SpellCheck(val any) HtmlTrack {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlTrack) Src(val any) HtmlTrack {
	p.SetProperty("src", val)
	return p
}

func (p *htmlTrack) SrcLang(val any) HtmlTrack {
	p.SetProperty("srclang", val)
	return p
}

func (p *htmlTrack) Style(items ...*Ref[StyleItem]) HtmlTrack {
	p.setStyle(items...)
	return p
}

func (p *htmlTrack) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlTrack {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlTrack) TabIndex(val any) HtmlTrack {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlTrack) Text(val any) HtmlTrack {
	p.setText(val)
	return p
}

func (p *htmlTrack) Title(val any) HtmlTrack {
	p.SetProperty("title", val)
	return p
}

func (p *htmlTrack) Translate(val any) HtmlTrack {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlTrack) VirtualKeyBoardPolicy(val any) HtmlTrack {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// U return a html <u> element
func U() HtmlU {
	return &htmlU{htmlBaseElement: htmlBaseElement{tag: "u"}}
}

// HtmlU represent a html <u> element
type HtmlU interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlU

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlU

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlU

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlU

	// Id set element id attribute
	Id(val string) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlU

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlU

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlU

	// Text set val as text conent for current element
	Text(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlU

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlU
}

type htmlU struct {
	htmlBaseElement
}

func (p *htmlU) AccessKey(val any) HtmlU {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlU) AutoCapitalize(val any) HtmlU {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlU) AutoFocus(val any) HtmlU {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlU) Body(elems ...UI) HtmlU {
	p.setBody(elems...)
	return p
}

func (p *htmlU) Class(name string, items ...*Ref[StyleItem]) HtmlU {
	p.setClass(name, items...)
	return p
}

func (p *htmlU) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlU {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlU) ContentEditAble(val any) HtmlU {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlU) DataWith(name string, val any) HtmlU {
	p.dataWith(name, val)
	return p
}

func (p *htmlU) Dir(val any) HtmlU {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlU) DraggAble(val any) HtmlU {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlU) EnterKeyHint(val any) HtmlU {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlU) Hidden(val any) HtmlU {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlU) Id(val string) HtmlU {
	p.SetUIElementId(val)
	return p
}

func (p *htmlU) Inert(val any) HtmlU {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlU) InputMode(val any) HtmlU {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlU) Is(val any) HtmlU {
	p.SetProperty("is", val)
	return p
}

func (p *htmlU) ItemId(val any) HtmlU {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlU) ItemProp(val any) HtmlU {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlU) ItemRef(val any) HtmlU {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlU) ItemScope(val any) HtmlU {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlU) ItemType(val any) HtmlU {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlU) Lang(val any) HtmlU {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlU) Nonce(val any) HtmlU {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlU) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlU) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlU) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlU) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlU) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlU) OnBlur(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlU) OnClick(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlU) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlU) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlU) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlU) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlU) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlU) OnCopy(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlU) OnCut(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlU) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlU) OnDrag(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlU) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlU) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlU) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlU) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlU) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlU) OnDrop(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlU) OnError(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlU) OnFocus(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlU) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlU) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlU) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlU) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlU) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlU) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlU) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlU) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlU) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlU) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlU) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlU) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlU) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlU) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlU) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlU) OnPaste(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlU) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlU) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlU) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlU) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlU) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlU) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlU) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlU) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlU) OnScroll(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlU) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlU) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlU) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlU) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlU) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlU) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlU) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlU) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlU) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlU) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlU) OnWheel(handler func(event Event, options ...any), options ...any) HtmlU {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlU) Part(val any) HtmlU {
	p.SetProperty("part", val)
	return p
}

func (p *htmlU) Slot(val any) HtmlU {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlU) SpellCheck(val any) HtmlU {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlU) Style(items ...*Ref[StyleItem]) HtmlU {
	p.setStyle(items...)
	return p
}

func (p *htmlU) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlU {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlU) TabIndex(val any) HtmlU {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlU) Text(val any) HtmlU {
	p.setText(val)
	return p
}

func (p *htmlU) Title(val any) HtmlU {
	p.SetProperty("title", val)
	return p
}

func (p *htmlU) Translate(val any) HtmlU {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlU) VirtualKeyBoardPolicy(val any) HtmlU {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Ul return a html <ul> element
func Ul() HtmlUl {
	return &htmlUl{htmlBaseElement: htmlBaseElement{tag: "ul"}}
}

// HtmlUl represent a html <ul> element
type HtmlUl interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlUl

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlUl

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlUl

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlUl

	// Id set element id attribute
	Id(val string) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlUl

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlUl

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlUl

	// Text set val as text conent for current element
	Text(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlUl

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlUl
}

type htmlUl struct {
	htmlBaseElement
}

func (p *htmlUl) AccessKey(val any) HtmlUl {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlUl) AutoCapitalize(val any) HtmlUl {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlUl) AutoFocus(val any) HtmlUl {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlUl) Body(elems ...UI) HtmlUl {
	p.setBody(elems...)
	return p
}

func (p *htmlUl) Class(name string, items ...*Ref[StyleItem]) HtmlUl {
	p.setClass(name, items...)
	return p
}

func (p *htmlUl) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlUl {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlUl) ContentEditAble(val any) HtmlUl {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlUl) DataWith(name string, val any) HtmlUl {
	p.dataWith(name, val)
	return p
}

func (p *htmlUl) Dir(val any) HtmlUl {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlUl) DraggAble(val any) HtmlUl {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlUl) EnterKeyHint(val any) HtmlUl {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlUl) Hidden(val any) HtmlUl {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlUl) Id(val string) HtmlUl {
	p.SetUIElementId(val)
	return p
}

func (p *htmlUl) Inert(val any) HtmlUl {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlUl) InputMode(val any) HtmlUl {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlUl) Is(val any) HtmlUl {
	p.SetProperty("is", val)
	return p
}

func (p *htmlUl) ItemId(val any) HtmlUl {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlUl) ItemProp(val any) HtmlUl {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlUl) ItemRef(val any) HtmlUl {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlUl) ItemScope(val any) HtmlUl {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlUl) ItemType(val any) HtmlUl {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlUl) Lang(val any) HtmlUl {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlUl) Nonce(val any) HtmlUl {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlUl) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlUl) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlUl) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlUl) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlUl) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlUl) OnBlur(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlUl) OnClick(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlUl) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlUl) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlUl) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlUl) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlUl) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlUl) OnCopy(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlUl) OnCut(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlUl) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlUl) OnDrag(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlUl) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlUl) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlUl) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlUl) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlUl) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlUl) OnDrop(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlUl) OnError(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlUl) OnFocus(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlUl) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlUl) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlUl) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlUl) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlUl) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlUl) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlUl) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlUl) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlUl) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlUl) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlUl) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlUl) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlUl) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlUl) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlUl) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlUl) OnPaste(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlUl) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlUl) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlUl) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlUl) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlUl) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlUl) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlUl) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlUl) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlUl) OnScroll(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlUl) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlUl) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlUl) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlUl) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlUl) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlUl) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlUl) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlUl) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlUl) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlUl) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlUl) OnWheel(handler func(event Event, options ...any), options ...any) HtmlUl {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlUl) Part(val any) HtmlUl {
	p.SetProperty("part", val)
	return p
}

func (p *htmlUl) Slot(val any) HtmlUl {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlUl) SpellCheck(val any) HtmlUl {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlUl) Style(items ...*Ref[StyleItem]) HtmlUl {
	p.setStyle(items...)
	return p
}

func (p *htmlUl) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlUl {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlUl) TabIndex(val any) HtmlUl {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlUl) Text(val any) HtmlUl {
	p.setText(val)
	return p
}

func (p *htmlUl) Title(val any) HtmlUl {
	p.SetProperty("title", val)
	return p
}

func (p *htmlUl) Translate(val any) HtmlUl {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlUl) VirtualKeyBoardPolicy(val any) HtmlUl {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Var return a html <var> element
func Var() HtmlVar {
	return &htmlVar{htmlBaseElement: htmlBaseElement{tag: "var"}}
}

// HtmlVar represent a html <var> element
type HtmlVar interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlVar

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlVar

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlVar

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlVar

	// Id set element id attribute
	Id(val string) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlVar

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlVar

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlVar

	// Text set val as text conent for current element
	Text(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlVar

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlVar
}

type htmlVar struct {
	htmlBaseElement
}

func (p *htmlVar) AccessKey(val any) HtmlVar {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlVar) AutoCapitalize(val any) HtmlVar {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlVar) AutoFocus(val any) HtmlVar {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlVar) Body(elems ...UI) HtmlVar {
	p.setBody(elems...)
	return p
}

func (p *htmlVar) Class(name string, items ...*Ref[StyleItem]) HtmlVar {
	p.setClass(name, items...)
	return p
}

func (p *htmlVar) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlVar {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlVar) ContentEditAble(val any) HtmlVar {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlVar) DataWith(name string, val any) HtmlVar {
	p.dataWith(name, val)
	return p
}

func (p *htmlVar) Dir(val any) HtmlVar {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlVar) DraggAble(val any) HtmlVar {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlVar) EnterKeyHint(val any) HtmlVar {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlVar) Hidden(val any) HtmlVar {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlVar) Id(val string) HtmlVar {
	p.SetUIElementId(val)
	return p
}

func (p *htmlVar) Inert(val any) HtmlVar {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlVar) InputMode(val any) HtmlVar {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlVar) Is(val any) HtmlVar {
	p.SetProperty("is", val)
	return p
}

func (p *htmlVar) ItemId(val any) HtmlVar {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlVar) ItemProp(val any) HtmlVar {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlVar) ItemRef(val any) HtmlVar {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlVar) ItemScope(val any) HtmlVar {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlVar) ItemType(val any) HtmlVar {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlVar) Lang(val any) HtmlVar {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlVar) Nonce(val any) HtmlVar {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlVar) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlVar) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlVar) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlVar) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlVar) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlVar) OnBlur(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlVar) OnClick(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlVar) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlVar) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlVar) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlVar) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlVar) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlVar) OnCopy(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlVar) OnCut(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlVar) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlVar) OnDrag(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlVar) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlVar) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlVar) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlVar) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlVar) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlVar) OnDrop(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlVar) OnError(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlVar) OnFocus(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlVar) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlVar) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlVar) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlVar) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlVar) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlVar) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlVar) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlVar) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlVar) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlVar) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlVar) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlVar) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlVar) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlVar) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlVar) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlVar) OnPaste(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlVar) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlVar) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlVar) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlVar) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlVar) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlVar) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlVar) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlVar) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlVar) OnScroll(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlVar) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlVar) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlVar) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlVar) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlVar) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlVar) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlVar) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlVar) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlVar) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlVar) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlVar) OnWheel(handler func(event Event, options ...any), options ...any) HtmlVar {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlVar) Part(val any) HtmlVar {
	p.SetProperty("part", val)
	return p
}

func (p *htmlVar) Slot(val any) HtmlVar {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlVar) SpellCheck(val any) HtmlVar {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlVar) Style(items ...*Ref[StyleItem]) HtmlVar {
	p.setStyle(items...)
	return p
}

func (p *htmlVar) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlVar {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlVar) TabIndex(val any) HtmlVar {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlVar) Text(val any) HtmlVar {
	p.setText(val)
	return p
}

func (p *htmlVar) Title(val any) HtmlVar {
	p.SetProperty("title", val)
	return p
}

func (p *htmlVar) Translate(val any) HtmlVar {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlVar) VirtualKeyBoardPolicy(val any) HtmlVar {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

// Video return a html <video> element
func Video() HtmlVideo {
	return &htmlVideo{htmlBaseElement: htmlBaseElement{tag: "video"}}
}

// HtmlVideo represent a html <video> element
type HtmlVideo interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-autopictureinpicture
	AutoPictureInPicture(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-autoplay
	AutoPlay(val any) HtmlVideo

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlVideo

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlVideo

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-controls
	Controls(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-controlslist
	ControlsList(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin
	CrossOrigin(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-disablepictureinpicture
	DisablePictureInPicture(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-disableremoteplayback
	DisableRemotePlayback(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-height
	Height(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlVideo

	// Id set element id attribute
	Id(val string) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-loop
	Loop(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-muted
	Muted(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event
	OnCanPlay(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event
	OnCanPlayThrough(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/complete_event
	OnComplete(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event
	OnDurationChange(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event
	OnEmptied(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event
	OnEnded(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event
	OnLoadedData(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event
	OnLoadedMetadata(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event
	OnPause(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event
	OnPlay(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event
	OnPlaying(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event
	OnProgress(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event
	OnRateChange(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event
	OnSeeked(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event
	OnSeeking(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event
	OnStalled(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event
	OnSuspend(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event
	OnTimeUpdate(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event
	OnVolumeChange(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event
	OnWaiting(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-playsinline
	PlaysInline(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-poster
	Poster(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-preload
	Preload(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-src
	Src(val any) HtmlVideo

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlVideo

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlVideo

	// Text set val as text conent for current element
	Text(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlVideo

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-width
	Width(val any) HtmlVideo
}

type htmlVideo struct {
	htmlBaseElement
}

func (p *htmlVideo) AccessKey(val any) HtmlVideo {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlVideo) AutoCapitalize(val any) HtmlVideo {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlVideo) AutoFocus(val any) HtmlVideo {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlVideo) AutoPictureInPicture(val any) HtmlVideo {
	p.SetProperty("autopictureinpicture", val)
	return p
}

func (p *htmlVideo) AutoPlay(val any) HtmlVideo {
	p.SetProperty("autoplay", val)
	return p
}

func (p *htmlVideo) Body(elems ...UI) HtmlVideo {
	p.setBody(elems...)
	return p
}

func (p *htmlVideo) Class(name string, items ...*Ref[StyleItem]) HtmlVideo {
	p.setClass(name, items...)
	return p
}

func (p *htmlVideo) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlVideo {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlVideo) ContentEditAble(val any) HtmlVideo {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlVideo) Controls(val any) HtmlVideo {
	p.SetProperty("controls", val)
	return p
}

func (p *htmlVideo) ControlsList(val any) HtmlVideo {
	p.SetProperty("controlslist", val)
	return p
}

func (p *htmlVideo) CrossOrigin(val any) HtmlVideo {
	p.SetProperty("crossorigin", val)
	return p
}

func (p *htmlVideo) DataWith(name string, val any) HtmlVideo {
	p.dataWith(name, val)
	return p
}

func (p *htmlVideo) Dir(val any) HtmlVideo {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlVideo) DisablePictureInPicture(val any) HtmlVideo {
	p.SetProperty("disablepictureinpicture", val)
	return p
}

func (p *htmlVideo) DisableRemotePlayback(val any) HtmlVideo {
	p.SetProperty("disableremoteplayback", val)
	return p
}

func (p *htmlVideo) DraggAble(val any) HtmlVideo {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlVideo) EnterKeyHint(val any) HtmlVideo {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlVideo) Height(val any) HtmlVideo {
	p.SetProperty("height", val)
	return p
}

func (p *htmlVideo) Hidden(val any) HtmlVideo {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlVideo) Id(val string) HtmlVideo {
	p.SetUIElementId(val)
	return p
}

func (p *htmlVideo) Inert(val any) HtmlVideo {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlVideo) InputMode(val any) HtmlVideo {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlVideo) Is(val any) HtmlVideo {
	p.SetProperty("is", val)
	return p
}

func (p *htmlVideo) ItemId(val any) HtmlVideo {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlVideo) ItemProp(val any) HtmlVideo {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlVideo) ItemRef(val any) HtmlVideo {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlVideo) ItemScope(val any) HtmlVideo {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlVideo) ItemType(val any) HtmlVideo {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlVideo) Lang(val any) HtmlVideo {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlVideo) Loop(val any) HtmlVideo {
	p.SetProperty("loop", val)
	return p
}

func (p *htmlVideo) Muted(val any) HtmlVideo {
	p.SetProperty("muted", val)
	return p
}

func (p *htmlVideo) Nonce(val any) HtmlVideo {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlVideo) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlVideo) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlVideo) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlVideo) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlVideo) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlVideo) OnBlur(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlVideo) OnCanPlay(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("canplay", handler, options...)
	return p
}

func (p *htmlVideo) OnCanPlayThrough(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("canplaythrough", handler, options...)
	return p
}

func (p *htmlVideo) OnClick(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlVideo) OnComplete(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("complete", handler, options...)
	return p
}

func (p *htmlVideo) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlVideo) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlVideo) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlVideo) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlVideo) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlVideo) OnCopy(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlVideo) OnCut(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlVideo) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlVideo) OnDrag(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlVideo) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlVideo) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlVideo) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlVideo) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlVideo) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlVideo) OnDrop(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlVideo) OnDurationChange(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("durationchange", handler, options...)
	return p
}

func (p *htmlVideo) OnEmptied(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("emptied", handler, options...)
	return p
}

func (p *htmlVideo) OnEnded(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("ended", handler, options...)
	return p
}

func (p *htmlVideo) OnError(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlVideo) OnFocus(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlVideo) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlVideo) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlVideo) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlVideo) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlVideo) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlVideo) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlVideo) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlVideo) OnLoadedData(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("loadeddata", handler, options...)
	return p
}

func (p *htmlVideo) OnLoadedMetadata(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("loadedmetadata", handler, options...)
	return p
}

func (p *htmlVideo) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlVideo) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlVideo) OnPaste(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlVideo) OnPause(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pause", handler, options...)
	return p
}

func (p *htmlVideo) OnPlay(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("play", handler, options...)
	return p
}

func (p *htmlVideo) OnPlaying(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("playing", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlVideo) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlVideo) OnProgress(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("progress", handler, options...)
	return p
}

func (p *htmlVideo) OnRateChange(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("ratechange", handler, options...)
	return p
}

func (p *htmlVideo) OnScroll(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlVideo) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlVideo) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlVideo) OnSeeked(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("seeked", handler, options...)
	return p
}

func (p *htmlVideo) OnSeeking(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("seeking", handler, options...)
	return p
}

func (p *htmlVideo) OnStalled(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("stalled", handler, options...)
	return p
}

func (p *htmlVideo) OnSuspend(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("suspend", handler, options...)
	return p
}

func (p *htmlVideo) OnTimeUpdate(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("timeupdate", handler, options...)
	return p
}

func (p *htmlVideo) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlVideo) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlVideo) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlVideo) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlVideo) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlVideo) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlVideo) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlVideo) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlVideo) OnVolumeChange(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("volumechange", handler, options...)
	return p
}

func (p *htmlVideo) OnWaiting(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("waiting", handler, options...)
	return p
}

func (p *htmlVideo) OnWheel(handler func(event Event, options ...any), options ...any) HtmlVideo {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlVideo) Part(val any) HtmlVideo {
	p.SetProperty("part", val)
	return p
}

func (p *htmlVideo) PlaysInline(val any) HtmlVideo {
	p.SetProperty("playsinline", val)
	return p
}

func (p *htmlVideo) Poster(val any) HtmlVideo {
	p.SetProperty("poster", val)
	return p
}

func (p *htmlVideo) Preload(val any) HtmlVideo {
	p.SetProperty("preload", val)
	return p
}

func (p *htmlVideo) Slot(val any) HtmlVideo {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlVideo) SpellCheck(val any) HtmlVideo {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlVideo) Src(val any) HtmlVideo {
	p.SetProperty("src", val)
	return p
}

func (p *htmlVideo) Style(items ...*Ref[StyleItem]) HtmlVideo {
	p.setStyle(items...)
	return p
}

func (p *htmlVideo) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlVideo {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlVideo) TabIndex(val any) HtmlVideo {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlVideo) Text(val any) HtmlVideo {
	p.setText(val)
	return p
}

func (p *htmlVideo) Title(val any) HtmlVideo {
	p.SetProperty("title", val)
	return p
}

func (p *htmlVideo) Translate(val any) HtmlVideo {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlVideo) VirtualKeyBoardPolicy(val any) HtmlVideo {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}

func (p *htmlVideo) Width(val any) HtmlVideo {
	p.SetProperty("width", val)
	return p
}

// Wbr return a html <wbr> element
func Wbr() HtmlWbr {
	return &htmlWbr{htmlBaseElement: htmlBaseElement{tag: "wbr"}}
}

// HtmlWbr represent a html <wbr> element
type HtmlWbr interface {
	HtmlUI

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
	AccessKey(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
	AutoCapitalize(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
	AutoFocus(val any) HtmlWbr

	// Body add elems as sub content for current element
	Body(elems ...UI) HtmlWbr

	// Class set the class attribute with name, and specify the class content with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	Class(name string, items ...*Ref[StyleItem]) HtmlWbr

	// ClassIf set the class attribute with name, and specify the class content with items when condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
	ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
	ContentEditAble(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*
	DataWith(name string, val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
	Dir(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
	DraggAble(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
	EnterKeyHint(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
	Hidden(val any) HtmlWbr

	// Id set element id attribute
	Id(val string) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
	Inert(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
	InputMode(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
	Is(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
	ItemId(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
	ItemProp(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
	ItemRef(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
	ItemScope(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
	ItemType(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
	Lang(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
	Nonce(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event
	OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event
	OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event
	OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event
	OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
	OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
	OnBlur(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
	OnClick(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
	OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
	OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
	OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contentvisibilityautostatechange_event
	OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
	OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
	OnCopy(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
	OnCut(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
	OnDblClick(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event
	OnDrag(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event
	OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event
	OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event
	OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event
	OnDragOver(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event
	OnDragStart(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event
	OnDrop(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
	OnError(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
	OnFocus(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
	OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
	OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
	OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
	OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event
	OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
	OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
	OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event
	OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
	OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
	OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
	OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
	OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
	OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
	OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
	OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
	OnPaste(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event
	OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event
	OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event
	OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event
	OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event
	OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event
	OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event
	OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event
	OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
	OnScroll(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event
	OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
	OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
	OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
	OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
	OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
	OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event
	OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event
	OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event
	OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event
	OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
	OnWheel(handler func(event Event, options ...any), options ...any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
	Part(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
	Slot(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
	SpellCheck(val any) HtmlWbr

	// Style set the style attribute with items
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	Style(items ...*Ref[StyleItem]) HtmlWbr

	// StyleIf set the style attribute with items when the condition is true
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
	StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
	TabIndex(val any) HtmlWbr

	// Text set val as text conent for current element
	Text(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
	Title(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
	Translate(val any) HtmlWbr

	// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
	VirtualKeyBoardPolicy(val any) HtmlWbr
}

type htmlWbr struct {
	htmlBaseElement
}

func (p *htmlWbr) AccessKey(val any) HtmlWbr {
	p.SetProperty("accesskey", val)
	return p
}

func (p *htmlWbr) AutoCapitalize(val any) HtmlWbr {
	p.SetProperty("autocapitalize", val)
	return p
}

func (p *htmlWbr) AutoFocus(val any) HtmlWbr {
	p.SetProperty("autofocus", val)
	return p
}

func (p *htmlWbr) Body(elems ...UI) HtmlWbr {
	p.setBody(elems...)
	return p
}

func (p *htmlWbr) Class(name string, items ...*Ref[StyleItem]) HtmlWbr {
	p.setClass(name, items...)
	return p
}

func (p *htmlWbr) ClassIf(v *Ref[bool], name string, items ...*Ref[StyleItem]) HtmlWbr {
	p.setClassIf(v, name, items...)
	return p
}

func (p *htmlWbr) ContentEditAble(val any) HtmlWbr {
	p.SetAttribute("contenteditable", val)
	return p
}

func (p *htmlWbr) DataWith(name string, val any) HtmlWbr {
	p.dataWith(name, val)
	return p
}

func (p *htmlWbr) Dir(val any) HtmlWbr {
	p.SetProperty("dir", val)
	return p
}

func (p *htmlWbr) DraggAble(val any) HtmlWbr {
	p.SetProperty("draggable", val)
	return p
}

func (p *htmlWbr) EnterKeyHint(val any) HtmlWbr {
	p.SetProperty("enterkeyhint", val)
	return p
}

func (p *htmlWbr) Hidden(val any) HtmlWbr {
	p.SetProperty("hidden", val)
	return p
}

func (p *htmlWbr) Id(val string) HtmlWbr {
	p.SetUIElementId(val)
	return p
}

func (p *htmlWbr) Inert(val any) HtmlWbr {
	p.SetProperty("inert", val)
	return p
}

func (p *htmlWbr) InputMode(val any) HtmlWbr {
	p.SetProperty("inputmode", val)
	return p
}

func (p *htmlWbr) Is(val any) HtmlWbr {
	p.SetProperty("is", val)
	return p
}

func (p *htmlWbr) ItemId(val any) HtmlWbr {
	p.SetProperty("itemid", val)
	return p
}

func (p *htmlWbr) ItemProp(val any) HtmlWbr {
	p.SetProperty("itemprop", val)
	return p
}

func (p *htmlWbr) ItemRef(val any) HtmlWbr {
	p.SetProperty("itemref", val)
	return p
}

func (p *htmlWbr) ItemScope(val any) HtmlWbr {
	p.SetProperty("itemscope", val)
	return p
}

func (p *htmlWbr) ItemType(val any) HtmlWbr {
	p.SetProperty("itemtype", val)
	return p
}

func (p *htmlWbr) Lang(val any) HtmlWbr {
	p.SetProperty("lang", val)
	return p
}

func (p *htmlWbr) Nonce(val any) HtmlWbr {
	p.SetProperty("nonce", val)
	return p
}

func (p *htmlWbr) OnAnimationCancel(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("animationcancel", handler, options...)
	return p
}

func (p *htmlWbr) OnAnimationEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("animationend", handler, options...)
	return p
}

func (p *htmlWbr) OnAnimationIteration(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("animationiteration", handler, options...)
	return p
}

func (p *htmlWbr) OnAnimationStart(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("animationstart", handler, options...)
	return p
}

func (p *htmlWbr) OnAuxClick(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("auxclick", handler, options...)
	return p
}

func (p *htmlWbr) OnBlur(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("blur", handler, options...)
	return p
}

func (p *htmlWbr) OnClick(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("click", handler, options...)
	return p
}

func (p *htmlWbr) OnCompositionEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("compositionend", handler, options...)
	return p
}

func (p *htmlWbr) OnCompositionStart(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("compositionstart", handler, options...)
	return p
}

func (p *htmlWbr) OnCompositionUpdate(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("compositionupdate", handler, options...)
	return p
}

func (p *htmlWbr) OnContentVisibilityAutoStateChange(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("contentvisibilityautostatechange", handler, options...)
	return p
}

func (p *htmlWbr) OnContextMenu(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("contextmenu", handler, options...)
	return p
}

func (p *htmlWbr) OnCopy(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("copy", handler, options...)
	return p
}

func (p *htmlWbr) OnCut(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("cut", handler, options...)
	return p
}

func (p *htmlWbr) OnDblClick(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dblclick", handler, options...)
	return p
}

func (p *htmlWbr) OnDrag(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("drag", handler, options...)
	return p
}

func (p *htmlWbr) OnDragEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dragend", handler, options...)
	return p
}

func (p *htmlWbr) OnDragEnter(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dragenter", handler, options...)
	return p
}

func (p *htmlWbr) OnDragLeave(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dragleave", handler, options...)
	return p
}

func (p *htmlWbr) OnDragOver(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dragover", handler, options...)
	return p
}

func (p *htmlWbr) OnDragStart(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("dragstart", handler, options...)
	return p
}

func (p *htmlWbr) OnDrop(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("drop", handler, options...)
	return p
}

func (p *htmlWbr) OnError(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("error", handler, options...)
	return p
}

func (p *htmlWbr) OnFocus(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("focus", handler, options...)
	return p
}

func (p *htmlWbr) OnFocusIn(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("focusin", handler, options...)
	return p
}

func (p *htmlWbr) OnFocusOut(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("focusout", handler, options...)
	return p
}

func (p *htmlWbr) OnFullScreenChange(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("fullscreenchange", handler, options...)
	return p
}

func (p *htmlWbr) OnFullScreenError(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("fullscreenerror", handler, options...)
	return p
}

func (p *htmlWbr) OnGotPointerCapture(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("gotpointercapture", handler, options...)
	return p
}

func (p *htmlWbr) OnKeyDown(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("keydown", handler, options...)
	return p
}

func (p *htmlWbr) OnKeyUp(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("keyup", handler, options...)
	return p
}

func (p *htmlWbr) OnLostPointerCapture(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("lostpointercapture", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseDown(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mousedown", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseEnter(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mouseenter", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseLeave(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mouseleave", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseMove(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mousemove", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseOut(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mouseout", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseOver(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mouseover", handler, options...)
	return p
}

func (p *htmlWbr) OnMouseUp(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("mouseup", handler, options...)
	return p
}

func (p *htmlWbr) OnPaste(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("paste", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerCancel(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointercancel", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerDown(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerdown", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerEnter(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerenter", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerLeave(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerleave", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerMove(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointermove", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerOut(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerout", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerOver(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerover", handler, options...)
	return p
}

func (p *htmlWbr) OnPointerUp(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("pointerup", handler, options...)
	return p
}

func (p *htmlWbr) OnScroll(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("scroll", handler, options...)
	return p
}

func (p *htmlWbr) OnScrollEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("scrollend", handler, options...)
	return p
}

func (p *htmlWbr) OnSecurityPolicyViolation(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("securitypolicyviolation", handler, options...)
	return p
}

func (p *htmlWbr) OnTouchCancel(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("touchcancel", handler, options...)
	return p
}

func (p *htmlWbr) OnTouchEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("touchend", handler, options...)
	return p
}

func (p *htmlWbr) OnTouchMove(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("touchmove", handler, options...)
	return p
}

func (p *htmlWbr) OnTouchStart(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("touchstart", handler, options...)
	return p
}

func (p *htmlWbr) OnTransitionCancel(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("transitioncancel", handler, options...)
	return p
}

func (p *htmlWbr) OnTransitionEnd(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("transitionend", handler, options...)
	return p
}

func (p *htmlWbr) OnTransitionRun(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("transitionrun", handler, options...)
	return p
}

func (p *htmlWbr) OnTransitionStart(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("transitionstart", handler, options...)
	return p
}

func (p *htmlWbr) OnWheel(handler func(event Event, options ...any), options ...any) HtmlWbr {
	p.registerEventHandler("wheel", handler, options...)
	return p
}

func (p *htmlWbr) Part(val any) HtmlWbr {
	p.SetProperty("part", val)
	return p
}

func (p *htmlWbr) Slot(val any) HtmlWbr {
	p.SetProperty("slot", val)
	return p
}

func (p *htmlWbr) SpellCheck(val any) HtmlWbr {
	p.SetProperty("spellcheck", val)
	return p
}

func (p *htmlWbr) Style(items ...*Ref[StyleItem]) HtmlWbr {
	p.setStyle(items...)
	return p
}

func (p *htmlWbr) StyleIf(v *Ref[bool], items ...*Ref[StyleItem]) HtmlWbr {
	p.setStyleIf(v, items...)
	return p
}

func (p *htmlWbr) TabIndex(val any) HtmlWbr {
	p.SetProperty("tabindex", val)
	return p
}

func (p *htmlWbr) Text(val any) HtmlWbr {
	p.setText(val)
	return p
}

func (p *htmlWbr) Title(val any) HtmlWbr {
	p.SetProperty("title", val)
	return p
}

func (p *htmlWbr) Translate(val any) HtmlWbr {
	p.SetProperty("translate", val)
	return p
}

func (p *htmlWbr) VirtualKeyBoardPolicy(val any) HtmlWbr {
	p.SetProperty("virtualkeyboardpolicy", val)
	return p
}
